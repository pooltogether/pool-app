{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { isEmpty } from 'lodash';\nimport { ERC_721_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { fetchExternalErc721Awards } from 'lib/utils/fetchExternalErc721Awards';\n\nvar getEthereumErc721Data = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetchExternalErc721Awards(params);\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getEthereumErc721Data(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport function useEthereumErc721Query(params) {\n  _s();\n\n  var chainId = params.chainId,\n      provider = params.provider,\n      graphErc721Awards = params.graphErc721Awards,\n      pauseQueries = params.pauseQueries,\n      poolAddress = params.poolAddress;\n  var blockNumber = params.blockNumber;\n\n  if (!blockNumber) {\n    blockNumber = -1;\n  }\n\n  var enabled = !pauseQueries && chainId && !isEmpty(provider) && !isEmpty(graphErc721Awards) && !!poolAddress;\n  var refetchInterval = !pauseQueries && blockNumber === -1 ? ERC_721_POLLING_INTERVAL : false;\n  return useQuery([QUERY_KEYS.ethereumErc721sQuery, chainId, poolAddress, blockNumber], /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getEthereumErc721Data(params);\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), {\n    enabled: enabled,\n    refetchInterval: refetchInterval\n  });\n}\n\n_s(useEthereumErc721Query, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/useEthereumErc721Query.js"],"names":["useQuery","isEmpty","ERC_721_POLLING_INTERVAL","QUERY_KEYS","fetchExternalErc721Awards","getEthereumErc721Data","params","useEthereumErc721Query","chainId","provider","graphErc721Awards","pauseQueries","poolAddress","blockNumber","enabled","refetchInterval","ethereumErc721sQuery"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,yBAAT,QAA0C,qCAA1C;;AAEA,IAAMC,qBAAqB;AAAA,sEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACfF,yBAAyB,CAACE,MAAD,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBD,qBAAqB;AAAA;AAAA;AAAA,GAA3B;;AAIA,OAAO,SAASE,sBAAT,CAAgCD,MAAhC,EAAwC;AAAA;;AAAA,MAE3CE,OAF2C,GAOzCF,MAPyC,CAE3CE,OAF2C;AAAA,MAG3CC,QAH2C,GAOzCH,MAPyC,CAG3CG,QAH2C;AAAA,MAI3CC,iBAJ2C,GAOzCJ,MAPyC,CAI3CI,iBAJ2C;AAAA,MAK3CC,YAL2C,GAOzCL,MAPyC,CAK3CK,YAL2C;AAAA,MAM3CC,WAN2C,GAOzCN,MAPyC,CAM3CM,WAN2C;AAS7C,MAAIC,WAAW,GAAGP,MAAM,CAACO,WAAzB;;AAEA,MAAI,CAACA,WAAL,EAAkB;AAChBA,IAAAA,WAAW,GAAG,CAAC,CAAf;AACD;;AAED,MAAMC,OAAO,GAAG,CAACH,YAAD,IACdH,OADc,IAEd,CAACP,OAAO,CAACQ,QAAD,CAFM,IAGd,CAACR,OAAO,CAACS,iBAAD,CAHM,IAId,CAAC,CAACE,WAJJ;AAMA,MAAMG,eAAe,GAAG,CAACJ,YAAD,IAAkBE,WAAW,KAAK,CAAC,CAAnC,GACtBX,wBADsB,GAEtB,KAFF;AAIA,SAAOF,QAAQ,CACb,CAACG,UAAU,CAACa,oBAAZ,EAAkCR,OAAlC,EAA2CI,WAA3C,EAAwDC,WAAxD,CADa,wEAEb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkBR,qBAAqB,CAACC,MAAD,CAAvC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFa,IAGb;AACEQ,IAAAA,OAAO,EAAPA,OADF;AAEEC,IAAAA,eAAe,EAAfA;AAFF,GAHa,CAAf;AAQD;;GAjCeR,sB;UAyBPP,Q","sourcesContent":["import { useQuery } from 'react-query'\nimport { isEmpty } from 'lodash'\n\nimport {\n  ERC_721_POLLING_INTERVAL,\n  QUERY_KEYS\n} from 'lib/constants'\nimport { fetchExternalErc721Awards } from 'lib/utils/fetchExternalErc721Awards'\n\nconst getEthereumErc721Data = async (params) => {\n  return await fetchExternalErc721Awards(params)\n}\n\nexport function useEthereumErc721Query(params) {\n  const {\n    chainId,\n    provider,\n    graphErc721Awards,\n    pauseQueries,\n    poolAddress,\n  } = params\n\n  let blockNumber = params.blockNumber\n\n  if (!blockNumber) {\n    blockNumber = -1\n  }\n\n  const enabled = !pauseQueries &&\n    chainId &&\n    !isEmpty(provider) &&\n    !isEmpty(graphErc721Awards) &&\n    !!poolAddress\n\n  const refetchInterval = !pauseQueries && (blockNumber === -1) ?\n    ERC_721_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    [QUERY_KEYS.ethereumErc721sQuery, chainId, poolAddress, blockNumber],\n    async () => await getEthereumErc721Data(params),\n    { \n      enabled,\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
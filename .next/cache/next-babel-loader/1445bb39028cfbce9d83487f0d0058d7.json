{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport classnames from 'classnames';\nimport CountUp from 'react-countup';\nimport { usePreviousValue } from 'beautiful-react-hooks';\nexport function PoolCountUp(props) {\n  const {\n    bold,\n    children,\n    duration,\n    fontSansRegular\n  } = props;\n  let end = props.end;\n\n  if (children) {\n    end = children;\n\n    if (Array.isArray(end)) {\n      end = end[0];\n    }\n\n    end = parseFloat(end);\n  } // The CountUp library only works with floats and ints, not strings\n\n\n  if (typeof props.start === 'string' || typeof end === 'string') {\n    console.warn('PoolCountUp exiting early on values:');\n    console.warn('start:', props.start);\n    console.warn('end:', end);\n    return end;\n  }\n\n  let {\n    0: value,\n    1: setValue\n  } = useState(0);\n  let prev = usePreviousValue(value);\n  useEffect(() => {\n    setValue(end);\n  }, [end]);\n  let fontBold = bold === undefined ? true : false;\n  let decimalsToUse = Number(props.decimals);\n\n  if (isNaN(decimalsToUse)) {\n    decimalsToUse = 2;\n  } // TODO: Replace this! What we need is a clever formatter (maybe the one from v2)\n  // that only shows the # of decimals necessary\n\n\n  if (decimalsToUse === 0) {\n    prev = parseInt(prev, 10);\n    value = parseInt(value, 10);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: classnames({\n      'font-sans': fontSansRegular,\n      'font-mono': !fontSansRegular,\n      'font-bold': fontBold\n    })\n  }, __jsx(CountUp, {\n    start: prev || 0,\n    end: value,\n    duration: duration || 1.4,\n    separator: ',',\n    decimals: decimalsToUse // onEnd={() => console.log('Ended! 👏')}\n    // onStart={() => console.log('Started! 💨')}\n\n  })));\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/PoolCountUp.jsx"],"names":["React","useEffect","useState","classnames","CountUp","usePreviousValue","PoolCountUp","props","bold","children","duration","fontSansRegular","end","Array","isArray","parseFloat","start","console","warn","value","setValue","prev","fontBold","undefined","decimalsToUse","Number","decimals","isNaN","parseInt"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AAEA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,QAAlB;AAA4BC,IAAAA;AAA5B,MAAgDJ,KAAtD;AAEA,MAAIK,GAAG,GAAGL,KAAK,CAACK,GAAhB;;AACA,MAAIH,QAAJ,EAAc;AACZG,IAAAA,GAAG,GAAGH,QAAN;;AAEA,QAAII,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACtBA,MAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAT;AACD;;AACDA,IAAAA,GAAG,GAAGG,UAAU,CAACH,GAAD,CAAhB;AACD,GAXgC,CAajC;;;AACA,MACE,OAAOL,KAAK,CAACS,KAAb,KAAuB,QAAvB,IACA,OAAOJ,GAAP,KAAe,QAFjB,EAGE;AACAK,IAAAA,OAAO,CAACC,IAAR,CAAa,sCAAb;AACAD,IAAAA,OAAO,CAACC,IAAR,CAAa,QAAb,EAAuBX,KAAK,CAACS,KAA7B;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAa,MAAb,EAAqBN,GAArB;AACA,WAAOA,GAAP;AACD;;AAID,MAAI;AAAA,OAACO,KAAD;AAAA,OAAQC;AAAR,MAAoBlB,QAAQ,CAAC,CAAD,CAAhC;AACA,MAAImB,IAAI,GAAGhB,gBAAgB,CAACc,KAAD,CAA3B;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,QAAQ,CAACR,GAAD,CAAR;AACD,GAFQ,EAEN,CAACA,GAAD,CAFM,CAAT;AAIA,MAAIU,QAAQ,GAAGd,IAAI,KAAKe,SAAT,GAAqB,IAArB,GAA4B,KAA3C;AAEA,MAAIC,aAAa,GAAGC,MAAM,CAAClB,KAAK,CAACmB,QAAP,CAA1B;;AACA,MAAIC,KAAK,CAACH,aAAD,CAAT,EAA0B;AACxBA,IAAAA,aAAa,GAAG,CAAhB;AACD,GArCgC,CAuCjC;AACA;;;AACA,MAAIA,aAAa,KAAK,CAAtB,EAAyB;AACvBH,IAAAA,IAAI,GAAGO,QAAQ,CAACP,IAAD,EAAO,EAAP,CAAf;AACAF,IAAAA,KAAK,GAAGS,QAAQ,CAACT,KAAD,EAAQ,EAAR,CAAhB;AACD;;AAED,SAAO,4BACL;AACE,IAAA,SAAS,EAAEhB,UAAU,CACnB;AACE,mBAAaQ,eADf;AAEE,mBAAa,CAACA,eAFhB;AAGE,mBAAaW;AAHf,KADmB;AADvB,KASE,MAAC,OAAD;AACE,IAAA,KAAK,EAAED,IAAI,IAAI,CADjB;AAEE,IAAA,GAAG,EAAEF,KAFP;AAGE,IAAA,QAAQ,EAAET,QAAQ,IAAI,GAHxB;AAIE,IAAA,SAAS,EAAE,GAJb;AAKE,IAAA,QAAQ,EAAEc,aALZ,CAME;AACA;;AAPF,IATF,CADK,CAAP;AAqBD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport classnames from 'classnames'\nimport CountUp from 'react-countup'\nimport { usePreviousValue } from 'beautiful-react-hooks'; \n\nexport function PoolCountUp(props) {\n  const { bold, children, duration, fontSansRegular } = props\n\n  let end = props.end\n  if (children) {\n    end = children\n\n    if (Array.isArray(end)) {\n      end = end[0]\n    }\n    end = parseFloat(end)\n  }\n\n  // The CountUp library only works with floats and ints, not strings\n  if (\n    typeof props.start === 'string' ||\n    typeof end === 'string'\n  ) {\n    console.warn('PoolCountUp exiting early on values:')\n    console.warn('start:', props.start)\n    console.warn('end:', end)\n    return end\n  }\n\n\n\n  let [value, setValue] = useState(0)\n  let prev = usePreviousValue(value)\n  useEffect(() => {\n    setValue(end)\n  }, [end])\n\n  let fontBold = bold === undefined ? true : false\n\n  let decimalsToUse = Number(props.decimals)\n  if (isNaN(decimalsToUse)) {\n    decimalsToUse = 2\n  }\n\n  // TODO: Replace this! What we need is a clever formatter (maybe the one from v2)\n  // that only shows the # of decimals necessary\n  if (decimalsToUse === 0) {\n    prev = parseInt(prev, 10)\n    value = parseInt(value, 10)\n  }\n\n  return <>\n    <span\n      className={classnames(\n        {\n          'font-sans': fontSansRegular,\n          'font-mono': !fontSansRegular,\n          'font-bold': fontBold,\n        }\n      )}\n    >\n      <CountUp\n        start={prev || 0}\n        end={value}\n        duration={duration || 1.4}\n        separator={','}\n        decimals={decimalsToUse}\n        // onEnd={() => console.log('Ended! 👏')}\n        // onStart={() => console.log('Started! 💨')}\n      />\n    </span>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
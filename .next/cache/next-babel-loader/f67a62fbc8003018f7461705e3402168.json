{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { MAINNET_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { getSponsorData } from 'lib/fetchers/getSponsorData';\nexport function useSponsorQuery(pauseQueries, chainId, sponsorAddress) {\n  _s();\n\n  var blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n  var error = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var refetchInterval = !pauseQueries && blockNumber === -1 ? MAINNET_POLLING_INTERVAL : false;\n  return useQuery([QUERY_KEYS.sponsorQuery, chainId, sponsorAddress, blockNumber], /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", getSponsorData(chainId, sponsorAddress, blockNumber));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), {\n    enabled: !pauseQueries && chainId && sponsorAddress && blockNumber && !error,\n    refetchInterval: refetchInterval\n  });\n}\n\n_s(useSponsorQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/useSponsorQuery.js"],"names":["useQuery","MAINNET_POLLING_INTERVAL","QUERY_KEYS","getSponsorData","useSponsorQuery","pauseQueries","chainId","sponsorAddress","blockNumber","error","refetchInterval","sponsorQuery","enabled"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,cAAT,QAA+B,6BAA/B;AAEA,OAAO,SAASC,eAAT,CAAyBC,YAAzB,EAAuCC,OAAvC,EAAgDC,cAAhD,EAAgG;AAAA;;AAAA,MAAhCC,WAAgC,uEAAlB,CAAC,CAAiB;AAAA,MAAdC,KAAc,uEAAN,IAAM;AACrG,MAAMC,eAAe,GAAG,CAACL,YAAD,IAAkBG,WAAW,KAAK,CAAC,CAAnC,GACtBP,wBADsB,GAEtB,KAFF;AAIA,SAAOD,QAAQ,CACb,CAACE,UAAU,CAACS,YAAZ,EAA0BL,OAA1B,EAAmCC,cAAnC,EAAmDC,WAAnD,CADa,wEAEb;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAqBL,cAAc,CAACG,OAAD,EAAUC,cAAV,EAA0BC,WAA1B,CAAnC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFa,IAGb;AACEI,IAAAA,OAAO,EAAE,CAACP,YAAD,IAAiBC,OAAjB,IAA4BC,cAA5B,IAA8CC,WAA9C,IAA6D,CAACC,KADzE;AAEEC,IAAAA,eAAe,EAAfA;AAFF,GAHa,CAAf;AAQD;;GAbeN,e;UAKPJ,Q","sourcesContent":["import { useQuery } from 'react-query'\n\nimport {\n  MAINNET_POLLING_INTERVAL,\n  QUERY_KEYS\n} from 'lib/constants'\nimport { getSponsorData } from 'lib/fetchers/getSponsorData'\n\nexport function useSponsorQuery(pauseQueries, chainId, sponsorAddress, blockNumber = -1, error = null) {\n  const refetchInterval = !pauseQueries && (blockNumber === -1) ?\n    MAINNET_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    [QUERY_KEYS.sponsorQuery, chainId, sponsorAddress, blockNumber],\n    async () => { return getSponsorData(chainId, sponsorAddress, blockNumber) },\n    { \n      enabled: !pauseQueries && chainId && sponsorAddress && blockNumber && !error,\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
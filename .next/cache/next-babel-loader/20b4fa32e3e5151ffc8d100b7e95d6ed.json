{"ast":null,"code":"import { useQuery } from 'react-query';\nimport { isEmpty } from 'lodash';\nimport { MAINNET_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { fetchGenericChainData } from 'lib/utils/fetchGenericChainData';\n\nconst getEthereumErc20Data = async params => {\n  const data = await fetchGenericChainData(params);\n  return {\n    dai: data\n  };\n};\n\nexport function useEthereumGenericQuery(params) {\n  var _poolData$prizeStrate, _poolData$compoundPri;\n\n  const {\n    chainId,\n    pauseQueries,\n    provider,\n    poolData\n  } = params;\n  let blockNumber = params.blockNumber;\n\n  if (!blockNumber) {\n    blockNumber = -1;\n  }\n\n  const prizeStrategyAddress = poolData === null || poolData === void 0 ? void 0 : (_poolData$prizeStrate = poolData.prizeStrategy) === null || _poolData$prizeStrate === void 0 ? void 0 : _poolData$prizeStrate.id;\n  const cTokenAddress = poolData === null || poolData === void 0 ? void 0 : (_poolData$compoundPri = poolData.compoundPrizePool) === null || _poolData$compoundPri === void 0 ? void 0 : _poolData$compoundPri.cToken;\n  const poolAddress = poolData === null || poolData === void 0 ? void 0 : poolData.poolAddress;\n  const enabled = !pauseQueries && chainId && !isEmpty(provider) && !isEmpty(poolData) && Boolean(prizeStrategyAddress) && Boolean(cTokenAddress) && Boolean(poolAddress);\n  const refetchInterval = !pauseQueries && blockNumber === -1 ? MAINNET_POLLING_INTERVAL : false;\n  return useQuery([QUERY_KEYS.ethereumGenericQuery, chainId, poolAddress, blockNumber], async () => await getEthereumErc20Data(params), {\n    enabled,\n    refetchInterval\n  });\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/useEthereumGenericQuery.js"],"names":["useQuery","isEmpty","MAINNET_POLLING_INTERVAL","QUERY_KEYS","fetchGenericChainData","getEthereumErc20Data","params","data","dai","useEthereumGenericQuery","chainId","pauseQueries","provider","poolData","blockNumber","prizeStrategyAddress","prizeStrategy","id","cTokenAddress","compoundPrizePool","cToken","poolAddress","enabled","Boolean","refetchInterval","ethereumGenericQuery"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,qBAAT,QAAsC,iCAAtC;;AAEA,MAAMC,oBAAoB,GAAG,MAAOC,MAAP,IAAkB;AAC7C,QAAMC,IAAI,GAAG,MAAMH,qBAAqB,CAACE,MAAD,CAAxC;AAEA,SAAO;AACLE,IAAAA,GAAG,EAAED;AADA,GAAP;AAGD,CAND;;AAQA,OAAO,SAASE,uBAAT,CAAiCH,MAAjC,EAAyC;AAAA;;AAC9C,QAAM;AACJI,IAAAA,OADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA;AAJI,MAKFP,MALJ;AAOA,MAAIQ,WAAW,GAAGR,MAAM,CAACQ,WAAzB;;AAEA,MAAI,CAACA,WAAL,EAAkB;AAChBA,IAAAA,WAAW,GAAG,CAAC,CAAf;AACD;;AAED,QAAMC,oBAAoB,GAAGF,QAAH,aAAGA,QAAH,gDAAGA,QAAQ,CAAEG,aAAb,0DAAG,sBAAyBC,EAAtD;AACA,QAAMC,aAAa,GAAGL,QAAH,aAAGA,QAAH,gDAAGA,QAAQ,CAAEM,iBAAb,0DAAG,sBAA6BC,MAAnD;AACA,QAAMC,WAAW,GAAGR,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEQ,WAA9B;AAEA,QAAMC,OAAO,GAAG,CAACX,YAAD,IACdD,OADc,IAEd,CAACT,OAAO,CAACW,QAAD,CAFM,IAGd,CAACX,OAAO,CAACY,QAAD,CAHM,IAIdU,OAAO,CAACR,oBAAD,CAJO,IAKdQ,OAAO,CAACL,aAAD,CALO,IAMdK,OAAO,CAACF,WAAD,CANT;AAQA,QAAMG,eAAe,GAAG,CAACb,YAAD,IAAkBG,WAAW,KAAK,CAAC,CAAnC,GACtBZ,wBADsB,GAEtB,KAFF;AAIA,SAAOF,QAAQ,CACb,CAACG,UAAU,CAACsB,oBAAZ,EAAkCf,OAAlC,EAA2CW,WAA3C,EAAwDP,WAAxD,CADa,EAEb,YAAY,MAAMT,oBAAoB,CAACC,MAAD,CAFzB,EAGb;AACEgB,IAAAA,OADF;AAEEE,IAAAA;AAFF,GAHa,CAAf;AAQD","sourcesContent":["import { useQuery } from 'react-query'\nimport { isEmpty } from 'lodash'\n\nimport {\n  MAINNET_POLLING_INTERVAL,\n  QUERY_KEYS,\n} from 'lib/constants'\nimport { fetchGenericChainData } from 'lib/utils/fetchGenericChainData'\n\nconst getEthereumErc20Data = async (params) => {\n  const data = await fetchGenericChainData(params)\n  \n  return {\n    dai: data\n  }\n}\n\nexport function useEthereumGenericQuery(params) {\n  const {\n    chainId,\n    pauseQueries,\n    provider,\n    poolData\n  } = params\n\n  let blockNumber = params.blockNumber\n\n  if (!blockNumber) {\n    blockNumber = -1\n  }\n\n  const prizeStrategyAddress = poolData?.prizeStrategy?.id\n  const cTokenAddress = poolData?.compoundPrizePool?.cToken\n  const poolAddress = poolData?.poolAddress\n\n  const enabled = !pauseQueries &&\n    chainId &&\n    !isEmpty(provider) &&\n    !isEmpty(poolData) && \n    Boolean(prizeStrategyAddress) &&\n    Boolean(cTokenAddress) &&\n    Boolean(poolAddress)\n\n  const refetchInterval = !pauseQueries && (blockNumber === -1) ?\n    MAINNET_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    [QUERY_KEYS.ethereumGenericQuery, chainId, poolAddress, blockNumber],\n    async () => await getEthereumErc20Data(params),\n    { \n      enabled,\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
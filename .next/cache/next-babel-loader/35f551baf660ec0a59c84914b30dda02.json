{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { batch, contract } from '@pooltogether/etherplex';\nimport ERC20Abi from 'lib/../abis/ERC20Abi';\n\nvar debug = require('debug')('pool-app:fetchExternalErc20Awards');\n\nexport var fetchExternalErc20Awards = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var provider, graphErc20Awards, poolAddress, poolsExternalErc20AwardsData, batchCalls, etherplexTokenContract, erc20Address, values, i, awards, balance;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            provider = _ref.provider, graphErc20Awards = _ref.graphErc20Awards, poolAddress = _ref.poolAddress;\n            poolsExternalErc20AwardsData = [];\n            batchCalls = [];\n            awards = graphErc20Awards === null || graphErc20Awards === void 0 ? void 0 : graphErc20Awards.map(function (award) {\n              return award.address;\n            }); // Prepare batched calls\n\n            for (i = 0; i < (awards === null || awards === void 0 ? void 0 : awards.length); i++) {\n              erc20Address = awards[i];\n              etherplexTokenContract = contract(erc20Address, ERC20Abi, erc20Address);\n              batchCalls.push(etherplexTokenContract.balanceOf(poolAddress));\n            } // Execute batched calls\n\n\n            _context.next = 7;\n            return batch.apply(void 0, [provider].concat(batchCalls));\n\n          case 7:\n            values = _context.sent;\n\n            // Map batch call results to erc20 data\n            for (i = 0; i < (awards === null || awards === void 0 ? void 0 : awards.length); i++) {\n              erc20Address = awards[i];\n              etherplexTokenContract = awards[erc20Address];\n              balance = values[erc20Address].balanceOf[0];\n              poolsExternalErc20AwardsData.push(_objectSpread(_objectSpread({}, etherplexTokenContract), {}, {\n                address: erc20Address,\n                balance: balance\n              }));\n            }\n\n            return _context.abrupt(\"return\", poolsExternalErc20AwardsData);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchExternalErc20Awards(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/utils/fetchExternalErc20Awards.js"],"names":["batch","contract","ERC20Abi","debug","require","fetchExternalErc20Awards","provider","graphErc20Awards","poolAddress","poolsExternalErc20AwardsData","batchCalls","awards","map","award","address","i","length","erc20Address","etherplexTokenContract","push","balanceOf","values","balance"],"mappings":";;;;;;;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,yBAAhC;AAEA,OAAOC,QAAP,MAAqB,sBAArB;;AAEA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,mCAAjB,CAAd;;AAEA,OAAO,IAAMC,wBAAwB;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACtCC,YAAAA,QADsC,QACtCA,QADsC,EAEtCC,gBAFsC,QAEtCA,gBAFsC,EAGtCC,WAHsC,QAGtCA,WAHsC;AAKhCC,YAAAA,4BALgC,GAKD,EALC;AAMhCC,YAAAA,UANgC,GAMnB,EANmB;AAahCC,YAAAA,MAbgC,GAavBJ,gBAbuB,aAavBA,gBAbuB,uBAavBA,gBAAgB,CAAEK,GAAlB,CAAsB,UAAAC,KAAK;AAAA,qBAAIA,KAAK,CAACC,OAAV;AAAA,aAA3B,CAbuB,EAetC;;AACA,iBAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,IAAGJ,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEK,MAAX,CAAb,EAAgCD,CAAC,EAAjC,EAAqC;AACnCE,cAAAA,YAAY,GAAGN,MAAM,CAACI,CAAD,CAArB;AACAG,cAAAA,sBAAsB,GAAGjB,QAAQ,CAACgB,YAAD,EAAef,QAAf,EAAyBe,YAAzB,CAAjC;AAEAP,cAAAA,UAAU,CAACS,IAAX,CACED,sBAAsB,CACnBE,SADH,CACaZ,WADb,CADF;AAID,aAxBqC,CA0BtC;;;AA1BsC;AAAA,mBA2BvBR,KAAK,MAAL,UACbM,QADa,SAEVI,UAFU,EA3BuB;;AAAA;AA2BtCW,YAAAA,MA3BsC;;AAgCtC;AACA,iBAAKN,CAAC,GAAG,CAAT,EAAYA,CAAC,IAAGJ,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEK,MAAX,CAAb,EAAgCD,CAAC,EAAjC,EAAqC;AACnCE,cAAAA,YAAY,GAAGN,MAAM,CAACI,CAAD,CAArB;AACAG,cAAAA,sBAAsB,GAAGP,MAAM,CAACM,YAAD,CAA/B;AAEMK,cAAAA,OAJ6B,GAInBD,MAAM,CAACJ,YAAD,CAAN,CAAqBG,SAArB,CAA+B,CAA/B,CAJmB;AAMnCX,cAAAA,4BAA4B,CAACU,IAA7B,iCACKD,sBADL;AAEEJ,gBAAAA,OAAO,EAAEG,YAFX;AAGEK,gBAAAA,OAAO,EAAPA;AAHF;AAKD;;AA5CqC,6CA8C/Bb,4BA9C+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAxBJ,wBAAwB;AAAA;AAAA;AAAA,GAA9B","sourcesContent":["import { batch, contract } from '@pooltogether/etherplex'\n\nimport ERC20Abi from 'lib/../abis/ERC20Abi'\n\nconst debug = require('debug')('pool-app:fetchExternalErc20Awards')\n\nexport const fetchExternalErc20Awards = async ({\n  provider,\n  graphErc20Awards,\n  poolAddress,\n}) => {\n  const poolsExternalErc20AwardsData = []\n  const batchCalls = []\n  \n  let etherplexTokenContract\n  let erc20Address\n  let values\n  let i\n  \n  const awards = graphErc20Awards?.map(award => award.address)\n\n  // Prepare batched calls\n  for (i = 0; i < awards?.length; i++) {\n    erc20Address = awards[i]\n    etherplexTokenContract = contract(erc20Address, ERC20Abi, erc20Address)\n\n    batchCalls.push(\n      etherplexTokenContract\n        .balanceOf(poolAddress)\n    )\n  }\n\n  // Execute batched calls\n  values = await batch(\n    provider,\n    ...batchCalls\n  )\n\n  // Map batch call results to erc20 data\n  for (i = 0; i < awards?.length; i++) {\n    erc20Address = awards[i]\n    etherplexTokenContract = awards[erc20Address]\n\n    const balance = values[erc20Address].balanceOf[0]\n\n    poolsExternalErc20AwardsData.push({\n      ...etherplexTokenContract,\n      address: erc20Address,\n      balance,\n    })\n  }\n\n  return poolsExternalErc20AwardsData\n}\n"]},"metadata":{},"sourceType":"module"}
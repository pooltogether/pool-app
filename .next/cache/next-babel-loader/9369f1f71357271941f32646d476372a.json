{"ast":null,"code":"import { useQuery } from 'react-query';\nimport { UNISWAP_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { getUniswapData } from 'lib/fetchers/getUniswapData';\nexport function useUniswapTokensQuery(pauseQueries, chainId, poolAddress, blockNumber, addresses) {\n  const cacheKey = [QUERY_KEYS.uniswapTokensQuery, chainId, poolAddress, blockNumber];\n  const refetchInterval = !pauseQueries && blockNumber === -1 ? UNISWAP_POLLING_INTERVAL : false;\n  return useQuery(cacheKey, async () => {\n    return getUniswapData(chainId, addresses, blockNumber);\n  }, {\n    enabled: !pauseQueries && chainId && poolAddress && addresses,\n    refetchInterval\n  });\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/useUniswapTokensQuery.js"],"names":["useQuery","UNISWAP_POLLING_INTERVAL","QUERY_KEYS","getUniswapData","useUniswapTokensQuery","pauseQueries","chainId","poolAddress","blockNumber","addresses","cacheKey","uniswapTokensQuery","refetchInterval","enabled"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,cAAT,QAA+B,6BAA/B;AAEA,OAAO,SAASC,qBAAT,CAA+BC,YAA/B,EAA6CC,OAA7C,EAAsDC,WAAtD,EAAmEC,WAAnE,EAAgFC,SAAhF,EAA2F;AAChG,QAAMC,QAAQ,GAAG,CACfR,UAAU,CAACS,kBADI,EAEfL,OAFe,EAGfC,WAHe,EAIfC,WAJe,CAAjB;AAOA,QAAMI,eAAe,GAAG,CAACP,YAAD,IAAkBG,WAAW,KAAK,CAAC,CAAnC,GACtBP,wBADsB,GAEtB,KAFF;AAIA,SAAOD,QAAQ,CACbU,QADa,EAEb,YAAY;AAAE,WAAOP,cAAc,CAACG,OAAD,EAAUG,SAAV,EAAqBD,WAArB,CAArB;AAAwD,GAFzD,EAGb;AACEK,IAAAA,OAAO,EAAE,CAACR,YAAD,IAAiBC,OAAjB,IAA4BC,WAA5B,IAA2CE,SADtD;AAEEG,IAAAA;AAFF,GAHa,CAAf;AAQD","sourcesContent":["import { useQuery } from 'react-query'\n\nimport {\n  UNISWAP_POLLING_INTERVAL,\n  QUERY_KEYS\n} from 'lib/constants'\nimport { getUniswapData } from 'lib/fetchers/getUniswapData'\n\nexport function useUniswapTokensQuery(pauseQueries, chainId, poolAddress, blockNumber, addresses) {\n  const cacheKey = [\n    QUERY_KEYS.uniswapTokensQuery,\n    chainId,\n    poolAddress,\n    blockNumber\n  ]\n\n  const refetchInterval = !pauseQueries && (blockNumber === -1) ?\n    UNISWAP_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    cacheKey,\n    async () => { return getUniswapData(chainId, addresses, blockNumber) },\n    {\n      enabled: !pauseQueries && chainId && poolAddress && addresses,\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { MAINNET_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { getPrizeData } from 'lib/fetchers/getPrizeData';\nexport function usePrizeQuery(pauseQueries, chainId, pool, prizeId) {\n  _s();\n\n  var blockNumber = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n  var poolAddress = pool === null || pool === void 0 ? void 0 : pool.poolAddress;\n  var refetchInterval = !pauseQueries && blockNumber === -1 ? MAINNET_POLLING_INTERVAL : false;\n  return useQuery([QUERY_KEYS.prizeQuery, chainId, poolAddress, prizeId, blockNumber], /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", getPrizeData(chainId, poolAddress, prizeId, blockNumber));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), {\n    enabled: !pauseQueries && chainId && poolAddress && prizeId && blockNumber,\n    refetchInterval: refetchInterval\n  });\n}\n\n_s(usePrizeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/usePrizeQuery.js"],"names":["useQuery","MAINNET_POLLING_INTERVAL","QUERY_KEYS","getPrizeData","usePrizeQuery","pauseQueries","chainId","pool","prizeId","blockNumber","poolAddress","refetchInterval","prizeQuery","enabled"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,YAAT,QAA6B,2BAA7B;AAEA,OAAO,SAASC,aAAT,CAAuBC,YAAvB,EAAqCC,OAArC,EAA8CC,IAA9C,EAAoDC,OAApD,EAA+E;AAAA;;AAAA,MAAlBC,WAAkB,uEAAJ,CAAC,CAAG;AACpF,MAAMC,WAAW,GAAGH,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEG,WAA1B;AAEA,MAAMC,eAAe,GAAG,CAACN,YAAD,IAAkBI,WAAW,KAAK,CAAC,CAAnC,GACtBR,wBADsB,GAEtB,KAFF;AAIA,SAAOD,QAAQ,CACb,CAACE,UAAU,CAACU,UAAZ,EAAwBN,OAAxB,EAAiCI,WAAjC,EAA8CF,OAA9C,EAAuDC,WAAvD,CADa,wEAEb;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAqBN,YAAY,CAACG,OAAD,EAAUI,WAAV,EAAuBF,OAAvB,EAAgCC,WAAhC,CAAjC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFa,IAGb;AACEI,IAAAA,OAAO,EAAE,CAACR,YAAD,IAAiBC,OAAjB,IAA4BI,WAA5B,IAA2CF,OAA3C,IAAsDC,WADjE;AAEEE,IAAAA,eAAe,EAAfA;AAFF,GAHa,CAAf;AAQD;;GAfeP,a;UAOPJ,Q","sourcesContent":["import { useQuery } from 'react-query'\n\nimport {\n  MAINNET_POLLING_INTERVAL,\n  QUERY_KEYS\n} from 'lib/constants'\nimport { getPrizeData } from 'lib/fetchers/getPrizeData'\n\nexport function usePrizeQuery(pauseQueries, chainId, pool, prizeId, blockNumber = -1) {\n  const poolAddress = pool?.poolAddress\n\n  const refetchInterval = !pauseQueries && (blockNumber === -1) ?\n    MAINNET_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    [QUERY_KEYS.prizeQuery, chainId, poolAddress, prizeId, blockNumber],\n    async () => { return getPrizeData(chainId, poolAddress, prizeId, blockNumber) },\n    {\n      enabled: !pauseQueries && chainId && poolAddress && prizeId && blockNumber,\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { useAtom } from 'jotai';\nimport { useRouter } from 'next/router';\nimport PrizePoolAbi from '@pooltogether/pooltogether-contracts/abis/PrizePool';\nimport { useTranslation, Trans } from 'lib/../i18n';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { PlayerDataContext } from 'lib/components/contextProviders/PlayerDataContextProvider';\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom';\nimport { ButtonDrawer } from 'lib/components/ButtonDrawer';\nimport { Button } from 'lib/components/Button';\nimport { PaneTitle } from 'lib/components/PaneTitle';\nimport { PoolNumber } from 'lib/components/PoolNumber';\nimport { WithdrawOdds } from 'lib/components/WithdrawOdds';\nimport { TransactionsTakeTimeMessage } from 'lib/components/TransactionsTakeTimeMessage';\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction';\nexport function ConfirmWithdrawNoFee(props) {\n  var _pool$underlyingColla, _pool$prizeStrategy, _pool$prizeStrategy$s, _pool$prizeStrategy$s2;\n\n  const {\n    t\n  } = useTranslation();\n  const [transactions, setTransactions] = useAtom(transactionsAtom);\n  const router = useRouter();\n  const quantity = router.query.quantity;\n  const {\n    nextStep,\n    previousStep\n  } = props;\n  const {\n    usersAddress,\n    provider\n  } = useContext(AuthControllerContext);\n  const {\n    pool\n  } = useContext(PoolDataContext);\n  const {\n    usersTicketBalance\n  } = useContext(PlayerDataContext);\n  const decimals = pool === null || pool === void 0 ? void 0 : pool.underlyingCollateralDecimals;\n  const tickerUpcased = pool === null || pool === void 0 ? void 0 : (_pool$underlyingColla = pool.underlyingCollateralSymbol) === null || _pool$underlyingColla === void 0 ? void 0 : _pool$underlyingColla.toUpperCase();\n  const poolAddress = pool === null || pool === void 0 ? void 0 : pool.poolAddress;\n  const controlledTokenAddress = pool === null || pool === void 0 ? void 0 : (_pool$prizeStrategy = pool.prizeStrategy) === null || _pool$prizeStrategy === void 0 ? void 0 : (_pool$prizeStrategy$s = _pool$prizeStrategy.singleRandomWinner) === null || _pool$prizeStrategy$s === void 0 ? void 0 : (_pool$prizeStrategy$s2 = _pool$prizeStrategy$s.ticket) === null || _pool$prizeStrategy$s2 === void 0 ? void 0 : _pool$prizeStrategy$s2.id;\n  const {\n    0: txExecuted,\n    1: setTxExecuted\n  } = useState(false);\n  const {\n    0: txId,\n    1: setTxId\n  } = useState();\n  const txMainName = `${t('withdraw')}: ${quantity} ${t('tickets')}`;\n  const txSubName = `${quantity} ${tickerUpcased}`;\n  const txName = `${txMainName} (${txSubName})`;\n  const method = 'withdrawInstantlyFrom';\n  const [sendTx] = useSendTransaction(txName, transactions, setTransactions);\n  const tx = transactions === null || transactions === void 0 ? void 0 : transactions.find(tx => tx.id === txId);\n\n  const runTx = async () => {\n    setTxExecuted(true); // there should be no exit fee when we do an instant no-fee withdrawal\n\n    const maxExitFee = '0';\n    const params = [usersAddress, ethers.utils.parseUnits(quantity, Number(decimals)), controlledTokenAddress, ethers.utils.parseEther(maxExitFee) // {\n    //   gasLimit: 700000\n    // }\n    ];\n    const id = sendTx(t, provider, usersAddress, PrizePoolAbi, poolAddress, method, params);\n    setTxId(id);\n  }; // if (!txExecuted && quantity && decimals) {\n  //   runTx()\n  // }\n\n\n  useEffect(() => {\n    if ((tx === null || tx === void 0 ? void 0 : tx.cancelled) || (tx === null || tx === void 0 ? void 0 : tx.error)) {\n      previousStep();\n    } else if (tx === null || tx === void 0 ? void 0 : tx.completed) {\n      nextStep();\n    }\n  }, [tx]);\n  return __jsx(React.Fragment, null, !(tx === null || tx === void 0 ? void 0 : tx.sent) && __jsx(React.Fragment, null, __jsx(PaneTitle, null, t('confirmWithdrawalOfTickets')), __jsx(\"div\", {\n    className: \"text-center mx-auto rounded-xl text-orange bg-orange-darkened border-2 border-orange py-2 xs:py-8 px-2 xs:px-8\",\n    style: {\n      maxWidth: 600\n    }\n  }, __jsx(\"h4\", {\n    className: \"text-orange\"\n  }, __jsx(\"span\", {\n    className: \"font-normal\"\n  }, t('amountToBeWithdrawn')), \" -\", __jsx(Trans, {\n    i18nKey: \"amountTickets\",\n    defaults: \"<number>{{amount}}</number> tickets\",\n    components: {\n      number: __jsx(PoolNumber, null)\n    },\n    values: {\n      amount: quantity\n    }\n  })), __jsx(WithdrawOdds, {\n    pool: pool,\n    usersBalance: usersTicketBalance,\n    quantity: quantity\n  })), __jsx(ButtonDrawer, null, __jsx(Button, {\n    onClick: runTx,\n    textSize: \"lg\" // disabled={poolIsLocked}\n    ,\n    className: 'mx-auto sm:mt-16'\n  }, t('confirmWithdrawal')))), (tx === null || tx === void 0 ? void 0 : tx.sent) && !(tx === null || tx === void 0 ? void 0 : tx.completed) && __jsx(React.Fragment, null, __jsx(TransactionsTakeTimeMessage, {\n    tx: tx,\n    title: t('withdrawing'),\n    subtitle: __jsx(Trans, {\n      i18nKey: \"amountTickets\",\n      defaults: \"<number>{{amount}}</number> tickets\",\n      components: {\n        number: __jsx(PoolNumber, null)\n      },\n      values: {\n        amount: quantity\n      }\n    })\n  })));\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/ConfirmWithdrawNoFee.jsx"],"names":["React","useContext","useState","useEffect","ethers","useAtom","useRouter","PrizePoolAbi","useTranslation","Trans","AuthControllerContext","PoolDataContext","PlayerDataContext","transactionsAtom","ButtonDrawer","Button","PaneTitle","PoolNumber","WithdrawOdds","TransactionsTakeTimeMessage","useSendTransaction","ConfirmWithdrawNoFee","props","t","transactions","setTransactions","router","quantity","query","nextStep","previousStep","usersAddress","provider","pool","usersTicketBalance","decimals","underlyingCollateralDecimals","tickerUpcased","underlyingCollateralSymbol","toUpperCase","poolAddress","controlledTokenAddress","prizeStrategy","singleRandomWinner","ticket","id","txExecuted","setTxExecuted","txId","setTxId","txMainName","txSubName","txName","method","sendTx","tx","find","runTx","maxExitFee","params","utils","parseUnits","Number","parseEther","cancelled","error","completed","sent","maxWidth","number","amount"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\nimport { ethers } from 'ethers'\nimport { useAtom } from 'jotai'\nimport { useRouter } from 'next/router'\n\nimport PrizePoolAbi from '@pooltogether/pooltogether-contracts/abis/PrizePool'\n\nimport { useTranslation, Trans } from 'lib/../i18n'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { PlayerDataContext } from 'lib/components/contextProviders/PlayerDataContextProvider'\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom'\nimport { ButtonDrawer } from 'lib/components/ButtonDrawer'\nimport { Button } from 'lib/components/Button'\nimport { PaneTitle } from 'lib/components/PaneTitle'\nimport { PoolNumber } from 'lib/components/PoolNumber'\nimport { WithdrawOdds } from 'lib/components/WithdrawOdds'\nimport { TransactionsTakeTimeMessage } from 'lib/components/TransactionsTakeTimeMessage'\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction'\n\nexport function ConfirmWithdrawNoFee(props) {\n  const { t } = useTranslation()\n\n  const [transactions, setTransactions] = useAtom(transactionsAtom)\n\n  const router = useRouter()\n  const quantity = router.query.quantity\n\n  const { nextStep, previousStep } = props\n  \n  const { usersAddress, provider } = useContext(AuthControllerContext)\n  const { pool } = useContext(PoolDataContext)\n  const { usersTicketBalance } = useContext(PlayerDataContext)\n\n  const decimals = pool?.underlyingCollateralDecimals\n  const tickerUpcased = pool?.underlyingCollateralSymbol?.toUpperCase()\n  const poolAddress = pool?.poolAddress\n  const controlledTokenAddress = pool?.prizeStrategy?.singleRandomWinner?.ticket?.id\n\n  const [txExecuted, setTxExecuted] = useState(false)\n  const [txId, setTxId] = useState()\n\n  const txMainName = `${t('withdraw')}: ${quantity} ${t('tickets')}`\n  const txSubName = `${quantity} ${tickerUpcased}`\n  const txName = `${txMainName} (${txSubName})`\n  const method = 'withdrawInstantlyFrom'\n\n  const [sendTx] = useSendTransaction(txName, transactions, setTransactions)\n\n  \n  \n  const tx = transactions?.find((tx) => tx.id === txId)\n\n  \n  const runTx = async () => {\n    setTxExecuted(true)\n\n    // there should be no exit fee when we do an instant no-fee withdrawal\n    const maxExitFee = '0'\n\n    const params = [\n      usersAddress,\n      ethers.utils.parseUnits(\n        quantity,\n        Number(decimals)\n      ),\n      controlledTokenAddress,\n      ethers.utils.parseEther(maxExitFee),\n      // {\n      //   gasLimit: 700000\n      // }\n    ]\n\n    const id = sendTx(\n      t,\n      provider,\n      usersAddress,\n      PrizePoolAbi,\n      poolAddress,\n      method,\n      params\n    )\n    \n    setTxId(id)\n  }\n\n  // if (!txExecuted && quantity && decimals) {\n  //   runTx()\n  // }\n\n  useEffect(() => {\n    if (tx?.cancelled || tx?.error) {\n      previousStep()\n    } else if (tx?.completed) {\n      nextStep()\n    }\n  }, [tx])\n\n  return <>\n    {!tx?.sent && <>\n      <PaneTitle>\n        {t('confirmWithdrawalOfTickets')}\n      </PaneTitle>\n\n      <div\n        className='text-center mx-auto rounded-xl text-orange bg-orange-darkened border-2 border-orange py-2 xs:py-8 px-2 xs:px-8'\n        style={{\n          maxWidth: 600\n        }}\n      >\n        <h4\n          className='text-orange'\n        >\n          <span className='font-normal'>\n            {t('amountToBeWithdrawn')} \n          </span> -<Trans\n            i18nKey='amountTickets'\n            defaults='<number>{{amount}}</number> tickets'\n            components={{\n              number: <PoolNumber />,\n            }}\n            values={{\n              amount: quantity,\n            }}\n          />\n        </h4>\n\n        <WithdrawOdds\n          pool={pool}\n          usersBalance={usersTicketBalance}\n          quantity={quantity}\n        />\n      </div>\n\n      <ButtonDrawer>\n        <Button\n          onClick={runTx}\n          textSize='lg'\n          // disabled={poolIsLocked}\n          className={'mx-auto sm:mt-16'}\n        >\n          {t('confirmWithdrawal')}\n        </Button>\n      </ButtonDrawer>\n    </>}\n\n    {tx?.sent && !tx?.completed && <>\n      <TransactionsTakeTimeMessage\n        tx={tx}\n        title={t('withdrawing')}\n        subtitle={<Trans\n          i18nKey='amountTickets'\n          defaults='<number>{{amount}}</number> tickets'\n          components={{\n            number: <PoolNumber />,\n          }}\n          values={{\n            amount: quantity,\n          }}\n        />}\n      />\n    </>}\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport Cookies from 'js-cookie';\nimport { ethers } from 'ethers';\nimport { STORED_CHAIN_ID_KEY, COOKIE_OPTIONS, SELECTED_WALLET_COOKIE_KEY } from 'lib/constants';\nimport { MagicContext } from 'lib/components/contextProviders/MagicContextProvider';\n\nconst debug = require('debug')('WalletContextProvider');\n\nlet provider;\nexport const WalletContext = /*#__PURE__*/React.createContext();\nexport function WalletContextProvider(props) {\n  const {\n    children,\n    postConnectCallback\n  } = props;\n  const {\n    0: address,\n    1: setAddress\n  } = useState(null);\n  const {\n    0: network,\n    1: setNetwork\n  } = useState(null);\n  const {\n    0: balance,\n    1: setBalance\n  } = useState(null);\n  const {\n    0: wallet,\n    1: setWallet\n  } = useState({});\n  const {\n    0: onboard,\n    1: setOnboard\n  } = useState(null);\n  const {\n    magic\n  } = useContext(MagicContext);\n\n  const disconnectWallet = () => {\n    if (onboard) {\n      onboard.walletReset();\n    } else {\n      console.log('no onboard?');\n    }\n\n    Cookies.remove(STORED_CHAIN_ID_KEY, COOKIE_OPTIONS);\n    Cookies.remove(SELECTED_WALLET_COOKIE_KEY, COOKIE_OPTIONS);\n  };\n\n  const getOnboard = async () => {\n    if (onboard) {\n      return onboard;\n    }\n\n    const initOnboardModule = await import('lib/services/initOnboard');\n    return initOnboardModule.initOnboard({\n      address: setAddress,\n      network: setNetwork,\n      balance: setBalance,\n      wallet: wallet => {\n        if (wallet.provider) {\n          if (magic) {\n            magicContext.signOut();\n          }\n\n          setWallet(wallet);\n          Cookies.set(SELECTED_WALLET_COOKIE_KEY, wallet.name, COOKIE_OPTIONS);\n          provider = new ethers.providers.Web3Provider(wallet.provider); // postConnectCallback()\n        } else {\n          provider = null;\n          setWallet({});\n          Cookies.remove(SELECTED_WALLET_COOKIE_KEY, COOKIE_OPTIONS);\n        }\n      }\n    });\n  };\n\n  const handleLoadOnboard = async () => {\n    const ob = await getOnboard();\n    setOnboard(ob);\n  };\n\n  useEffect(() => {\n    const hasWalletCookie = Cookies.get(SELECTED_WALLET_COOKIE_KEY);\n\n    if (hasWalletCookie) {\n      // console.log('handleLoadOnboard from cookie')\n      handleLoadOnboard();\n    }\n  }, []);\n\n  const connectWallet = async postSignInCallback => {\n    let _onboard = onboard;\n\n    if (!_onboard) {\n      console.warn(`onboard wasn't ready when user clicked \"connect wallet\"! (this is slow)`);\n      await handleLoadOnboard();\n      _onboard = await getOnboard();\n    }\n\n    await _onboard.walletSelect();\n\n    if (_onboard.getState().wallet.type) {\n      await _onboard.walletCheck();\n\n      if (postSignInCallback) {\n        postSignInCallback();\n      }\n    }\n  };\n\n  const reconnectWallet = previouslySelectedWallet => {\n    onboard.walletReset();\n\n    if (previouslySelectedWallet && onboard) {\n      onboard.walletSelect(previouslySelectedWallet);\n    }\n  };\n\n  return __jsx(WalletContext.Provider, {\n    value: {\n      onboard,\n      onboardAddress: address,\n      onboardBalance: balance,\n      onboardNetwork: network,\n      onboardProvider: provider,\n      onboardWallet: wallet,\n      connectWallet,\n      disconnectWallet,\n      reconnectWallet,\n      handleLoadOnboard\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/contextProviders/WalletContextProvider.jsx"],"names":["React","useContext","useEffect","useState","Cookies","ethers","STORED_CHAIN_ID_KEY","COOKIE_OPTIONS","SELECTED_WALLET_COOKIE_KEY","MagicContext","debug","require","provider","WalletContext","createContext","WalletContextProvider","props","children","postConnectCallback","address","setAddress","network","setNetwork","balance","setBalance","wallet","setWallet","onboard","setOnboard","magic","disconnectWallet","walletReset","console","log","remove","getOnboard","initOnboardModule","initOnboard","magicContext","signOut","set","name","providers","Web3Provider","handleLoadOnboard","ob","hasWalletCookie","get","connectWallet","postSignInCallback","_onboard","warn","walletSelect","getState","type","walletCheck","reconnectWallet","previouslySelectedWallet","onboardAddress","onboardBalance","onboardNetwork","onboardProvider","onboardWallet"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport Cookies from 'js-cookie'\nimport { ethers } from 'ethers'\n\nimport {\n  STORED_CHAIN_ID_KEY,\n  COOKIE_OPTIONS,\n  SELECTED_WALLET_COOKIE_KEY\n} from 'lib/constants'\nimport { MagicContext } from 'lib/components/contextProviders/MagicContextProvider'\n\nconst debug = require('debug')('WalletContextProvider')\n\nlet provider\n\nexport const WalletContext = React.createContext()\n\nexport function WalletContextProvider(props) {\n  const {\n    children,\n    postConnectCallback,\n  } = props\n\n  const [address, setAddress] = useState(null)\n  const [network, setNetwork] = useState(null)\n  const [balance, setBalance] = useState(null)\n  const [wallet, setWallet] = useState({})\n  \n  const [onboard, setOnboard] = useState(null)\n\n  const { magic } = useContext(MagicContext)\n\n  const disconnectWallet = () => {\n    if (onboard) {\n      onboard.walletReset()\n    } else {\n      console.log('no onboard?')\n    }\n\n    Cookies.remove(\n      STORED_CHAIN_ID_KEY,\n      COOKIE_OPTIONS\n    )\n\n    Cookies.remove(\n      SELECTED_WALLET_COOKIE_KEY,\n      COOKIE_OPTIONS\n    )\n  }\n\n  const getOnboard = async () => {\n    if (onboard) {\n      return onboard\n    }\n\n    const initOnboardModule = await import('lib/services/initOnboard')\n\n    return initOnboardModule.initOnboard({\n      address: setAddress,\n      network: setNetwork,\n      balance: setBalance,\n      wallet: wallet => {\n        if (wallet.provider) {\n          if (magic) {\n            magicContext.signOut()\n          }\n\n          setWallet(wallet)\n\n          Cookies.set(\n            SELECTED_WALLET_COOKIE_KEY,\n            wallet.name,\n            COOKIE_OPTIONS\n          )\n\n          provider = new ethers.providers.Web3Provider(wallet.provider)\n\n          // postConnectCallback()\n        } else {\n          provider = null\n          setWallet({})\n          Cookies.remove(\n            SELECTED_WALLET_COOKIE_KEY,\n            COOKIE_OPTIONS\n          )\n        }\n      }\n    })\n  }\n\n  const handleLoadOnboard = async () => {\n    const ob = await getOnboard()\n    setOnboard(ob)\n  }\n\n  useEffect(() => {\n    const hasWalletCookie = Cookies.get(SELECTED_WALLET_COOKIE_KEY)\n\n    if (hasWalletCookie) {\n      // console.log('handleLoadOnboard from cookie')\n      handleLoadOnboard()\n    }\n  }, [])\n\n  const connectWallet = async (\n    postSignInCallback\n  ) => {\n    let _onboard = onboard\n\n    if (!_onboard) {\n      console.warn(`onboard wasn't ready when user clicked \"connect wallet\"! (this is slow)`)\n      \n      await handleLoadOnboard()\n      _onboard = await getOnboard()\n    }\n\n    await _onboard.walletSelect()\n\n    if (_onboard.getState().wallet.type) {\n      await _onboard.walletCheck()\n\n      if (postSignInCallback) {\n        postSignInCallback()\n      }\n    }\n  }\n  \n  const reconnectWallet = (previouslySelectedWallet) => {\n    onboard.walletReset()\n\n    if (previouslySelectedWallet && onboard) {\n      onboard.walletSelect(previouslySelectedWallet)\n    }\n  }\n\n  return <WalletContext.Provider\n    value={{\n      onboard,\n      onboardAddress: address,\n      onboardBalance: balance,\n      onboardNetwork: network,\n      onboardProvider: provider,\n      onboardWallet: wallet,\n      connectWallet,\n      disconnectWallet,\n      reconnectWallet,\n      handleLoadOnboard,\n    }}\n  >\n    {children}\n  </WalletContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}
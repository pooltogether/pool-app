{"ast":null,"code":"import { useQuery } from 'react-query';\nimport { isEmpty } from 'lodash';\nimport { MAINNET_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { getPoolsData } from 'lib/fetchers/getPoolsData';\nexport function usePoolsQuery(pauseQueries, chainId, contractAddresses, blockNumber = -1) {\n  const refetchInterval = !pauseQueries && blockNumber === -1 ? MAINNET_POLLING_INTERVAL : false;\n  return useQuery([QUERY_KEYS.poolsQuery, chainId, blockNumber], async () => {\n    return getPoolsData(chainId, contractAddresses, blockNumber);\n  }, {\n    enabled: !pauseQueries && chainId && blockNumber && !isEmpty(contractAddresses),\n    refetchInterval\n  });\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/usePoolsQuery.js"],"names":["useQuery","isEmpty","MAINNET_POLLING_INTERVAL","QUERY_KEYS","getPoolsData","usePoolsQuery","pauseQueries","chainId","contractAddresses","blockNumber","refetchInterval","poolsQuery","enabled"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,YAAT,QAA6B,2BAA7B;AAEA,OAAO,SAASC,aAAT,CAAuBC,YAAvB,EAAqCC,OAArC,EAA8CC,iBAA9C,EAAiEC,WAAW,GAAG,CAAC,CAAhF,EAAmF;AACxF,QAAMC,eAAe,GAAG,CAACJ,YAAD,IAAkBG,WAAW,KAAK,CAAC,CAAnC,GACtBP,wBADsB,GAEtB,KAFF;AAIA,SAAOF,QAAQ,CACb,CAACG,UAAU,CAACQ,UAAZ,EAAwBJ,OAAxB,EAAiCE,WAAjC,CADa,EAEb,YAAY;AAAE,WAAOL,YAAY,CAACG,OAAD,EAAUC,iBAAV,EAA6BC,WAA7B,CAAnB;AAA8D,GAF/D,EAGb;AACEG,IAAAA,OAAO,EAAE,CAACN,YAAD,IAAiBC,OAAjB,IAA4BE,WAA5B,IAA2C,CAACR,OAAO,CAACO,iBAAD,CAD9D;AAEEE,IAAAA;AAFF,GAHa,CAAf;AAQD","sourcesContent":["import { useQuery } from 'react-query'\nimport { isEmpty } from 'lodash'\n\nimport {\n  MAINNET_POLLING_INTERVAL,\n  QUERY_KEYS\n} from 'lib/constants'\nimport { getPoolsData } from 'lib/fetchers/getPoolsData'\n\nexport function usePoolsQuery(pauseQueries, chainId, contractAddresses, blockNumber = -1) {\n  const refetchInterval = !pauseQueries && (blockNumber === -1) ? \n    MAINNET_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    [QUERY_KEYS.poolsQuery, chainId, blockNumber],\n    async () => { return getPoolsData(chainId, contractAddresses, blockNumber) },\n    { \n      enabled: !pauseQueries && chainId && blockNumber && !isEmpty(contractAddresses),\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { usePlayerQuery } from 'lib/hooks/usePlayerQuery';\nimport { useSponsorQuery } from 'lib/hooks/useSponsorQuery';\nimport { getUsersSponsorshipBalance } from 'lib/services/getUsersSponsorshipBalance';\nimport { getUsersTicketBalance } from 'lib/services/getUsersTicketBalance';\nimport { testAddress } from 'lib/utils/testAddress';\nexport var PlayerDataContext = /*#__PURE__*/React.createContext();\n\nvar debug = require('debug')('pool-app:PoolDataContext');\n\nexport function PlayerDataContextProvider(props) {\n  _s();\n\n  var _useContext = useContext(AuthControllerContext),\n      chainId = _useContext.chainId,\n      pauseQueries = _useContext.pauseQueries,\n      usersAddress = _useContext.usersAddress;\n\n  var _useContext2 = useContext(PoolDataContext),\n      pool = _useContext2.pool;\n\n  var addressError = testAddress(usersAddress);\n  var blockNumber = -1;\n\n  var _usePlayerQuery = usePlayerQuery(pauseQueries, chainId, usersAddress, blockNumber, addressError),\n      refetchPlayerData = _usePlayerQuery.refetch,\n      playerData = _usePlayerQuery.data,\n      error = _usePlayerQuery.error,\n      isFetching = _usePlayerQuery.isFetching;\n\n  if (error) {\n    console.error(error);\n  }\n\n  var _useSponsorQuery = useSponsorQuery(pauseQueries, chainId, usersAddress, blockNumber, addressError),\n      refetchSponsorData = _useSponsorQuery.refetch,\n      sponsorData = _useSponsorQuery.data,\n      sponsorError = _useSponsorQuery.error,\n      sponsorIsFetching = _useSponsorQuery.isFetching;\n\n  if (sponsorError) {\n    console.error(sponsorError);\n  }\n\n  var _getUsersTicketBalanc = getUsersTicketBalance(pool, playerData),\n      usersTicketBalance = _getUsersTicketBalanc.usersTicketBalance,\n      usersTicketBalanceBN = _getUsersTicketBalanc.usersTicketBalanceBN;\n\n  var _getUsersSponsorshipB = getUsersSponsorshipBalance(pool, sponsorData),\n      usersSponsorshipBalance = _getUsersSponsorshipB.usersSponsorshipBalance,\n      usersSponsorshipBalanceBN = _getUsersSponsorshipB.usersSponsorshipBalanceBN;\n\n  return __jsx(React.Fragment, null, __jsx(PlayerDataContext.Provider, {\n    value: {\n      refetchPlayerData: refetchPlayerData,\n      refetchSponsorData: refetchSponsorData,\n      usersSponsorshipBalance: usersSponsorshipBalance,\n      usersSponsorshipBalanceBN: usersSponsorshipBalanceBN,\n      usersTicketBalance: usersTicketBalance,\n      usersTicketBalanceBN: usersTicketBalanceBN\n    }\n  }, props.children));\n}\n\n_s(PlayerDataContextProvider, \"4twBxfcpwft7SCcmGf56NssE70A=\", false, function () {\n  return [usePlayerQuery, useSponsorQuery];\n});\n\n_c = PlayerDataContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerDataContextProvider\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/contextProviders/PlayerDataContextProvider.jsx"],"names":["React","useContext","AuthControllerContext","PoolDataContext","usePlayerQuery","useSponsorQuery","getUsersSponsorshipBalance","getUsersTicketBalance","testAddress","PlayerDataContext","createContext","debug","require","PlayerDataContextProvider","props","chainId","pauseQueries","usersAddress","pool","addressError","blockNumber","refetchPlayerData","refetch","playerData","data","error","isFetching","console","refetchSponsorData","sponsorData","sponsorError","sponsorIsFetching","usersTicketBalance","usersTicketBalanceBN","usersSponsorshipBalance","usersSponsorshipBalanceBN","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,eAAT,QAAgC,yDAAhC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,0BAAT,QAA2C,yCAA3C;AACA,SAASC,qBAAT,QAAsC,oCAAtC;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAEA,OAAO,IAAMC,iBAAiB,gBAAGT,KAAK,CAACU,aAAN,EAA1B;;AACP,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,0BAAjB,CAAd;;AAEA,OAAO,SAASC,yBAAT,CAAmCC,KAAnC,EAA0C;AAAA;;AAAA,oBACCb,UAAU,CAACC,qBAAD,CADX;AAAA,MACvCa,OADuC,eACvCA,OADuC;AAAA,MAC9BC,YAD8B,eAC9BA,YAD8B;AAAA,MAChBC,YADgB,eAChBA,YADgB;;AAAA,qBAE9BhB,UAAU,CAACE,eAAD,CAFoB;AAAA,MAEvCe,IAFuC,gBAEvCA,IAFuC;;AAI/C,MAAMC,YAAY,GAAGX,WAAW,CAACS,YAAD,CAAhC;AAEA,MAAMG,WAAW,GAAG,CAAC,CAArB;;AAN+C,wBAY3ChB,cAAc,CAACY,YAAD,EAAeD,OAAf,EAAwBE,YAAxB,EAAsCG,WAAtC,EAAmDD,YAAnD,CAZ6B;AAAA,MAQpCE,iBARoC,mBAQ7CC,OAR6C;AAAA,MASvCC,UATuC,mBAS7CC,IAT6C;AAAA,MAU7CC,KAV6C,mBAU7CA,KAV6C;AAAA,MAW7CC,UAX6C,mBAW7CA,UAX6C;;AAc/C,MAAID,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;;AAhB8C,yBAyB3CpB,eAAe,CAACW,YAAD,EAAeD,OAAf,EAAwBE,YAAxB,EAAsCG,WAAtC,EAAmDD,YAAnD,CAzB4B;AAAA,MAqBpCS,kBArBoC,oBAqB7CN,OArB6C;AAAA,MAsBvCO,WAtBuC,oBAsB7CL,IAtB6C;AAAA,MAuBtCM,YAvBsC,oBAuB7CL,KAvB6C;AAAA,MAwBjCM,iBAxBiC,oBAwB7CL,UAxB6C;;AA2B/C,MAAII,YAAJ,EAAkB;AAChBH,IAAAA,OAAO,CAACF,KAAR,CAAcK,YAAd;AACD;;AA7B8C,8BAoC3CvB,qBAAqB,CAACW,IAAD,EAAOK,UAAP,CApCsB;AAAA,MAkC7CS,kBAlC6C,yBAkC7CA,kBAlC6C;AAAA,MAmC7CC,oBAnC6C,yBAmC7CA,oBAnC6C;;AAAA,8BAyC3C3B,0BAA0B,CAACY,IAAD,EAAOW,WAAP,CAzCiB;AAAA,MAuC7CK,uBAvC6C,yBAuC7CA,uBAvC6C;AAAA,MAwC7CC,yBAxC6C,yBAwC7CA,yBAxC6C;;AA2C/C,SAAO,4BACL,MAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLd,MAAAA,iBAAiB,EAAjBA,iBADK;AAELO,MAAAA,kBAAkB,EAAlBA,kBAFK;AAGLM,MAAAA,uBAAuB,EAAvBA,uBAHK;AAILC,MAAAA,yBAAyB,EAAzBA,yBAJK;AAKLH,MAAAA,kBAAkB,EAAlBA,kBALK;AAMLC,MAAAA,oBAAoB,EAApBA;AANK;AADT,KAUGnB,KAAK,CAACsB,QAVT,CADK,CAAP;AAcD;;GAzDevB,yB;UAYVT,c,EAaAC,e;;;KAzBUQ,yB","sourcesContent":["import React, { useContext } from 'react'\n\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { usePlayerQuery } from 'lib/hooks/usePlayerQuery'\nimport { useSponsorQuery } from 'lib/hooks/useSponsorQuery'\nimport { getUsersSponsorshipBalance } from 'lib/services/getUsersSponsorshipBalance'\nimport { getUsersTicketBalance } from 'lib/services/getUsersTicketBalance'\nimport { testAddress } from 'lib/utils/testAddress'\n\nexport const PlayerDataContext = React.createContext()\nconst debug = require('debug')('pool-app:PoolDataContext')\n\nexport function PlayerDataContextProvider(props) {\n  const { chainId, pauseQueries, usersAddress } = useContext(AuthControllerContext)\n  const { pool } = useContext(PoolDataContext)\n\n  const addressError = testAddress(usersAddress)\n\n  const blockNumber = -1\n  const {\n    refetch: refetchPlayerData,\n    data: playerData,\n    error,\n    isFetching\n  } = usePlayerQuery(pauseQueries, chainId, usersAddress, blockNumber, addressError)\n\n  if (error) {\n    console.error(error)\n  }\n\n\n\n  const {\n    refetch: refetchSponsorData,\n    data: sponsorData,\n    error: sponsorError,\n    isFetching: sponsorIsFetching\n  } = useSponsorQuery(pauseQueries, chainId, usersAddress, blockNumber, addressError)\n\n  if (sponsorError) {\n    console.error(sponsorError)\n  }\n\n\n\n  const {\n    usersTicketBalance,\n    usersTicketBalanceBN\n  } = getUsersTicketBalance(pool, playerData)\n\n  const {\n    usersSponsorshipBalance,\n    usersSponsorshipBalanceBN\n  } = getUsersSponsorshipBalance(pool, sponsorData)\n\n  return <>\n    <PlayerDataContext.Provider\n      value={{\n        refetchPlayerData,\n        refetchSponsorData,\n        usersSponsorshipBalance,\n        usersSponsorshipBalanceBN,\n        usersTicketBalance,\n        usersTicketBalanceBN,\n      }}\n    >\n      {props.children}\n    </PlayerDataContext.Provider>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport FeatherIcon from 'feather-icons-react';\nimport { Menu, MenuList, MenuButton, MenuItem } from '@reach/menu-button';\nexport function DropdownList(props) {\n  _s();\n\n  var id = props.id,\n      className = props.className,\n      current = props.current,\n      formatValue = props.formatValue,\n      hoverTextColor = props.hoverTextColor,\n      label = props.label,\n      textColor = props.textColor,\n      values = props.values,\n      onValueSet = props.onValueSet;\n\n  var _useState = useState(current ? current : ''),\n      currentValue = _useState[0],\n      setCurrentValue = _useState[1];\n\n  var handleChangeValueClick = function handleChangeValueClick(newValue) {\n    if (current !== null) {\n      setCurrentValue(newValue);\n    }\n\n    onValueSet(newValue);\n  };\n\n  var valuesArray = [];\n\n  if (typeof values === 'object') {\n    valuesArray = Object.keys(values).map(function (v) {\n      return v;\n    });\n  }\n\n  var menuItems = valuesArray.map(function (valueItem) {\n    var value = valueItem;\n    var selected = value === currentValue;\n    return __jsx(MenuItem, {\n      key: \"\".concat(id, \"-value-picker-item-\").concat(value),\n      onSelect: function onSelect() {\n        handleChangeValueClick(value);\n      },\n      className: classnames({\n        selected: selected\n      })\n    }, formatValue ? formatValue(value) : value);\n  });\n  var inactiveTextColorClasses = \"\".concat(textColor, \" hover:\").concat(hoverTextColor);\n  var activeTextColorClasses = \"\".concat(hoverTextColor, \" hover:\").concat(hoverTextColor);\n  return __jsx(React.Fragment, null, __jsx(Menu, null, function (_ref) {\n    var _classnames;\n\n    var isExpanded = _ref.isExpanded;\n    return __jsx(React.Fragment, null, __jsx(MenuButton, {\n      className: classnames(className, 'inline-flex items-center justify-center trans font-bold', (_classnames = {}, _defineProperty(_classnames, inactiveTextColorClasses, !isExpanded), _defineProperty(_classnames, activeTextColorClasses, isExpanded), _classnames))\n    }, label ? label : currentValue, \" \", __jsx(FeatherIcon, {\n      icon: isExpanded ? 'chevron-up' : 'chevron-down',\n      className: \"relative w-4 h-4 inline-block ml-2\",\n      strokeWidth: \"0.15rem\"\n    })), __jsx(MenuList, {\n      className: \"slide-down\"\n    }, menuItems));\n  }));\n}\n\n_s(DropdownList, \"rzqx8K8S+CYDovjTMLPtYGcGHA4=\");\n\n_c = DropdownList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropdownList\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/DropdownList.jsx"],"names":["React","useState","classnames","FeatherIcon","Menu","MenuList","MenuButton","MenuItem","DropdownList","props","id","className","current","formatValue","hoverTextColor","label","textColor","values","onValueSet","currentValue","setCurrentValue","handleChangeValueClick","newValue","valuesArray","Object","keys","map","v","menuItems","valueItem","value","selected","inactiveTextColorClasses","activeTextColorClasses","isExpanded"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport classnames from 'classnames'\nimport FeatherIcon from 'feather-icons-react'\nimport {\n  Menu,\n  MenuList,\n  MenuButton,\n  MenuItem,\n} from '@reach/menu-button'\n\nexport function DropdownList(props) {\n  const {\n    id,\n    className,\n    current,\n    formatValue,\n    hoverTextColor,\n    label,\n    textColor,\n    values,\n    onValueSet\n  } = props\n\n  const [currentValue, setCurrentValue] = useState(current ? current : '')\n\n  const handleChangeValueClick = (newValue) => {\n    if (current !== null) {\n      setCurrentValue(newValue)\n    }\n    onValueSet(newValue)\n  }\n\n  let valuesArray = []\n  if (typeof values === 'object') {\n    valuesArray = Object.keys(values).map(v => v)\n  }\n\n  const menuItems = valuesArray.map(valueItem => {\n    let value = valueItem\n\n    const selected = value === currentValue\n\n    return <MenuItem\n      key={`${id}-value-picker-item-${value}`}\n      onSelect={() => { handleChangeValueClick(value) }}\n      className={classnames(\n        {\n          selected\n        }\n      )}\n    >\n      {formatValue ? formatValue(value) : value}\n    </MenuItem>\n  })\n\n  const inactiveTextColorClasses = `${textColor} hover:${hoverTextColor}`\n  const activeTextColorClasses = `${hoverTextColor} hover:${hoverTextColor}`\n\n  return <>\n    <Menu>\n      {({ isExpanded }) => (\n        <>\n          <MenuButton\n            className={classnames(\n              className,\n              'inline-flex items-center justify-center trans font-bold',\n              {\n                [inactiveTextColorClasses]: !isExpanded,\n                [activeTextColorClasses]: isExpanded,\n              }\n            )}\n          >\n            {label ? label : currentValue} <FeatherIcon\n              icon={isExpanded ? 'chevron-up' : 'chevron-down'}\n              className='relative w-4 h-4 inline-block ml-2'\n              strokeWidth='0.15rem'\n            />\n          </MenuButton>\n\n          <MenuList className='slide-down'>\n            {menuItems}\n          </MenuList>\n        </>\n      )}\n    </Menu>\n\n  </>\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useQueryCache } from 'react-query';\nimport { isEmpty } from 'lodash';\nimport { QUERY_KEYS } from 'lib/constants';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { ChainQueries } from 'lib/components/ChainQueries';\nimport { FetchUsersChainData } from 'lib/components/FetchUsersChainData';\nimport { GraphPoolDripQueries } from 'lib/components/queryComponents/GraphPoolDripQueries';\nimport { UniswapData } from 'lib/components/UniswapData';\nimport { usePoolsQuery } from 'lib/hooks/usePoolsQuery';\nimport { compilePools } from 'lib/services/compilePools';\nimport { getCurrentPool } from 'lib/services/getCurrentPool';\nimport { getContractAddresses } from 'lib/services/getContractAddresses';\nimport { getPoolDataFromQueryResult } from 'lib/services/getPoolDataFromQueryResult';\nimport { readProvider } from 'lib/services/readProvider';\nimport { poolToast } from 'lib/utils/poolToast';\nexport const PoolDataContext = /*#__PURE__*/React.createContext();\n\nconst debug = require('debug')('pool-app:PoolDataContext');\n\nexport function PoolDataContextProvider(props) {\n  var _router$query, _router$query$symbol;\n\n  const queryCache = useQueryCache();\n  const {\n    supportedNetwork,\n    networkName,\n    chainId,\n    pauseQueries,\n    usersAddress\n  } = useContext(AuthControllerContext);\n  const {\n    0: defaultReadProvider,\n    1: setDefaultReadProvider\n  } = useState({});\n  const router = useRouter();\n  const querySymbol = router === null || router === void 0 ? void 0 : (_router$query = router.query) === null || _router$query === void 0 ? void 0 : (_router$query$symbol = _router$query.symbol) === null || _router$query$symbol === void 0 ? void 0 : _router$query$symbol.toLowerCase();\n  useEffect(() => {\n    const getReadProvider = async () => {\n      const defaultReadProvider = await readProvider(networkName);\n      setDefaultReadProvider(defaultReadProvider);\n    };\n\n    getReadProvider();\n  }, [networkName]);\n  let contractAddresses;\n\n  try {\n    if (supportedNetwork) {\n      contractAddresses = getContractAddresses(chainId);\n    }\n  } catch (e) {\n    poolToast.error(e);\n    console.error(e);\n  }\n\n  const blockNumber = -1;\n  const {\n    refetch: refetchPoolsData,\n    data: poolsGraphData,\n    error: poolsError,\n    isFetching: poolsIsFetching\n  } = usePoolsQuery(pauseQueries, chainId, contractAddresses, blockNumber);\n\n  if (poolsError) {\n    poolToast.error(poolsError);\n    console.error(poolsError);\n  }\n\n  const poolData = getPoolDataFromQueryResult(contractAddresses, poolsGraphData);\n  const poolsDataLoading = !poolsGraphData;\n\n  if (!poolsIsFetching && !isEmpty(poolsGraphData)) {\n    // this should obviously be moved out of the global window namespace :)\n    window.hideGraphError();\n  }\n\n  return __jsx(React.Fragment, null, __jsx(ChainQueries, _extends({}, props, {\n    chainId: chainId,\n    provider: defaultReadProvider,\n    poolData: poolData\n  }), ({\n    genericChainData\n  }) => {\n    var _poolData$daiPool, _ethereumErc20Awards$, _poolData$daiPool2;\n\n    const pools = compilePools(chainId, contractAddresses, queryCache, poolData, genericChainData);\n    const currentPool = getCurrentPool(querySymbol, pools);\n    const ethereumErc20Awards = queryCache.getQueryData([QUERY_KEYS.ethereumErc20sQuery, chainId, poolData === null || poolData === void 0 ? void 0 : (_poolData$daiPool = poolData.daiPool) === null || _poolData$daiPool === void 0 ? void 0 : _poolData$daiPool.poolAddress, -1]);\n    const addresses = ethereumErc20Awards === null || ethereumErc20Awards === void 0 ? void 0 : (_ethereumErc20Awards$ = ethereumErc20Awards.filter(award => award.balance.gt(0))) === null || _ethereumErc20Awards$ === void 0 ? void 0 : _ethereumErc20Awards$.map(award => award.address);\n    return __jsx(UniswapData, {\n      addresses: addresses,\n      poolAddress: poolData === null || poolData === void 0 ? void 0 : (_poolData$daiPool2 = poolData.daiPool) === null || _poolData$daiPool2 === void 0 ? void 0 : _poolData$daiPool2.poolAddress\n    }, () => {\n      return __jsx(GraphPoolDripQueries, {\n        pools: pools\n      }, ({\n        dripDataLoading,\n        graphDripData\n      }) => {\n        return __jsx(FetchUsersChainData, _extends({}, props, {\n          provider: defaultReadProvider,\n          pool: currentPool,\n          usersAddress: usersAddress,\n          graphDripData: graphDripData,\n          contractAddresses: contractAddresses\n        }), ({\n          usersChainData\n        }) => {\n          return __jsx(PoolDataContext.Provider, {\n            value: {\n              loading: poolsDataLoading,\n              pool: currentPool,\n              pools,\n              contractAddresses,\n              defaultReadProvider,\n              genericChainData,\n              refetchPoolsData,\n              graphDripData,\n              usersChainData\n            }\n          }, props.children);\n        });\n      });\n    });\n  }));\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/contextProviders/PoolDataContextProvider.jsx"],"names":["React","useContext","useEffect","useState","useRouter","useQueryCache","isEmpty","QUERY_KEYS","AuthControllerContext","ChainQueries","FetchUsersChainData","GraphPoolDripQueries","UniswapData","usePoolsQuery","compilePools","getCurrentPool","getContractAddresses","getPoolDataFromQueryResult","readProvider","poolToast","PoolDataContext","createContext","debug","require","PoolDataContextProvider","props","queryCache","supportedNetwork","networkName","chainId","pauseQueries","usersAddress","defaultReadProvider","setDefaultReadProvider","router","querySymbol","query","symbol","toLowerCase","getReadProvider","contractAddresses","e","error","console","blockNumber","refetch","refetchPoolsData","data","poolsGraphData","poolsError","isFetching","poolsIsFetching","poolData","poolsDataLoading","window","hideGraphError","genericChainData","pools","currentPool","ethereumErc20Awards","getQueryData","ethereumErc20sQuery","daiPool","poolAddress","addresses","filter","award","balance","gt","map","address","dripDataLoading","graphDripData","usersChainData","loading","pool","children"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { useQueryCache } from 'react-query'\nimport { isEmpty } from 'lodash'\n\nimport { QUERY_KEYS } from 'lib/constants'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { ChainQueries } from 'lib/components/ChainQueries'\nimport { FetchUsersChainData } from 'lib/components/FetchUsersChainData'\nimport { GraphPoolDripQueries } from 'lib/components/queryComponents/GraphPoolDripQueries'\nimport { UniswapData } from 'lib/components/UniswapData'\nimport { usePoolsQuery } from 'lib/hooks/usePoolsQuery'\nimport { compilePools } from 'lib/services/compilePools'\nimport { getCurrentPool } from 'lib/services/getCurrentPool'\nimport { getContractAddresses } from 'lib/services/getContractAddresses'\nimport { getPoolDataFromQueryResult } from 'lib/services/getPoolDataFromQueryResult'\nimport { readProvider } from 'lib/services/readProvider'\nimport { poolToast } from 'lib/utils/poolToast'\n\nexport const PoolDataContext = React.createContext()\nconst debug = require('debug')('pool-app:PoolDataContext')\n\nexport function PoolDataContextProvider(props) {\n  const queryCache = useQueryCache()\n\n  const {\n    supportedNetwork,\n    networkName,\n    chainId,\n    pauseQueries,\n    usersAddress\n  } = useContext(AuthControllerContext)\n\n  const [defaultReadProvider, setDefaultReadProvider] = useState({})\n\n  const router = useRouter()\n  const querySymbol = router?.query?.symbol?.toLowerCase()\n\n  useEffect(() => {\n    const getReadProvider = async () => {\n      const defaultReadProvider = await readProvider(networkName)\n      setDefaultReadProvider(defaultReadProvider)\n    }\n    getReadProvider()\n  }, [networkName])\n\n\n\n\n  let contractAddresses\n  try {\n    if (supportedNetwork) {\n      contractAddresses = getContractAddresses(chainId)\n    }\n  } catch (e) {\n    poolToast.error(e)\n    console.error(e)\n  }\n\n\n  const blockNumber = -1\n  const {\n    refetch: refetchPoolsData,\n    data: poolsGraphData,\n    error: poolsError,\n    isFetching: poolsIsFetching,\n  } = usePoolsQuery(pauseQueries, chainId, contractAddresses, blockNumber)\n\n  if (poolsError) {\n    poolToast.error(poolsError)\n    console.error(poolsError)\n  }\n\n  const poolData = getPoolDataFromQueryResult(contractAddresses, poolsGraphData)\n\n  const poolsDataLoading = !poolsGraphData\n\n  if (!poolsIsFetching && !isEmpty(poolsGraphData)) {\n    // this should obviously be moved out of the global window namespace :)\n    window.hideGraphError()\n  }\n\n  return <>\n    <ChainQueries\n      {...props}\n      chainId={chainId}\n      provider={defaultReadProvider}\n      poolData={poolData}\n    >\n      {({ genericChainData }) => {\n        const pools = compilePools(chainId, contractAddresses, queryCache, poolData, genericChainData)\n\n        const currentPool = getCurrentPool(querySymbol, pools)\n        \n        const ethereumErc20Awards = queryCache.getQueryData([\n          QUERY_KEYS.ethereumErc20sQuery,\n          chainId,\n          poolData?.daiPool?.poolAddress,\n          -1\n        ])\n        const addresses = ethereumErc20Awards\n          ?.filter(award => award.balance.gt(0))\n          ?.map(award => award.address)\n\n        return <UniswapData\n          addresses={addresses}\n          poolAddress={poolData?.daiPool?.poolAddress}\n        >\n          {() => {\n            return <GraphPoolDripQueries\n              pools={pools}\n            >\n              {({ dripDataLoading, graphDripData }) => {\n                return <FetchUsersChainData\n                  {...props}\n                  provider={defaultReadProvider}\n                  pool={currentPool}\n                  usersAddress={usersAddress}\n                  graphDripData={graphDripData}\n                  contractAddresses={contractAddresses}\n                >\n                  {({ usersChainData }) => {\n                    return <PoolDataContext.Provider\n                      value={{\n                        loading: poolsDataLoading,\n                        pool: currentPool,\n                        pools,\n                        contractAddresses,\n                        defaultReadProvider,\n                        genericChainData,\n                        refetchPoolsData,\n                        graphDripData,\n                        usersChainData,\n                      }}\n                    >\n                      {props.children}\n                    </PoolDataContext.Provider>\n                  }}\n                </FetchUsersChainData>\n              }}\n            </GraphPoolDripQueries>\n          }}\n        </UniswapData>\n      }}\n    </ChainQueries>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport { STRINGS } from 'lib/constants';\nimport { useTranslation } from 'lib/../i18n';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { AccountTicket } from 'lib/components/AccountTicket';\nimport { DropdownInputGroup } from 'lib/components/DropdownInputGroup';\nimport { WithdrawTicketsForm } from 'lib/components/WithdrawTicketsForm';\nimport { usePlayerQuery } from 'lib/hooks/usePlayerQuery';\nimport { testAddress } from 'lib/utils/testAddress';\nexport function ManageTicketsForm(props) {\n  var _playerData;\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    chainId,\n    pauseQueries,\n    usersAddress\n  } = useContext(AuthControllerContext);\n  const {\n    pool\n  } = useContext(PoolDataContext);\n  const playerAddressError = testAddress(usersAddress);\n  const blockNumber = -1;\n  let {\n    status,\n    data: playerData,\n    error,\n    isFetching\n  } = usePlayerQuery(pauseQueries, chainId, usersAddress, blockNumber, playerAddressError);\n\n  if (error) {\n    console.error(error);\n  }\n\n  playerData = (_playerData = playerData) === null || _playerData === void 0 ? void 0 : _playerData.find(playerData => {\n    var _playerData$prizePool;\n\n    return (playerData === null || playerData === void 0 ? void 0 : (_playerData$prizePool = playerData.prizePool) === null || _playerData$prizePool === void 0 ? void 0 : _playerData$prizePool.id) === (pool === null || pool === void 0 ? void 0 : pool.id);\n  });\n  const {\n    0: action,\n    1: setAction\n  } = useState(STRINGS.withdraw);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"pane-title\"\n  }, __jsx(\"div\", {\n    className: `leading-tight font-bold text-lg xs:text-3xl lg:text-4xl text-inverse mb-4 xs:mb-8`\n  }, t('manageYourTickets'))), __jsx(\"div\", {\n    className: \"mx-auto mt-4 xs:mb-8\"\n  }, __jsx(AccountTicket, {\n    noMargin: true,\n    key: `account-pool-row-${pool === null || pool === void 0 ? void 0 : pool.poolAddress}`,\n    pool: pool,\n    player: playerData\n  })), __jsx(DropdownInputGroup, {\n    id: \"manage-tickets-action-dropdown\",\n    label: t('whatWouldYouLikeToDoQuestion'),\n    current: action,\n    setCurrent: setAction,\n    options: {\n      [STRINGS.withdraw]: t('withdraw') // [STRINGS.transfer]: t('transfer')\n\n    }\n  }), action === STRINGS.withdraw && __jsx(React.Fragment, null, __jsx(WithdrawTicketsForm, props)));\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/ManageTicketsForm.jsx"],"names":["React","useContext","useState","STRINGS","useTranslation","AuthControllerContext","PoolDataContext","AccountTicket","DropdownInputGroup","WithdrawTicketsForm","usePlayerQuery","testAddress","ManageTicketsForm","props","t","chainId","pauseQueries","usersAddress","pool","playerAddressError","blockNumber","status","data","playerData","error","isFetching","console","find","prizePool","id","action","setAction","withdraw","poolAddress"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,eAAT,QAAgC,yDAAhC;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,kBAAT,QAAmC,mCAAnC;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAEA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAAA;;AACvC,QAAM;AAAEC,IAAAA;AAAF,MAAQV,cAAc,EAA5B;AAEA,QAAM;AAAEW,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,MAA0ChB,UAAU,CAACI,qBAAD,CAA1D;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAWjB,UAAU,CAACK,eAAD,CAA3B;AAEA,QAAMa,kBAAkB,GAAGR,WAAW,CAACM,YAAD,CAAtC;AAEA,QAAMG,WAAW,GAAG,CAAC,CAArB;AACA,MAAI;AACFC,IAAAA,MADE;AAEFC,IAAAA,IAAI,EAAEC,UAFJ;AAGFC,IAAAA,KAHE;AAIFC,IAAAA;AAJE,MAKAf,cAAc,CAACM,YAAD,EAAeD,OAAf,EAAwBE,YAAxB,EAAsCG,WAAtC,EAAmDD,kBAAnD,CALlB;;AAOA,MAAIK,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;;AAGDD,EAAAA,UAAU,kBAAGA,UAAH,gDAAG,YAAYI,IAAZ,CAAiBJ,UAAU;AAAA;;AAAA,WAAI,CAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,qCAAAA,UAAU,CAAEK,SAAZ,gFAAuBC,EAAvB,OAA8BX,IAA9B,aAA8BA,IAA9B,uBAA8BA,IAAI,CAAEW,EAApC,CAAJ;AAAA,GAA3B,CAAb;AAEA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsB7B,QAAQ,CAACC,OAAO,CAAC6B,QAAT,CAApC;AAEA,SAAO,4BACL;AACE,IAAA,SAAS,EAAC;AADZ,KAGE;AACE,IAAA,SAAS,EAAG;AADd,KAGGlB,CAAC,CAAC,mBAAD,CAHJ,CAHF,CADK,EAWL;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,aAAD;AACE,IAAA,QAAQ,MADV;AAEE,IAAA,GAAG,EAAG,oBAAmBI,IAApB,aAAoBA,IAApB,uBAAoBA,IAAI,CAAEe,WAAY,EAF7C;AAGE,IAAA,IAAI,EAAEf,IAHR;AAIE,IAAA,MAAM,EAAEK;AAJV,IADF,CAXK,EAoBL,MAAC,kBAAD;AACE,IAAA,EAAE,EAAC,gCADL;AAEE,IAAA,KAAK,EAAET,CAAC,CAAC,8BAAD,CAFV;AAGE,IAAA,OAAO,EAAEgB,MAHX;AAIE,IAAA,UAAU,EAAEC,SAJd;AAKE,IAAA,OAAO,EAAE;AACP,OAAC5B,OAAO,CAAC6B,QAAT,GAAoBlB,CAAC,CAAC,UAAD,CADd,CAEP;;AAFO;AALX,IApBK,EAmCJgB,MAAM,KAAK3B,OAAO,CAAC6B,QAAnB,IAA+B,4BAC9B,MAAC,mBAAD,EACMnB,KADN,CAD8B,CAnC3B,CAAP;AA0CD","sourcesContent":["import React, { useContext, useState } from 'react'\n\nimport { STRINGS } from 'lib/constants'\nimport { useTranslation } from 'lib/../i18n'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { AccountTicket } from 'lib/components/AccountTicket'\nimport { DropdownInputGroup } from 'lib/components/DropdownInputGroup'\nimport { WithdrawTicketsForm } from 'lib/components/WithdrawTicketsForm'\nimport { usePlayerQuery } from 'lib/hooks/usePlayerQuery'\nimport { testAddress } from 'lib/utils/testAddress'\n\nexport function ManageTicketsForm(props) {\n  const { t } = useTranslation()\n\n  const { chainId, pauseQueries, usersAddress } = useContext(AuthControllerContext)\n  const { pool } = useContext(PoolDataContext)\n\n  const playerAddressError = testAddress(usersAddress)\n\n  const blockNumber = -1\n  let {\n    status,\n    data: playerData,\n    error,\n    isFetching\n  } = usePlayerQuery(pauseQueries, chainId, usersAddress, blockNumber, playerAddressError)\n\n  if (error) {\n    console.error(error)\n  }\n\n\n  playerData = playerData?.find(playerData => playerData?.prizePool?.id === pool?.id)\n\n  const [action, setAction] = useState(STRINGS.withdraw)\n\n  return <>\n    <div\n      className='pane-title'\n    >\n      <div\n        className={`leading-tight font-bold text-lg xs:text-3xl lg:text-4xl text-inverse mb-4 xs:mb-8`}\n      >\n        {t('manageYourTickets')}\n      </div>\n    </div>\n\n    <div className='mx-auto mt-4 xs:mb-8'>\n      <AccountTicket\n        noMargin\n        key={`account-pool-row-${pool?.poolAddress}`}\n        pool={pool}\n        player={playerData}\n      />\n    </div>\n\n    <DropdownInputGroup\n      id='manage-tickets-action-dropdown'\n      label={t('whatWouldYouLikeToDoQuestion')}\n      current={action}\n      setCurrent={setAction}\n      options={{\n        [STRINGS.withdraw]: t('withdraw'),\n        // [STRINGS.transfer]: t('transfer')\n      }}\n    />\n\n    {/* {action === STRINGS.transfer && <>\n      <h6 className='mt-2 text-inverse'>Transfer feature coming soon ...</h6>\n    </>} */}\n\n    {action === STRINGS.withdraw && <>\n      <WithdrawTicketsForm\n        {...props}\n      />\n    </>}\n\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
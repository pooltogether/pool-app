{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useRouter } from 'next/router';\nimport { useTranslation } from 'lib/../i18n';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PlayerDataContext } from 'lib/components/contextProviders/PlayerDataContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { ButtonDrawer } from 'lib/components/ButtonDrawer';\nimport { Button } from 'lib/components/Button';\nimport { ErrorsBox } from 'lib/components/ErrorsBox';\nimport { WithdrawOdds } from 'lib/components/WithdrawOdds';\nimport { TextInputGroup } from 'lib/components/TextInputGroup';\nimport { usePlayerQuery } from 'lib/hooks/usePlayerQuery';\nimport { queryParamUpdater } from 'lib/utils/queryParamUpdater';\nimport { numberWithCommas } from 'lib/utils/numberWithCommas';\nimport { testAddress } from 'lib/utils/testAddress';\nimport TicketIcon from 'assets/images/icon-ticket-green@2x.png';\nexport function WithdrawTicketsForm(props) {\n  _s();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var nextStep = props.nextStep;\n  var router = useRouter();\n\n  var _useContext = useContext(AuthControllerContext),\n      chainId = _useContext.chainId,\n      pauseQueries = _useContext.pauseQueries,\n      usersAddress = _useContext.usersAddress;\n\n  var _useContext2 = useContext(PoolDataContext),\n      pool = _useContext2.pool;\n\n  var _useContext3 = useContext(PlayerDataContext),\n      usersTicketBalance = _useContext3.usersTicketBalance,\n      usersTicketBalanceBN = _useContext3.usersTicketBalanceBN;\n\n  var playerAddressError = testAddress(usersAddress);\n  var blockNumber = -1;\n\n  var _usePlayerQuery = usePlayerQuery(pauseQueries, chainId, usersAddress, blockNumber, playerAddressError),\n      status = _usePlayerQuery.status,\n      playerData = _usePlayerQuery.data,\n      error = _usePlayerQuery.error,\n      isFetching = _usePlayerQuery.isFetching;\n\n  if (error) {\n    console.error(error);\n  }\n\n  var ticker = pool === null || pool === void 0 ? void 0 : pool.underlyingCollateralSymbol;\n  var tickerUpcased = ticker === null || ticker === void 0 ? void 0 : ticker.toUpperCase();\n\n  var _useForm = useForm({\n    mode: 'all',\n    reValidateMode: 'onChange'\n  }),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      errors = _useForm.errors,\n      formState = _useForm.formState,\n      watch = _useForm.watch,\n      setValue = _useForm.setValue;\n\n  var watchQuantity = watch('quantity');\n  var validate = {\n    greaterThanBalance: function greaterThanBalance(value) {\n      return parseFloat(value) <= usersTicketBalance || t('pleaseEnterAmountLowerThanTicketBalance');\n    }\n  };\n\n  var onSubmit = function onSubmit(values) {\n    if (formState.isValid) {\n      queryParamUpdater.add(router, {\n        quantity: values.quantity,\n        prevBalance: usersTicketBalanceBN.toString()\n      });\n      nextStep();\n    }\n  };\n\n  var continueButton = __jsx(Button, {\n    textSize: \"lg\",\n    disabled: !formState.isValid,\n    onClick: handleSubmit(onSubmit),\n    className: 'mx-auto'\n  }, t('continue'));\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(TextInputGroup, {\n    unsignedNumber: true,\n    id: \"quantity\",\n    name: \"quantity\",\n    register: register,\n    validate: validate,\n    label: t('enterAmountToWithdraw'),\n    required: t('ticketQuantityRequired'),\n    autoComplete: \"off\",\n    rightLabel: usersAddress && usersTicketBalance && __jsx(React.Fragment, null, __jsx(\"button\", {\n      type: \"button\",\n      className: \"font-bold inline-flex items-center\",\n      onClick: function onClick(e) {\n        e.preventDefault();\n        setValue('quantity', usersTicketBalance, {\n          shouldValidate: true\n        });\n      }\n    }, __jsx(\"img\", {\n      src: TicketIcon,\n      className: \"mr-2\",\n      style: {\n        maxHeight: 12\n      }\n    }), \" \", numberWithCommas(usersTicketBalance, {\n      precision: 2\n    }), \" \", tickerUpcased))\n  }), __jsx(\"div\", {\n    className: \"mt-2 text-sm text-highlight-1 mb-2\",\n    style: {\n      minHeight: 24\n    }\n  }, Object.values(errors).length > 0 ? __jsx(React.Fragment, null, __jsx(ErrorsBox, {\n    errors: errors\n  })) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"odds-box mx-auto font-normal text-xxs xs:text-xs text-orange\",\n    style: {\n      maxWidth: 500\n    }\n  }, __jsx(WithdrawOdds, {\n    pool: pool,\n    usersBalance: usersTicketBalance,\n    quantity: watchQuantity\n  })))), __jsx(ButtonDrawer, null, continueButton)));\n}\n\n_s(WithdrawTicketsForm, \"1nSGbXXfWTfeq/yFb2Y0w6HPNNk=\", false, function () {\n  return [useTranslation, useRouter, usePlayerQuery, useForm];\n});\n\n_c = WithdrawTicketsForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"WithdrawTicketsForm\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/WithdrawTicketsForm.jsx"],"names":["React","useContext","useForm","useRouter","useTranslation","AuthControllerContext","PlayerDataContext","PoolDataContext","ButtonDrawer","Button","ErrorsBox","WithdrawOdds","TextInputGroup","usePlayerQuery","queryParamUpdater","numberWithCommas","testAddress","TicketIcon","WithdrawTicketsForm","props","t","nextStep","router","chainId","pauseQueries","usersAddress","pool","usersTicketBalance","usersTicketBalanceBN","playerAddressError","blockNumber","status","playerData","data","error","isFetching","console","ticker","underlyingCollateralSymbol","tickerUpcased","toUpperCase","mode","reValidateMode","handleSubmit","register","errors","formState","watch","setValue","watchQuantity","validate","greaterThanBalance","value","parseFloat","onSubmit","values","isValid","add","quantity","prevBalance","toString","continueButton","e","preventDefault","shouldValidate","maxHeight","precision","minHeight","Object","length","maxWidth"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { useRouter } from 'next/router'\n\nimport { useTranslation } from 'lib/../i18n'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PlayerDataContext } from 'lib/components/contextProviders/PlayerDataContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { ButtonDrawer } from 'lib/components/ButtonDrawer'\nimport { Button } from 'lib/components/Button'\nimport { ErrorsBox } from 'lib/components/ErrorsBox'\nimport { WithdrawOdds } from 'lib/components/WithdrawOdds'\nimport { TextInputGroup } from 'lib/components/TextInputGroup'\nimport { usePlayerQuery } from 'lib/hooks/usePlayerQuery'\nimport { queryParamUpdater } from 'lib/utils/queryParamUpdater'\nimport { numberWithCommas } from 'lib/utils/numberWithCommas'\nimport { testAddress } from 'lib/utils/testAddress'\n\nimport TicketIcon from 'assets/images/icon-ticket-green@2x.png'\n\nexport function WithdrawTicketsForm(props) {\n  const { t } = useTranslation()\n\n  const {\n    nextStep,\n  } = props\n  \n  const router = useRouter()\n\n  const { chainId, pauseQueries, usersAddress } = useContext(AuthControllerContext)\n  const { pool } = useContext(PoolDataContext)\n  const { usersTicketBalance, usersTicketBalanceBN } = useContext(PlayerDataContext)\n\n\n  const playerAddressError = testAddress(usersAddress)\n\n  const blockNumber = -1\n  const {\n    status,\n    data: playerData,\n    error,\n    isFetching\n  } = usePlayerQuery(pauseQueries, chainId, usersAddress, blockNumber, playerAddressError)\n\n  if (error) {\n    console.error(error)\n  }\n\n\n  const ticker = pool?.underlyingCollateralSymbol\n  const tickerUpcased = ticker?.toUpperCase()\n\n  const {\n    handleSubmit,\n    register,\n    errors,\n    formState,\n    watch,\n    setValue\n  } = useForm({\n    mode: 'all',\n    reValidateMode: 'onChange',\n  })\n\n  const watchQuantity = watch('quantity')\n\n  const validate = {\n    greaterThanBalance: value => parseFloat(value) <= usersTicketBalance ||\n      t('pleaseEnterAmountLowerThanTicketBalance'),\n  }\n\n  const onSubmit = (values) => {\n    if (formState.isValid) {\n      queryParamUpdater.add(router, {\n        quantity: values.quantity,\n        prevBalance: usersTicketBalanceBN.toString()\n      })\n\n      nextStep()\n    }\n  }\n\n  const continueButton = <Button\n    textSize='lg'\n    disabled={!formState.isValid}\n    onClick={handleSubmit(onSubmit)}\n    className={'mx-auto'}\n  >\n    {t('continue')}\n  </Button>\n\n  return <>\n    <form\n      onSubmit={handleSubmit(onSubmit)}\n    >\n      <TextInputGroup\n        unsignedNumber\n        id='quantity'\n        name='quantity'\n        register={register}\n        validate={validate}\n        label={t('enterAmountToWithdraw')}\n        required={t('ticketQuantityRequired')}\n        autoComplete='off'\n\n        rightLabel={usersAddress && usersTicketBalance && <>\n          <button\n            type='button'\n            className='font-bold inline-flex items-center'\n            onClick={(e) => {\n              e.preventDefault()\n              setValue('quantity', usersTicketBalance, { shouldValidate: true })\n            }}\n          >\n            <img\n              src={TicketIcon}\n              className='mr-2'\n              style={{ maxHeight: 12 }}\n            /> {numberWithCommas(usersTicketBalance, { precision: 2 })} {tickerUpcased}\n          </button>\n        </>}\n      />\n\n      <div\n        className='mt-2 text-sm text-highlight-1 mb-2'\n        style={{\n          minHeight: 24\n        }}\n      >\n        {Object.values(errors).length > 0 ? <>\n          <ErrorsBox\n            errors={errors}\n          />\n        </> : <>\n            <div\n              className='odds-box mx-auto font-normal text-xxs xs:text-xs text-orange'\n              style={{\n                maxWidth: 500\n              }}\n            >\n              <WithdrawOdds\n                pool={pool}\n                usersBalance={usersTicketBalance}\n                quantity={watchQuantity}\n              />\n            </div>\n          </>}\n      </div>\n\n      <ButtonDrawer>\n        {continueButton}\n      </ButtonDrawer>\n    </form>\n\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ethers } from 'ethers';\nimport { batch, contract } from '@pooltogether/etherplex';\nimport PrizePoolAbi from '@pooltogether/pooltogether-contracts/abis/PrizePool';\nimport { readProvider } from 'lib/services/readProvider';\nexport var fetchExitFees = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(networkName, usersAddress, poolAddress, ticketAddress, quantityBN) {\n    var provider, exitFees, etherplexPrizePoolContract, values;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return readProvider(networkName);\n\n          case 2:\n            provider = _context.sent;\n            exitFees = {\n              timelockDurationSeconds: ethers.utils.bigNumberify(0),\n              exitFee: ethers.utils.bigNumberify(0)\n            };\n            _context.prev = 4;\n            etherplexPrizePoolContract = contract('prizePool', PrizePoolAbi, poolAddress);\n            _context.next = 8;\n            return batch(provider, etherplexPrizePoolContract // .balanceOfCredit(usersAddress, ticketAddress)\n            .calculateTimelockDuration(usersAddress, ticketAddress, quantityBN).calculateEarlyExitFee(usersAddress, ticketAddress, quantityBN));\n\n          case 8:\n            values = _context.sent;\n            // Instant Withdrawal Credit/Fee\n            // exitFees.burnedCredit = values.prizePool.balanceOfCredit[0]\n            // exitFees.balanceOfCredit = values.prizePool.balanceOfCredit[0]\n            exitFees.timelockDurationSeconds = values.prizePool.calculateTimelockDuration.durationSeconds;\n            exitFees.exitFee = values.prizePool.calculateEarlyExitFee.exitFee;\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](4);\n            console.warn(_context.t0.message);\n\n          case 16:\n            _context.prev = 16;\n            return _context.abrupt(\"return\", exitFees);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 13, 16, 19]]);\n  }));\n\n  return function fetchExitFees(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/utils/fetchExitFees.js"],"names":["ethers","batch","contract","PrizePoolAbi","readProvider","fetchExitFees","networkName","usersAddress","poolAddress","ticketAddress","quantityBN","provider","exitFees","timelockDurationSeconds","utils","bigNumberify","exitFee","etherplexPrizePoolContract","calculateTimelockDuration","calculateEarlyExitFee","values","prizePool","durationSeconds","console","warn","message"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,yBAAhC;AAEA,OAAOC,YAAP,MAAyB,qDAAzB;AAEA,SAASC,YAAT,QAA6B,2BAA7B;AAEA,OAAO,IAAMC,aAAa;AAAA,sEAAG,iBAC3BC,WAD2B,EAE3BC,YAF2B,EAG3BC,WAH2B,EAI3BC,aAJ2B,EAK3BC,UAL2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOJN,YAAY,CAACE,WAAD,CAPR;;AAAA;AAOrBK,YAAAA,QAPqB;AAQrBC,YAAAA,QARqB,GAQV;AACfC,cAAAA,uBAAuB,EAAEb,MAAM,CAACc,KAAP,CAAaC,YAAb,CAA0B,CAA1B,CADV;AAEfC,cAAAA,OAAO,EAAEhB,MAAM,CAACc,KAAP,CAAaC,YAAb,CAA0B,CAA1B;AAFM,aARU;AAAA;AAcnBE,YAAAA,0BAdmB,GAcUf,QAAQ,CACzC,WADyC,EAEzCC,YAFyC,EAGzCK,WAHyC,CAdlB;AAAA;AAAA,mBAoBJP,KAAK,CACxBU,QADwB,EAExBM,0BAA0B,CACxB;AADwB,aAEvBC,yBAFH,CAE6BX,YAF7B,EAE2CE,aAF3C,EAE0DC,UAF1D,EAGGS,qBAHH,CAGyBZ,YAHzB,EAGuCE,aAHvC,EAGsDC,UAHtD,CAFwB,CApBD;;AAAA;AAoBnBU,YAAAA,MApBmB;AA4BzB;AACA;AACA;AACAR,YAAAA,QAAQ,CAACC,uBAAT,GAAmCO,MAAM,CAACC,SAAP,CAAiBH,yBAAjB,CAA2CI,eAA9E;AACAV,YAAAA,QAAQ,CAACI,OAAT,GAAmBI,MAAM,CAACC,SAAP,CAAiBF,qBAAjB,CAAuCH,OAA1D;AAhCyB;AAAA;;AAAA;AAAA;AAAA;AAmCzBO,YAAAA,OAAO,CAACC,IAAR,CAAa,YAAEC,OAAf;;AAnCyB;AAAA;AAAA,6CAsClBb,QAtCkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbP,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["import { ethers } from 'ethers'\nimport { batch, contract } from '@pooltogether/etherplex'\n\nimport PrizePoolAbi from '@pooltogether/pooltogether-contracts/abis/PrizePool'\n\nimport { readProvider } from 'lib/services/readProvider'\n\nexport const fetchExitFees = async (\n  networkName,\n  usersAddress,\n  poolAddress,\n  ticketAddress,\n  quantityBN,\n) => {\n  const provider = await readProvider(networkName)\n  const exitFees = {\n    timelockDurationSeconds: ethers.utils.bigNumberify(0),\n    exitFee: ethers.utils.bigNumberify(0),\n  }\n\n  try {\n    const etherplexPrizePoolContract = contract(\n      'prizePool',\n      PrizePoolAbi,\n      poolAddress\n    )\n\n    const values = await batch(\n      provider,\n      etherplexPrizePoolContract\n        // .balanceOfCredit(usersAddress, ticketAddress)\n        .calculateTimelockDuration(usersAddress, ticketAddress, quantityBN)\n        .calculateEarlyExitFee(usersAddress, ticketAddress, quantityBN)\n    )\n\n    // Instant Withdrawal Credit/Fee\n    // exitFees.burnedCredit = values.prizePool.balanceOfCredit[0]\n    // exitFees.balanceOfCredit = values.prizePool.balanceOfCredit[0]\n    exitFees.timelockDurationSeconds = values.prizePool.calculateTimelockDuration.durationSeconds\n    exitFees.exitFee = values.prizePool.calculateEarlyExitFee.exitFee\n  }\n  catch (e) {\n    console.warn(e.message)\n  }\n  finally {\n    return exitFees\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { updateStorageWith } from 'lib/utils/updateStorageWith';\nexport const updateTransaction = (id, newValues, transactions, setTransactions) => {\n  let editedTransactions = transactions.map(transaction => {\n    return transaction.id === id ? _objectSpread(_objectSpread({}, transaction), newValues) : transaction;\n  }); // runs the actual update of the data store\n\n  setTransactions([...editedTransactions]); // stash in localStorage to persist state between page reloads\n\n  updateStorageWith(editedTransactions);\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/services/updateTransaction.js"],"names":["updateStorageWith","updateTransaction","id","newValues","transactions","setTransactions","editedTransactions","map","transaction"],"mappings":";;;;;;AAAA,SAASA,iBAAT,QAAkC,6BAAlC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,EAAD,EAAKC,SAAL,EAAgBC,YAAhB,EAA8BC,eAA9B,KAAkD;AACjF,MAAIC,kBAAkB,GAAGF,YAAY,CAClCG,GADsB,CACjBC,WAAD,IAAiB;AACpB,WAAOA,WAAW,CAACN,EAAZ,KAAmBA,EAAnB,mCACFM,WADE,GAEFL,SAFE,IAGHK,WAHJ;AAID,GANsB,CAAzB,CADiF,CASjF;;AACAH,EAAAA,eAAe,CAAC,CAAC,GAAGC,kBAAJ,CAAD,CAAf,CAViF,CAYjF;;AACAN,EAAAA,iBAAiB,CAACM,kBAAD,CAAjB;AACD,CAdM","sourcesContent":["import { updateStorageWith } from 'lib/utils/updateStorageWith'\n\nexport const updateTransaction = (id, newValues, transactions, setTransactions) => {\n  let editedTransactions = transactions\n    .map((transaction) => {\n      return transaction.id === id ? {\n        ...transaction,\n        ...newValues\n      } : transaction\n    })\n    \n  // runs the actual update of the data store\n  setTransactions([...editedTransactions])\n\n  // stash in localStorage to persist state between page reloads\n  updateStorageWith(editedTransactions)\n}\n"]},"metadata":{},"sourceType":"module"}
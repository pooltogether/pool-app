{"ast":null,"code":"import { ethers } from 'ethers';\nimport { DEFAULT_TOKEN_PRECISION, SECONDS_PER_BLOCK } from '../constants';\nimport { normalizeTo18Decimals } from 'lib/utils/normalizeTo18Decimals';\nconst bn = ethers.utils.bigNumberify; // totalSupply     = ticketSupply + sponsorshipSupply\n// blocksRemaining = remainingSeconds / secondsPerBlock\n// additionalYield = (totalSupply * (blocksRemaining * supplyRatePerBlock))\n//                     .div(1000000000000000000)\n//\n// estimatedPrize  = awardBalance + additionalYield\n\nexport function calculateEstimatedPoolPrize({\n  underlyingCollateralDecimals,\n  awardBalance,\n  prizeStrategy,\n  supplyRatePerBlock,\n  prizePeriodRemainingSeconds\n}) {\n  var _prizeStrategy$single, _prizeStrategy$single2;\n\n  const ticket = prizeStrategy === null || prizeStrategy === void 0 ? void 0 : (_prizeStrategy$single = prizeStrategy.singleRandomWinner) === null || _prizeStrategy$single === void 0 ? void 0 : _prizeStrategy$single.ticket;\n  const sponsorship = prizeStrategy === null || prizeStrategy === void 0 ? void 0 : (_prizeStrategy$single2 = prizeStrategy.singleRandomWinner) === null || _prizeStrategy$single2 === void 0 ? void 0 : _prizeStrategy$single2.sponsorship;\n  const ticketSupply = ticket === null || ticket === void 0 ? void 0 : ticket.totalSupply;\n  const sponsorshipSupply = sponsorship === null || sponsorship === void 0 ? void 0 : sponsorship.totalSupply;\n  const decimals = underlyingCollateralDecimals || DEFAULT_TOKEN_PRECISION;\n  awardBalance = awardBalance || bn(0);\n  awardBalance = normalizeTo18Decimals(awardBalance, decimals);\n  let totalSupply = ticketSupply ? bn(ticketSupply).add(bn(sponsorshipSupply)) : '0';\n  totalSupply = normalizeTo18Decimals(totalSupply, decimals);\n  const supplyRatePerBlockBN = supplyRatePerBlock || bn(0);\n  const remainingSeconds = prizePeriodRemainingSeconds ? prizePeriodRemainingSeconds : bn(0);\n  const blocksRemainingBN = remainingSeconds.div(SECONDS_PER_BLOCK);\n  const additionalYield = totalSupply.mul(supplyRatePerBlockBN).mul(blocksRemainingBN).div(ethers.constants.WeiPerEther);\n  const estimatedPrizeBN = additionalYield.add(awardBalance); // denormalize back to original token decimal amount\n\n  return estimatedPrizeBN.div(ethers.utils.parseUnits('1', 18 - parseInt(decimals, 10)));\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/services/calculateEstimatedPoolPrize.js"],"names":["ethers","DEFAULT_TOKEN_PRECISION","SECONDS_PER_BLOCK","normalizeTo18Decimals","bn","utils","bigNumberify","calculateEstimatedPoolPrize","underlyingCollateralDecimals","awardBalance","prizeStrategy","supplyRatePerBlock","prizePeriodRemainingSeconds","ticket","singleRandomWinner","sponsorship","ticketSupply","totalSupply","sponsorshipSupply","decimals","add","supplyRatePerBlockBN","remainingSeconds","blocksRemainingBN","div","additionalYield","mul","constants","WeiPerEther","estimatedPrizeBN","parseUnits","parseInt"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,uBAAT,EAAkCC,iBAAlC,QAA2D,cAA3D;AAEA,SAASC,qBAAT,QAAsC,iCAAtC;AAEA,MAAMC,EAAE,GAAGJ,MAAM,CAACK,KAAP,CAAaC,YAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,2BAAT,CAAqC;AAC1CC,EAAAA,4BAD0C;AAE1CC,EAAAA,YAF0C;AAG1CC,EAAAA,aAH0C;AAI1CC,EAAAA,kBAJ0C;AAK1CC,EAAAA;AAL0C,CAArC,EAMJ;AAAA;;AACD,QAAMC,MAAM,GAAGH,aAAH,aAAGA,aAAH,gDAAGA,aAAa,CAAEI,kBAAlB,0DAAG,sBAAmCD,MAAlD;AACA,QAAME,WAAW,GAAGL,aAAH,aAAGA,aAAH,iDAAGA,aAAa,CAAEI,kBAAlB,2DAAG,uBAAmCC,WAAvD;AAEA,QAAMC,YAAY,GAAGH,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEI,WAA7B;AACA,QAAMC,iBAAiB,GAAGH,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEE,WAAvC;AAEA,QAAME,QAAQ,GAAGX,4BAA4B,IAAIP,uBAAjD;AAEAQ,EAAAA,YAAY,GAAGA,YAAY,IAAIL,EAAE,CAAC,CAAD,CAAjC;AACAK,EAAAA,YAAY,GAAGN,qBAAqB,CAACM,YAAD,EAAeU,QAAf,CAApC;AAEA,MAAIF,WAAW,GAAGD,YAAY,GAAGZ,EAAE,CAACY,YAAD,CAAF,CAAiBI,GAAjB,CAAqBhB,EAAE,CAACc,iBAAD,CAAvB,CAAH,GAAiD,GAA/E;AACAD,EAAAA,WAAW,GAAGd,qBAAqB,CAACc,WAAD,EAAcE,QAAd,CAAnC;AAEA,QAAME,oBAAoB,GAAGV,kBAAkB,IAAIP,EAAE,CAAC,CAAD,CAArD;AAEA,QAAMkB,gBAAgB,GAAGV,2BAA2B,GAAGA,2BAAH,GAAiCR,EAAE,CAAC,CAAD,CAAvF;AACA,QAAMmB,iBAAiB,GAAGD,gBAAgB,CACvCE,GADuB,CACnBtB,iBADmB,CAA1B;AAGA,QAAMuB,eAAe,GAAGR,WAAW,CAChCS,GADqB,CACjBL,oBADiB,EAErBK,GAFqB,CAEjBH,iBAFiB,EAGrBC,GAHqB,CAGjBxB,MAAM,CAAC2B,SAAP,CAAiBC,WAHA,CAAxB;AAKA,QAAMC,gBAAgB,GAAGJ,eAAe,CAACL,GAAhB,CACvBX,YADuB,CAAzB,CA1BC,CA8BD;;AACA,SAAOoB,gBAAgB,CACpBL,GADI,CACAxB,MAAM,CAACK,KAAP,CAAayB,UAAb,CAAwB,GAAxB,EAA6B,KAAKC,QAAQ,CAACZ,QAAD,EAAW,EAAX,CAA1C,CADA,CAAP;AAED","sourcesContent":["import { ethers } from 'ethers'\nimport { DEFAULT_TOKEN_PRECISION, SECONDS_PER_BLOCK } from '../constants'\n\nimport { normalizeTo18Decimals } from 'lib/utils/normalizeTo18Decimals'\n\nconst bn = ethers.utils.bigNumberify\n\n// totalSupply     = ticketSupply + sponsorshipSupply\n// blocksRemaining = remainingSeconds / secondsPerBlock\n// additionalYield = (totalSupply * (blocksRemaining * supplyRatePerBlock))\n//                     .div(1000000000000000000)\n//\n// estimatedPrize  = awardBalance + additionalYield\n\nexport function calculateEstimatedPoolPrize({\n  underlyingCollateralDecimals,\n  awardBalance,\n  prizeStrategy,\n  supplyRatePerBlock,\n  prizePeriodRemainingSeconds,\n}) {\n  const ticket = prizeStrategy?.singleRandomWinner?.ticket\n  const sponsorship = prizeStrategy?.singleRandomWinner?.sponsorship\n\n  const ticketSupply = ticket?.totalSupply\n  const sponsorshipSupply = sponsorship?.totalSupply\n\n  const decimals = underlyingCollateralDecimals || DEFAULT_TOKEN_PRECISION\n\n  awardBalance = awardBalance || bn(0)\n  awardBalance = normalizeTo18Decimals(awardBalance, decimals)\n\n  let totalSupply = ticketSupply ? bn(ticketSupply).add(bn(sponsorshipSupply)) : '0'\n  totalSupply = normalizeTo18Decimals(totalSupply, decimals)\n\n  const supplyRatePerBlockBN = supplyRatePerBlock || bn(0)\n\n  const remainingSeconds = prizePeriodRemainingSeconds ? prizePeriodRemainingSeconds : bn(0)\n  const blocksRemainingBN = remainingSeconds\n    .div(SECONDS_PER_BLOCK)\n\n  const additionalYield = totalSupply\n    .mul(supplyRatePerBlockBN)\n    .mul(blocksRemainingBN)\n    .div(ethers.constants.WeiPerEther)\n\n  const estimatedPrizeBN = additionalYield.add(\n    awardBalance\n  )\n\n  // denormalize back to original token decimal amount\n  return estimatedPrizeBN\n    .div(ethers.utils.parseUnits('1', 18 - parseInt(decimals, 10)))\n}\n"]},"metadata":{},"sourceType":"module"}
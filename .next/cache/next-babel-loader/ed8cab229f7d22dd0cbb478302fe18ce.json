{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { isSafari } from 'react-device-detect';\nimport { useTranslation } from 'lib/../i18n';\nimport { axiosInstance } from 'lib/axiosInstance';\nimport { DropdownList } from 'lib/components/DropdownList';\nimport { poolToast } from 'lib/utils/poolToast'; // import GooglePay from 'assets/images/googlepay.svg'\n\nimport ApplePay from 'assets/images/applepay.svg';\nvar WYRE_LAMBDA_PATH = \"/.netlify/functions/wyre-api\";\nexport function WyreTopUpBalanceDropdown(props) {\n  _s();\n\n  var _currencies;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var label = props.label,\n      className = props.className,\n      hoverTextColor = props.hoverTextColor,\n      textColor = props.textColor,\n      tickerUpcased = props.tickerUpcased;\n\n  var onValueSet = function onValueSet(currency) {\n    handleOpenWyre(currency);\n  };\n\n  var applePay = __jsx(React.Fragment, null, isSafari && __jsx(React.Fragment, null, \", \", __jsx(\"img\", {\n    src: ApplePay,\n    className: \"inline-block relative h-6 w-12\",\n    style: {\n      top: 0\n    }\n  })));\n\n  var currencies = (_currencies = {}, _defineProperty(_currencies, tickerUpcased, {\n    'label': __jsx(\"span\", {\n      className: \"text-xs\"\n    }, t('buyTickerDebitCreditCard', {\n      ticker: tickerUpcased\n    }), applePay)\n  }), _defineProperty(_currencies, 'ETH', {\n    'label': __jsx(\"span\", {\n      className: \"text-xs\"\n    }, t('buyEthDebitCreditCard'), applePay)\n  }), _currencies);\n\n  var handleOpenWyre = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(currency) {\n      var usersAddress, params, response, _response, _response$data, url;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              usersAddress = props.usersAddress;\n              params = {\n                path: \"/v3/orders/reserve\",\n                dest: \"ethereum:\".concat(usersAddress),\n                destCurrency: currency.toUpperCase()\n              };\n              _context.prev = 2;\n              _context.next = 5;\n              return axiosInstance.post(\"\".concat(WYRE_LAMBDA_PATH), params);\n\n            case 5:\n              response = _context.sent;\n              console.log(response); // dropdownRef.handleClose()\n\n              url = (_response = response) === null || _response === void 0 ? void 0 : (_response$data = _response.data) === null || _response$data === void 0 ? void 0 : _response$data.url;\n\n              if (url) {\n                window.open(url);\n              } else {\n                console.log(response.error);\n              }\n\n              _context.next = 15;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](2);\n              poolToast.error(\"Wyre - purchase error, please try again or message support\");\n              console.error(_context.t0);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 11]]);\n    }));\n\n    return function handleOpenWyre(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var formatValue = function formatValue(key) {\n    var currency = currencies[key];\n    return __jsx(React.Fragment, null, currency.label);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: \"relative z-50\"\n  }, __jsx(DropdownList, {\n    id: \"topup-dropdown\",\n    label: label,\n    className: className,\n    textColor: textColor,\n    hoverTextColor: hoverTextColor,\n    formatValue: formatValue,\n    onValueSet: onValueSet,\n    current: null,\n    values: currencies\n  })));\n}\n\n_s(WyreTopUpBalanceDropdown, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = WyreTopUpBalanceDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"WyreTopUpBalanceDropdown\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/WyreTopUpBalanceDropdown.jsx"],"names":["React","useEffect","useState","isSafari","useTranslation","axiosInstance","DropdownList","poolToast","ApplePay","WYRE_LAMBDA_PATH","WyreTopUpBalanceDropdown","props","t","label","className","hoverTextColor","textColor","tickerUpcased","onValueSet","currency","handleOpenWyre","applePay","top","currencies","ticker","usersAddress","params","path","dest","destCurrency","toUpperCase","post","response","console","log","url","data","window","open","error","formatValue","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { isSafari } from 'react-device-detect'\n\nimport { useTranslation } from 'lib/../i18n'\nimport { axiosInstance } from 'lib/axiosInstance'\nimport { DropdownList } from 'lib/components/DropdownList'\nimport { poolToast } from 'lib/utils/poolToast'\n\n// import GooglePay from 'assets/images/googlepay.svg'\nimport ApplePay from 'assets/images/applepay.svg'\n\nconst WYRE_LAMBDA_PATH = `/.netlify/functions/wyre-api`\n\nexport function WyreTopUpBalanceDropdown(props) {\n  const { t } = useTranslation()\n\n  const {\n    label,\n    className,\n    hoverTextColor,\n    textColor,\n    tickerUpcased\n  } = props\n  \n  const onValueSet = (currency) => {\n    handleOpenWyre(currency)\n  }\n\n  const applePay = <>\n    {isSafari && <>, <img\n      src={ApplePay}\n      className='inline-block relative h-6 w-12'\n      style={{ top: 0 }}\n    /></>}\n  </>\n\n  const currencies = {\n    [tickerUpcased]: {\n      'label': <span className='text-xs'>\n        {t('buyTickerDebitCreditCard', {\n          ticker: tickerUpcased\n        })}{applePay}\n      </span>,\n    },\n    'ETH': {\n      'label': <span className='text-xs'>\n        {t('buyEthDebitCreditCard')}{applePay}\n      </span>,\n    },\n  }\n\n  const handleOpenWyre = async (currency) => {\n    const {\n      usersAddress\n    } = props\n\n\n    const params = {\n      path: `/v3/orders/reserve`,\n      dest: `ethereum:${usersAddress}`,\n      destCurrency: currency.toUpperCase()\n    }\n\n\n    let response\n\n    try {\n      response = await axiosInstance.post(\n        `${WYRE_LAMBDA_PATH}`,\n        params\n      )\n      console.log(response)\n\n      // dropdownRef.handleClose()\n\n      const url = response?.data?.url\n\n      if (url) {\n        window.open(url)\n      } else {\n        console.log(response.error)\n      }\n    } catch (e) {\n      poolToast.error(`Wyre - purchase error, please try again or message support`)\n      console.error(e)\n    }\n  }\n\n  const formatValue = (key) => {\n    const currency = currencies[key]\n\n    return <>\n      {currency.label}\n    </>\n  }\n\n  return <>\n    <span className='relative z-50'>\n      <DropdownList\n        id='topup-dropdown'\n        label={label}\n        className={className}\n        textColor={textColor}\n        hoverTextColor={hoverTextColor}\n        formatValue={formatValue}\n        onValueSet={onValueSet}\n        current={null}\n        values={currencies}\n      />\n    </span>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
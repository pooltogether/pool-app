{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { Wizard, WizardStep } from 'react-wizard-primitive';\nimport { Trans, useTranslation } from 'lib/../i18n';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { ExecuteCryptoDeposit } from 'lib/components/ExecuteCryptoDeposit';\nimport { ConfirmFiatDeposit } from 'lib/components/ConfirmFiatDeposit';\nimport { DepositCryptoForm } from 'lib/components/DepositCryptoForm';\nimport { DepositFiatForm } from 'lib/components/DepositFiatForm';\nimport { DepositWizardSignIn } from 'lib/components/DepositWizardSignIn'; // import { FiatOrCryptoForm } from 'lib/components/FiatOrCryptoForm'\n\nimport { Meta } from 'lib/components/Meta';\nimport { OrderComplete } from 'lib/components/OrderComplete';\nimport { PoolNumber } from 'lib/components/PoolNumber';\nimport { DepositTicketQuantityForm } from 'lib/components/DepositTicketQuantityForm';\nimport { WizardLayout } from 'lib/components/WizardLayout';\nimport { queryParamUpdater } from 'lib/utils/queryParamUpdater';\nimport WalletIcon from 'assets/images/icon-wallet.svg';\nexport function DepositWizardContainer(props) {\n  var _pool$underlyingColla;\n\n  const {\n    t\n  } = useTranslation();\n  const router = useRouter();\n  const method = router.query.method;\n  const quantity = router.query.quantity;\n  let initialStepIndex = 0;\n\n  if (quantity) {\n    initialStepIndex = 1;\n  }\n\n  if (method) {\n    initialStepIndex = 2;\n  }\n\n  const {\n    usersAddress\n  } = useContext(AuthControllerContext);\n  const {\n    pool\n  } = useContext(PoolDataContext);\n  const tickerUpcased = pool === null || pool === void 0 ? void 0 : (_pool$underlyingColla = pool.underlyingCollateralSymbol) === null || _pool$underlyingColla === void 0 ? void 0 : _pool$underlyingColla.toUpperCase();\n  return __jsx(React.Fragment, null, __jsx(Meta, {\n    title: t('deposit')\n  }), __jsx(Wizard, {\n    initialStepIndex: initialStepIndex\n  }, wizard => {\n    const {\n      activeStepIndex,\n      previousStep,\n      moveToStep\n    } = wizard;\n\n    const back = e => {\n      if (method) {\n        queryParamUpdater.remove(router, 'method');\n      } else if (quantity) {\n        queryParamUpdater.remove(router, 'quantity');\n      }\n\n      previousStep();\n    };\n\n    return __jsx(WizardLayout, {\n      currentWizardStep: activeStepIndex + 1,\n      handlePreviousStep: back,\n      moveToStep: moveToStep,\n      totalWizardSteps: usersAddress ? 4 : 5\n    }, __jsx(WizardStep, null, step => {\n      return step.isActive && __jsx(React.Fragment, null, __jsx(DepositTicketQuantityForm, {\n        iconSrc: WalletIcon,\n        formName: t('getTickets'),\n        formSubName: __jsx(Trans, {\n          i18nKey: \"amountTickerEqualsAmountTickets\",\n          defaults: \"$<number>{{amount}}</number> {{ticker}} = <number>{{amount}}</number> ticket\",\n          components: {\n            number: __jsx(PoolNumber, null)\n          },\n          values: {\n            amount: '1',\n            ticker: tickerUpcased\n          }\n        }),\n        nextStep: step.nextStep\n      }));\n    }), !usersAddress && __jsx(React.Fragment, null, __jsx(WizardStep, null, step => {\n      return step.isActive && __jsx(React.Fragment, null, __jsx(DepositWizardSignIn, null));\n    })), __jsx(WizardStep, null, step => {\n      return step.isActive && __jsx(React.Fragment, null, method === 'fiat' ? __jsx(DepositFiatForm, {\n        nextStep: step.nextStep\n      }) : __jsx(DepositCryptoForm, {\n        nextStep: step.nextStep,\n        previousStep: step.previousStep\n      }));\n    }), __jsx(WizardStep, null, step => {\n      return step.isActive && __jsx(React.Fragment, null, method === 'fiat' ? __jsx(ConfirmFiatDeposit, {\n        nextStep: step.nextStep\n      }) : __jsx(ExecuteCryptoDeposit, {\n        nextStep: step.nextStep,\n        previousStep: step.previousStep\n      }));\n    }), __jsx(WizardStep, null, step => {\n      return step.isActive && __jsx(React.Fragment, null, __jsx(OrderComplete, null));\n    }));\n  }));\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/DepositWizardContainer.jsx"],"names":["React","useContext","useRouter","Wizard","WizardStep","Trans","useTranslation","AuthControllerContext","PoolDataContext","ExecuteCryptoDeposit","ConfirmFiatDeposit","DepositCryptoForm","DepositFiatForm","DepositWizardSignIn","Meta","OrderComplete","PoolNumber","DepositTicketQuantityForm","WizardLayout","queryParamUpdater","WalletIcon","DepositWizardContainer","props","t","router","method","query","quantity","initialStepIndex","usersAddress","pool","tickerUpcased","underlyingCollateralSymbol","toUpperCase","wizard","activeStepIndex","previousStep","moveToStep","back","e","remove","step","isActive","number","amount","ticker","nextStep"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,wBAAnC;AAEA,SAASC,KAAT,EAAgBC,cAAhB,QAAsC,aAAtC;AACA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,eAAT,QAAgC,yDAAhC;AACA,SAASC,oBAAT,QAAqC,qCAArC;AACA,SAASC,kBAAT,QAAmC,mCAAnC;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,mBAAT,QAAoC,oCAApC,C,CACA;;AACA,SAASC,IAAT,QAAqB,qBAArB;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,yBAAT,QAA0C,0CAA1C;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AAEA,OAAOC,UAAP,MAAuB,+BAAvB;AAEA,OAAO,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AAAA;;AAC5C,QAAM;AAAEC,IAAAA;AAAF,MAAQjB,cAAc,EAA5B;AACA,QAAMkB,MAAM,GAAGtB,SAAS,EAAxB;AAEA,QAAMuB,MAAM,GAAGD,MAAM,CAACE,KAAP,CAAaD,MAA5B;AACA,QAAME,QAAQ,GAAGH,MAAM,CAACE,KAAP,CAAaC,QAA9B;AAEA,MAAIC,gBAAgB,GAAG,CAAvB;;AACA,MAAID,QAAJ,EAAc;AACZC,IAAAA,gBAAgB,GAAG,CAAnB;AACD;;AACD,MAAIH,MAAJ,EAAY;AACVG,IAAAA,gBAAgB,GAAG,CAAnB;AACD;;AAED,QAAM;AAAEC,IAAAA;AAAF,MAAmB5B,UAAU,CAACM,qBAAD,CAAnC;AACA,QAAM;AAAEuB,IAAAA;AAAF,MAAW7B,UAAU,CAACO,eAAD,CAA3B;AAEA,QAAMuB,aAAa,GAAGD,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEE,0BAAT,0DAAG,sBAAkCC,WAAlC,EAAtB;AAEA,SAAO,4BACL,MAAC,IAAD;AACE,IAAA,KAAK,EAAEV,CAAC,CAAC,SAAD;AADV,IADK,EAKL,MAAC,MAAD;AACE,IAAA,gBAAgB,EAAEK;AADpB,KAIKM,MAAD,IAAY;AACV,UAAM;AAAEC,MAAAA,eAAF;AAAmBC,MAAAA,YAAnB;AAAiCC,MAAAA;AAAjC,QAAgDH,MAAtD;;AAEA,UAAMI,IAAI,GAAIC,CAAD,IAAO;AAClB,UAAId,MAAJ,EAAY;AACVN,QAAAA,iBAAiB,CAACqB,MAAlB,CAAyBhB,MAAzB,EAAiC,QAAjC;AACD,OAFD,MAEO,IAAIG,QAAJ,EAAc;AACnBR,QAAAA,iBAAiB,CAACqB,MAAlB,CAAyBhB,MAAzB,EAAiC,UAAjC;AACD;;AAEDY,MAAAA,YAAY;AACb,KARD;;AAUA,WAAO,MAAC,YAAD;AACL,MAAA,iBAAiB,EAAED,eAAe,GAAG,CADhC;AAEL,MAAA,kBAAkB,EAAEG,IAFf;AAGL,MAAA,UAAU,EAAED,UAHP;AAIL,MAAA,gBAAgB,EAAER,YAAY,GAAG,CAAH,GAAO;AAJhC,OAML,MAAC,UAAD,QACIY,IAAD,IAAU;AACT,aAAOA,IAAI,CAACC,QAAL,IAAiB,4BACtB,MAAC,yBAAD;AACE,QAAA,OAAO,EAAEtB,UADX;AAEE,QAAA,QAAQ,EAAEG,CAAC,CAAC,YAAD,CAFb;AAGE,QAAA,WAAW,EAAE,MAAC,KAAD;AACX,UAAA,OAAO,EAAC,iCADG;AAEX,UAAA,QAAQ,EAAC,8EAFE;AAGX,UAAA,UAAU,EAAE;AACVoB,YAAAA,MAAM,EAAE,MAAC,UAAD;AADE,WAHD;AAMX,UAAA,MAAM,EAAE;AACNC,YAAAA,MAAM,EAAE,GADF;AAENC,YAAAA,MAAM,EAAEd;AAFF;AANG,UAHf;AAcE,QAAA,QAAQ,EAAEU,IAAI,CAACK;AAdjB,QADsB,CAAxB;AAkBD,KApBH,CANK,EAqCJ,CAACjB,YAAD,IAAiB,4BAChB,MAAC,UAAD,QACIY,IAAD,IAAU;AACT,aAAOA,IAAI,CAACC,QAAL,IAAiB,4BACtB,MAAC,mBAAD,OADsB,CAAxB;AAGD,KALH,CADgB,CArCb,EA8CL,MAAC,UAAD,QACID,IAAD,IAAU;AACT,aAAOA,IAAI,CAACC,QAAL,IAAiB,4BACrBjB,MAAM,KAAK,MAAX,GACC,MAAC,eAAD;AACE,QAAA,QAAQ,EAAEgB,IAAI,CAACK;AADjB,QADD,GAIC,MAAC,iBAAD;AACE,QAAA,QAAQ,EAAEL,IAAI,CAACK,QADjB;AAEE,QAAA,YAAY,EAAEL,IAAI,CAACL;AAFrB,QALoB,CAAxB;AAWD,KAbH,CA9CK,EA6DL,MAAC,UAAD,QACIK,IAAD,IAAU;AACT,aAAOA,IAAI,CAACC,QAAL,IAAiB,4BACrBjB,MAAM,KAAK,MAAX,GACC,MAAC,kBAAD;AACE,QAAA,QAAQ,EAAEgB,IAAI,CAACK;AADjB,QADD,GAIC,MAAC,oBAAD;AACE,QAAA,QAAQ,EAAEL,IAAI,CAACK,QADjB;AAEE,QAAA,YAAY,EAAEL,IAAI,CAACL;AAFrB,QALoB,CAAxB;AAWD,KAbH,CA7DK,EA4EL,MAAC,UAAD,QACIK,IAAD,IAAU;AACT,aAAOA,IAAI,CAACC,QAAL,IAAiB,4BACtB,MAAC,aAAD,OADsB,CAAxB;AAGD,KALH,CA5EK,CAAP;AAoFD,GArGL,CALK,CAAP;AA8GD","sourcesContent":["import React, { useContext } from 'react'\nimport { useRouter } from 'next/router'\nimport { Wizard, WizardStep } from 'react-wizard-primitive'\n\nimport { Trans, useTranslation } from 'lib/../i18n'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { ExecuteCryptoDeposit } from 'lib/components/ExecuteCryptoDeposit'\nimport { ConfirmFiatDeposit } from 'lib/components/ConfirmFiatDeposit'\nimport { DepositCryptoForm } from 'lib/components/DepositCryptoForm'\nimport { DepositFiatForm } from 'lib/components/DepositFiatForm'\nimport { DepositWizardSignIn } from 'lib/components/DepositWizardSignIn'\n// import { FiatOrCryptoForm } from 'lib/components/FiatOrCryptoForm'\nimport { Meta } from 'lib/components/Meta'\nimport { OrderComplete } from 'lib/components/OrderComplete'\nimport { PoolNumber } from 'lib/components/PoolNumber'\nimport { DepositTicketQuantityForm } from 'lib/components/DepositTicketQuantityForm'\nimport { WizardLayout } from 'lib/components/WizardLayout'\nimport { queryParamUpdater } from 'lib/utils/queryParamUpdater'\n\nimport WalletIcon from 'assets/images/icon-wallet.svg'\n\nexport function DepositWizardContainer(props) {\n  const { t } = useTranslation()\n  const router = useRouter()\n  \n  const method = router.query.method\n  const quantity = router.query.quantity\n\n  let initialStepIndex = 0\n  if (quantity) {\n    initialStepIndex = 1\n  }\n  if (method) {\n    initialStepIndex = 2\n  }\n\n  const { usersAddress } = useContext(AuthControllerContext)\n  const { pool } = useContext(PoolDataContext)\n\n  const tickerUpcased = pool?.underlyingCollateralSymbol?.toUpperCase()\n  \n  return <>\n    <Meta\n      title={t('deposit')}\n    />\n\n    <Wizard\n      initialStepIndex={initialStepIndex}\n    >\n      {\n        (wizard) => {\n          const { activeStepIndex, previousStep, moveToStep } = wizard\n\n          const back = (e) => {\n            if (method) {\n              queryParamUpdater.remove(router, 'method')\n            } else if (quantity) {\n              queryParamUpdater.remove(router, 'quantity')\n            }\n            \n            previousStep()\n          }\n\n          return <WizardLayout\n            currentWizardStep={activeStepIndex + 1}\n            handlePreviousStep={back}\n            moveToStep={moveToStep}\n            totalWizardSteps={usersAddress ? 4 : 5}\n          >\n            <WizardStep>\n              {(step) => {\n                return step.isActive && <>\n                  <DepositTicketQuantityForm\n                    iconSrc={WalletIcon}\n                    formName={t('getTickets')}\n                    formSubName={<Trans\n                      i18nKey='amountTickerEqualsAmountTickets'\n                      defaults='$<number>{{amount}}</number> {{ticker}} = <number>{{amount}}</number> ticket'\n                      components={{\n                        number: <PoolNumber />,\n                      }}\n                      values={{\n                        amount: '1',\n                        ticker: tickerUpcased\n                      }}\n                    />}\n                    nextStep={step.nextStep}\n                  />\n                </>\n              }}\n            </WizardStep>\n            {/* <WizardStep>\n              {(step) => {\n                return step.isActive && <>\n                  <FiatOrCryptoForm\n                    nextStep={step.nextStep}\n                  />\n                </>\n              }}\n            </WizardStep> */}\n            {!usersAddress && <>\n              <WizardStep>\n                {(step) => {\n                  return step.isActive && <>\n                    <DepositWizardSignIn />\n                  </>\n                }}\n              </WizardStep>\n            </>}\n            <WizardStep>\n              {(step) => {\n                return step.isActive && <>\n                  {method === 'fiat' ?\n                    <DepositFiatForm\n                      nextStep={step.nextStep}\n                    /> :\n                    <DepositCryptoForm\n                      nextStep={step.nextStep}\n                      previousStep={step.previousStep}\n                    />\n                  }\n                </>\n              }}\n            </WizardStep>\n            <WizardStep>\n              {(step) => {\n                return step.isActive && <>\n                  {method === 'fiat' ?\n                    <ConfirmFiatDeposit\n                      nextStep={step.nextStep}\n                    /> :\n                    <ExecuteCryptoDeposit\n                      nextStep={step.nextStep}\n                      previousStep={step.previousStep}\n                    />\n                  }\n                </>\n              }}\n            </WizardStep>\n            <WizardStep>\n              {(step) => {\n                return step.isActive && <>\n                  <OrderComplete />\n                </>\n              }}\n            </WizardStep>\n          </WizardLayout>\n        }\n      }\n    </Wizard>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
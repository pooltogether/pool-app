{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useContext, useState } from 'react';\nimport { useAtom } from 'jotai';\nimport { PlayerDataContext } from 'lib/components/contextProviders/PlayerDataContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom';\n\nvar debug = require('debug')('pool-app:TxRefetchListener');\n\nexport function TxRefetchListener(props) {\n  _s();\n\n  var _useAtom = useAtom(transactionsAtom),\n      _useAtom2 = _slicedToArray(_useAtom, 1),\n      transactions = _useAtom2[0];\n\n  var _useState = useState([]),\n      storedPendingTransactions = _useState[0],\n      setStoredPendingTransactions = _useState[1];\n\n  var _useContext = useContext(PoolDataContext),\n      refetchPoolsData = _useContext.refetchPoolsData;\n\n  var _useContext2 = useContext(PlayerDataContext),\n      refetchPlayerData = _useContext2.refetchPlayerData,\n      refetchSponsorData = _useContext2.refetchSponsorData;\n\n  var pendingTransactions = transactions.filter(function (t) {\n    return !t.completed && !t.cancelled;\n  });\n\n  var runRefetch = function runRefetch(tx) {\n    var playerBalanceTransaction = tx.method === 'depositTo' || tx.method === 'transfer' || tx.method === 'approve' || tx.method === 'withdrawInstantlyFrom' || tx.method === 'updateAndClaimDrips';\n    var poolStateTransaction = tx.method === 'startAward' || tx.method === 'completeAward';\n\n    if (playerBalanceTransaction) {\n      // we don't know when the Graph will have processed the new block data or when it has\n      // so simply query a few times for the updated data\n      setTimeout(function () {\n        refetchPlayerData();\n        refetchSponsorData();\n        debug('refetch!');\n      }, 2000);\n      setTimeout(function () {\n        refetchPlayerData();\n        refetchSponsorData();\n        debug('refetch!');\n      }, 8000);\n      setTimeout(function () {\n        refetchPlayerData();\n        refetchSponsorData();\n        debug('refetch!');\n      }, 16000);\n    } else if (poolStateTransaction) {\n      setTimeout(function () {\n        refetchPoolsData();\n        debug('refetch pool/prize!');\n      }, 6000);\n    }\n  };\n\n  storedPendingTransactions.forEach(function (tx) {\n    var storedTxId = tx.id;\n    var currentTxState = transactions.find(function (_tx) {\n      return _tx.id === storedTxId;\n    });\n\n    if (currentTxState && currentTxState.completed && !currentTxState.error && !currentTxState.cancelled) {\n      runRefetch(tx);\n    }\n  });\n\n  if (pendingTransactions.length !== storedPendingTransactions.length) {\n    setStoredPendingTransactions(pendingTransactions);\n  }\n\n  return null;\n}\n\n_s(TxRefetchListener, \"9AfMNfCpuf3Hg/jYZ+ZkY7w4no8=\", false, function () {\n  return [useAtom];\n});\n\n_c = TxRefetchListener;\n\nvar _c;\n\n$RefreshReg$(_c, \"TxRefetchListener\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/TxRefetchListener.jsx"],"names":["useContext","useState","useAtom","PlayerDataContext","PoolDataContext","transactionsAtom","debug","require","TxRefetchListener","props","transactions","storedPendingTransactions","setStoredPendingTransactions","refetchPoolsData","refetchPlayerData","refetchSponsorData","pendingTransactions","filter","t","completed","cancelled","runRefetch","tx","playerBalanceTransaction","method","poolStateTransaction","setTimeout","forEach","storedTxId","id","currentTxState","find","_tx","error","length"],"mappings":"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","sourcesContent":["import { useContext, useState } from 'react'\nimport { useAtom } from 'jotai'\n\nimport { PlayerDataContext } from 'lib/components/contextProviders/PlayerDataContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom'\n\nconst debug = require('debug')('pool-app:TxRefetchListener')\n\nexport function TxRefetchListener(props) {\n  const [transactions] = useAtom(transactionsAtom)\n\n  const [storedPendingTransactions, setStoredPendingTransactions] = useState([])\n\n  const { refetchPoolsData } = useContext(PoolDataContext)\n  const { refetchPlayerData, refetchSponsorData } = useContext(PlayerDataContext)\n\n  const pendingTransactions = transactions\n    .filter(t => !t.completed && !t.cancelled)\n\n\n  const runRefetch = (tx) => {\n    const playerBalanceTransaction = tx.method === 'depositTo' ||\n      tx.method === 'transfer' ||\n      tx.method === 'approve' ||\n      tx.method === 'withdrawInstantlyFrom' ||\n      tx.method === 'updateAndClaimDrips'\n\n    const poolStateTransaction = tx.method === 'startAward' ||\n      tx.method === 'completeAward'\n\n    if (playerBalanceTransaction) {\n      // we don't know when the Graph will have processed the new block data or when it has\n      // so simply query a few times for the updated data\n      setTimeout(() => {\n        refetchPlayerData()\n        refetchSponsorData()\n        debug('refetch!')\n      }, 2000)\n\n      setTimeout(() => {\n        refetchPlayerData()\n        refetchSponsorData()\n        debug('refetch!')\n      }, 8000)\n\n      setTimeout(() => {\n        refetchPlayerData()\n        refetchSponsorData()\n        debug('refetch!')\n      }, 16000)\n    } else if (poolStateTransaction) {\n      setTimeout(() => {\n        refetchPoolsData()\n        debug('refetch pool/prize!')\n      }, 6000)\n    }\n  }\n\n  storedPendingTransactions.forEach(tx => {\n    const storedTxId = tx.id\n    const currentTxState = transactions.find((_tx) => _tx.id === storedTxId)\n\n    if (\n      currentTxState &&\n      currentTxState.completed &&\n      !currentTxState.error && \n      !currentTxState.cancelled\n    ) {\n      runRefetch(tx)\n    }\n  })\n\n  if (pendingTransactions.length !== storedPendingTransactions.length) {\n    setStoredPendingTransactions(pendingTransactions)\n  }\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { isEmpty } from 'lodash';\nimport { POOLS } from 'lib/constants';\nimport { compilePool } from 'lib/services/compilePool';\nexport var compilePools = function compilePools(chainId, contractAddresses, queryCache, graphPoolData, genericChainData) {\n  var pools = [];\n\n  if (!isEmpty(genericChainData)) {\n    // if (!graphDataLoading && !isEmpty(genericChainData)) {\n    POOLS.forEach(function (POOL) {\n      var _pool = compilePool(chainId, POOL, contractAddresses.daiPool, queryCache, genericChainData.dai, graphPoolData.daiPool);\n\n      if (_pool === null || _pool === void 0 ? void 0 : _pool.id) {\n        pools.push(_pool);\n      }\n    });\n  }\n\n  return pools;\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/services/compilePools.jsx"],"names":["isEmpty","POOLS","compilePool","compilePools","chainId","contractAddresses","queryCache","graphPoolData","genericChainData","pools","forEach","POOL","_pool","daiPool","dai","id","push"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AAEA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,WAAT,QAA4B,0BAA5B;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAC1BC,OAD0B,EAE1BC,iBAF0B,EAG1BC,UAH0B,EAI1BC,aAJ0B,EAK1BC,gBAL0B,EAMvB;AACH,MAAIC,KAAK,GAAG,EAAZ;;AAEA,MAAI,CAACT,OAAO,CAACQ,gBAAD,CAAZ,EAAgC;AAChC;AACEP,IAAAA,KAAK,CAACS,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpB,UAAMC,KAAK,GAAGV,WAAW,CACvBE,OADuB,EAEvBO,IAFuB,EAGvBN,iBAAiB,CAACQ,OAHK,EAIvBP,UAJuB,EAKvBE,gBAAgB,CAACM,GALM,EAMvBP,aAAa,CAACM,OANS,CAAzB;;AASA,UAAID,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEG,EAAX,EAAe;AACbN,QAAAA,KAAK,CAACO,IAAN,CAAWJ,KAAX;AACD;AACF,KAbD;AAcD;;AAED,SAAOH,KAAP;AACD,CA5BM","sourcesContent":["import { isEmpty } from 'lodash'\n\nimport { POOLS } from 'lib/constants'\nimport { compilePool } from 'lib/services/compilePool'\n\nexport const compilePools = (\n  chainId,\n  contractAddresses,\n  queryCache,\n  graphPoolData,\n  genericChainData\n) => {\n  let pools = []\n\n  if (!isEmpty(genericChainData)) {\n  // if (!graphDataLoading && !isEmpty(genericChainData)) {\n    POOLS.forEach(POOL => {\n      const _pool = compilePool(\n        chainId,\n        POOL,\n        contractAddresses.daiPool,\n        queryCache,\n        genericChainData.dai,\n        graphPoolData.daiPool,\n      )\n\n      if (_pool?.id) {\n        pools.push(_pool)\n      }\n    })\n  }\n\n  return pools\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useContext } from 'react';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { useUniswapTokensQuery } from 'lib/hooks/useUniswapTokensQuery';\nexport function UniswapData(props) {\n  let blockNumber = props.blockNumber || -1;\n  const {\n    children,\n    poolAddress,\n    addresses\n  } = props;\n  const {\n    chainId,\n    pauseQueries\n  } = useContext(AuthControllerContext);\n  const {\n    status,\n    data,\n    error,\n    isFetching\n  } = useUniswapTokensQuery(pauseQueries, chainId, poolAddress, blockNumber, addresses);\n\n  if (error) {\n    console.warn(error);\n  }\n\n  return children({\n    data\n  });\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/UniswapData.jsx"],"names":["useContext","AuthControllerContext","useUniswapTokensQuery","UniswapData","props","blockNumber","children","poolAddress","addresses","chainId","pauseQueries","status","data","error","isFetching","console","warn"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,qBAAT,QAAsC,iCAAtC;AAEA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACjC,MAAIC,WAAW,GAAGD,KAAK,CAACC,WAAN,IAAqB,CAAC,CAAxC;AAEA,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA;AAHI,MAIFJ,KAJJ;AAMA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA4BV,UAAU,CAACC,qBAAD,CAA5C;AAEA,QAAM;AAAEU,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB,MAAsCZ,qBAAqB,CAC/DQ,YAD+D,EAE/DD,OAF+D,EAG/DF,WAH+D,EAI/DF,WAJ+D,EAK/DG,SAL+D,CAAjE;;AAQA,MAAIK,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACC,IAAR,CAAaH,KAAb;AACD;;AAED,SAAOP,QAAQ,CAAC;AACdM,IAAAA;AADc,GAAD,CAAf;AAID","sourcesContent":["import { useContext } from 'react'\n\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { useUniswapTokensQuery } from 'lib/hooks/useUniswapTokensQuery'\n\nexport function UniswapData(props) {\n  let blockNumber = props.blockNumber || -1\n\n  const {\n    children,\n    poolAddress,\n    addresses,\n  } = props\n\n  const { chainId, pauseQueries } = useContext(AuthControllerContext)\n\n  const { status, data, error, isFetching } = useUniswapTokensQuery(\n    pauseQueries,\n    chainId,\n    poolAddress,\n    blockNumber,\n    addresses\n  )\n\n  if (error) {\n    console.warn(error)\n  }\n\n  return children({ \n    data\n  })\n\n}\n"]},"metadata":{},"sourceType":"module"}
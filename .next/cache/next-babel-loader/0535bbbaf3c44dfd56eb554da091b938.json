{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { MAINNET_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { getPoolDripsData } from 'lib/fetchers/getPoolDripsData';\nexport function usePoolDripsQuery(pauseQueries, chainId, pool) {\n  _s();\n\n  var _pool$prizeStrategy;\n\n  var blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n  var prizeStrategyAddress = pool === null || pool === void 0 ? void 0 : (_pool$prizeStrategy = pool.prizeStrategy) === null || _pool$prizeStrategy === void 0 ? void 0 : _pool$prizeStrategy.id;\n  var refetchInterval = !pauseQueries && blockNumber === -1 ? MAINNET_POLLING_INTERVAL : false;\n  return useQuery([QUERY_KEYS.poolDripsQuery, chainId, prizeStrategyAddress, blockNumber], /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", getPoolDripsData(chainId, prizeStrategyAddress, blockNumber));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), {\n    enabled: !pauseQueries && chainId && prizeStrategyAddress && blockNumber,\n    refetchInterval: refetchInterval\n  });\n}\n\n_s(usePoolDripsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/usePoolDripsQuery.js"],"names":["useQuery","MAINNET_POLLING_INTERVAL","QUERY_KEYS","getPoolDripsData","usePoolDripsQuery","pauseQueries","chainId","pool","blockNumber","prizeStrategyAddress","prizeStrategy","id","refetchInterval","poolDripsQuery","enabled"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,gBAAT,QAAiC,+BAAjC;AAEA,OAAO,SAASC,iBAAT,CAA2BC,YAA3B,EAAyCC,OAAzC,EAAkDC,IAAlD,EAA0E;AAAA;;AAAA;;AAAA,MAAlBC,WAAkB,uEAAJ,CAAC,CAAG;AAC/E,MAAMC,oBAAoB,GAAGF,IAAH,aAAGA,IAAH,8CAAGA,IAAI,CAAEG,aAAT,wDAAG,oBAAqBC,EAAlD;AAEA,MAAMC,eAAe,GAAG,CAACP,YAAD,IAAkBG,WAAW,KAAK,CAAC,CAAnC,GACtBP,wBADsB,GAEtB,KAFF;AAIA,SAAOD,QAAQ,CACb,CAACE,UAAU,CAACW,cAAZ,EAA4BP,OAA5B,EAAqCG,oBAArC,EAA2DD,WAA3D,CADa,wEAEb;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAqBL,gBAAgB,CAACG,OAAD,EAAUG,oBAAV,EAAgCD,WAAhC,CAArC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFa,IAGb;AACEM,IAAAA,OAAO,EAAE,CAACT,YAAD,IAAiBC,OAAjB,IAA4BG,oBAA5B,IAAoDD,WAD/D;AAEEI,IAAAA,eAAe,EAAfA;AAFF,GAHa,CAAf;AAQD;;GAfeR,iB;UAOPJ,Q","sourcesContent":["import { useQuery } from 'react-query'\n\nimport {\n  MAINNET_POLLING_INTERVAL,\n  QUERY_KEYS\n} from 'lib/constants'\nimport { getPoolDripsData } from 'lib/fetchers/getPoolDripsData'\n\nexport function usePoolDripsQuery(pauseQueries, chainId, pool, blockNumber = -1) {\n  const prizeStrategyAddress = pool?.prizeStrategy?.id\n\n  const refetchInterval = !pauseQueries && (blockNumber === -1) ?\n    MAINNET_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    [QUERY_KEYS.poolDripsQuery, chainId, prizeStrategyAddress, blockNumber],\n    async () => { return getPoolDripsData(chainId, prizeStrategyAddress, blockNumber) },\n    {\n      enabled: !pauseQueries && chainId && prizeStrategyAddress && blockNumber,\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport { SUPPORTED_CHAIN_IDS } from 'lib/constants';\nimport { useTranslation } from 'lib/../i18n';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { Modal } from 'lib/components/Modal';\nimport { chainIdToNetworkName } from 'lib/utils/chainIdToNetworkName';\nimport { networkBgColorClassname } from 'lib/utils/networkColorClassnames';\nimport { networkNameToChainId } from 'lib/utils/networkNameToChainId';\n\nvar onlyUnique = function onlyUnique(value, index, self) {\n  return self.indexOf(value) === index;\n};\n\nexport function WrongNetworkModal(props) {\n  _s();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(false),\n      bypassed = _useState[0],\n      setBypassed = _useState[1];\n\n  var _useContext = useContext(AuthControllerContext),\n      networkName = _useContext.networkName,\n      supportedNetwork = _useContext.supportedNetwork;\n\n  var supportedNetworkNames = SUPPORTED_CHAIN_IDS.map(function (_chainId) {\n    return chainIdToNetworkName(_chainId);\n  });\n  supportedNetworkNames = supportedNetworkNames.filter(onlyUnique).filter(function (name) {\n    return name !== 'localhost';\n  });\n\n  var handleClose = function handleClose(e) {\n    e.preventDefault();\n    setBypassed(true);\n  };\n\n  if (supportedNetwork) {\n    return null;\n  }\n\n  return __jsx(React.Fragment, null, bypassed && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"r-0 l-0 fixed w-10/12 sm:w-1/4 bg-red px-4 py-2 font-bold mx-auto text-center rounded-lg z-50 text-white\",\n    style: {\n      bottom: '10vh'\n    }\n  }, t('unsupportedNetwork'), \" \", networkName)), __jsx(Modal, {\n    handleClose: handleClose,\n    visible: !supportedNetwork && !bypassed,\n    header: t('ethereumNetworkMismatch')\n  }, t('yourEthereumNetworkIsUnsupported'), \" \", __jsx(\"div\", {\n    className: \"inline-flex items-start justify-start font-bold text-white text-center mt-2\"\n  }, supportedNetworkNames.map(function (name) {\n    return __jsx(\"div\", {\n      key: \"network-\".concat(name),\n      className: \"inline-block bg-\".concat(networkBgColorClassname(networkNameToChainId(name)), \" px-2 py-1 w-24 rounded-full mr-2 mt-2 mr-2\")\n    }, name);\n  }))));\n}\n\n_s(WrongNetworkModal, \"dAIkB1drVbYmKIh1P9pcr8o/gCk=\", false, function () {\n  return [useTranslation];\n});\n\n_c = WrongNetworkModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"WrongNetworkModal\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/WrongNetworkModal.jsx"],"names":["React","useContext","useState","SUPPORTED_CHAIN_IDS","useTranslation","AuthControllerContext","Modal","chainIdToNetworkName","networkBgColorClassname","networkNameToChainId","onlyUnique","value","index","self","indexOf","WrongNetworkModal","props","t","bypassed","setBypassed","networkName","supportedNetwork","supportedNetworkNames","map","_chainId","filter","name","handleClose","e","preventDefault","bottom"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,SACEC,mBADF,QAEO,eAFP;AAGA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,SAASC,oBAAT,QAAqC,gCAArC;AACA,SAASC,uBAAT,QAAwC,kCAAxC;AACA,SAASC,oBAAT,QAAqC,gCAArC;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAwB;AACzC,SAAOA,IAAI,CAACC,OAAL,CAAaH,KAAb,MAAwBC,KAA/B;AACD,CAFD;;AAIA,OAAO,SAASG,iBAAT,CAA2BC,KAA3B,EAAkC;AAAA;;AAAA,wBACzBZ,cAAc,EADW;AAAA,MAC/Ba,CAD+B,mBAC/BA,CAD+B;;AAAA,kBAGPf,QAAQ,CAAC,KAAD,CAHD;AAAA,MAGhCgB,QAHgC;AAAA,MAGtBC,WAHsB;;AAAA,oBAKGlB,UAAU,CAACI,qBAAD,CALb;AAAA,MAK/Be,WAL+B,eAK/BA,WAL+B;AAAA,MAKlBC,gBALkB,eAKlBA,gBALkB;;AAOvC,MAAIC,qBAAqB,GAAGnB,mBAAmB,CAACoB,GAApB,CAAwB,UAAAC,QAAQ;AAAA,WAC1DjB,oBAAoB,CAACiB,QAAD,CADsC;AAAA,GAAhC,CAA5B;AAGAF,EAAAA,qBAAqB,GAAGA,qBAAqB,CAACG,MAAtB,CAA6Bf,UAA7B,EACrBe,MADqB,CACd,UAAAC,IAAI;AAAA,WAAIA,IAAI,KAAK,WAAb;AAAA,GADU,CAAxB;;AAIA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAAO;AACzBA,IAAAA,CAAC,CAACC,cAAF;AAEAV,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAJD;;AAMA,MAAIE,gBAAJ,EAAsB;AACpB,WAAO,IAAP;AACD;;AAED,SAAO,4BACJH,QAAQ,IAAI,4BACX;AACE,IAAA,SAAS,EAAC,0GADZ;AAEE,IAAA,KAAK,EAAE;AACLY,MAAAA,MAAM,EAAE;AADH;AAFT,KAMGb,CAAC,CAAC,oBAAD,CANJ,OAM6BG,WAN7B,CADW,CADR,EAYL,MAAC,KAAD;AACE,IAAA,WAAW,EAAEO,WADf;AAEE,IAAA,OAAO,EAAE,CAACN,gBAAD,IAAqB,CAACH,QAFjC;AAGE,IAAA,MAAM,EAAED,CAAC,CAAC,yBAAD;AAHX,KAKGA,CAAC,CAAC,kCAAD,CALJ,OAK0C;AACtC,IAAA,SAAS,EAAC;AAD4B,KAGrCK,qBAAqB,CAACC,GAAtB,CAA0B,UAAAG,IAAI,EAAI;AACjC,WAAO;AACL,MAAA,GAAG,oBAAaA,IAAb,CADE;AAEL,MAAA,SAAS,4BAAqBlB,uBAAuB,CACnDC,oBAAoB,CAACiB,IAAD,CAD+B,CAA5C;AAFJ,OAMJA,IANI,CAAP;AAQD,GATA,CAHqC,CAL1C,CAZK,CAAP;AAiCD;;GAzDeX,iB;UACAX,c;;;KADAW,iB","sourcesContent":["import React, { useContext, useState } from 'react'\n\nimport {\n  SUPPORTED_CHAIN_IDS,\n} from 'lib/constants'\nimport { useTranslation } from 'lib/../i18n'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { Modal } from 'lib/components/Modal'\nimport { chainIdToNetworkName } from 'lib/utils/chainIdToNetworkName'\nimport { networkBgColorClassname } from 'lib/utils/networkColorClassnames'\nimport { networkNameToChainId } from 'lib/utils/networkNameToChainId'\n\nconst onlyUnique = (value, index, self) => {\n  return self.indexOf(value) === index\n}\n\nexport function WrongNetworkModal(props) {\n  const { t } = useTranslation()\n\n  const [bypassed, setBypassed] = useState(false)\n\n  const { networkName, supportedNetwork } = useContext(AuthControllerContext)\n\n  let supportedNetworkNames = SUPPORTED_CHAIN_IDS.map(_chainId => \n    chainIdToNetworkName(_chainId)\n  )\n  supportedNetworkNames = supportedNetworkNames.filter(onlyUnique)\n    .filter(name => name !== 'localhost')\n\n\n  const handleClose = (e) => {\n    e.preventDefault()\n\n    setBypassed(true)\n  }\n\n  if (supportedNetwork) {\n    return null\n  }\n  \n  return <>\n    {bypassed && <>\n      <div\n        className='r-0 l-0 fixed w-10/12 sm:w-1/4 bg-red px-4 py-2 font-bold mx-auto text-center rounded-lg z-50 text-white'\n        style={{\n          bottom: '10vh'\n        }}\n      >\n        {t('unsupportedNetwork')} {networkName}\n      </div>\n    </>}\n\n    <Modal\n      handleClose={handleClose}\n      visible={!supportedNetwork && !bypassed}\n      header={t('ethereumNetworkMismatch')}\n    >\n      {t('yourEthereumNetworkIsUnsupported')} <div\n        className='inline-flex items-start justify-start font-bold text-white text-center mt-2'\n      >\n        {supportedNetworkNames.map(name => {\n          return <div\n            key={`network-${name}`}\n            className={`inline-block bg-${networkBgColorClassname(\n              networkNameToChainId(name)\n            )} px-2 py-1 w-24 rounded-full mr-2 mt-2 mr-2`}\n          >\n            {name}\n          </div>\n        })}\n      </div>\n    </Modal>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport Cookies from 'js-cookie';\nimport { useRouter } from 'next/router';\nimport { useQueryCache } from 'react-query';\nimport { COOKIE_OPTIONS, STORED_CHAIN_ID_KEY, SUPPORTED_CHAIN_IDS, SELECTED_WALLET_COOKIE_KEY, MAGIC_EMAIL } from 'lib/constants';\nimport { MagicContext } from 'lib/components/contextProviders/MagicContextProvider';\nimport { WalletContext } from 'lib/components/contextProviders/WalletContextProvider';\nimport { chainIdToNetworkName } from 'lib/utils/chainIdToNetworkName';\nimport { getChainId } from 'lib/utils/getChainId';\nimport { queryParamUpdater } from 'lib/utils/queryParamUpdater';\n\nconst debug = require('debug')('AuthControllerContextProvider');\n\nexport const AuthControllerContext = /*#__PURE__*/React.createContext(); // This AuthController allows us to have one place to interface with both the Magic context and\n// the Onboardjs/Wallet context - this provides us with more control of what happens to\n// both when one is signed in / signed out of and avoids circular dependencies\n//\n// This also provides a unified authentication pattern to get the usersAddress\n// and ethers provider for transactions\n\nexport function AuthControllerContextProvider(props) {\n  const {\n    children\n  } = props;\n  const router = useRouter();\n  const queryCache = useQueryCache();\n  const {\n    0: changingNetwork,\n    1: setChangingNetwork\n  } = useState(false);\n  const {\n    onboard,\n    onboardAddress,\n    onboardBalance,\n    onboardNetwork,\n    onboardProvider,\n    onboardWallet,\n    reconnectWallet,\n    connectWallet,\n    disconnectWallet\n  } = useContext(WalletContext);\n  const {\n    address,\n    magic,\n    signIn,\n    signedIn,\n    signOut: magicSignOut\n  } = useContext(MagicContext); // TODO: extend this to also pull the eth balance from the magic session\n  // may need state / ethereum event listener\n\n  const ethBalance = onboardBalance || null; // const [ethBalance, setEthBalance] = useState(ethers.utils.bigNumberify(0))\n  // useEffect(() => {\n  //   if (ethBalance) {\n  //     setEthBalance(ethers.utils.bigNumberify(ethBalance))\n  //   }\n  // }, [])\n\n  let walletName = 'Unknown';\n\n  if (magic && signedIn) {\n    walletName = 'Magic';\n  } else if (onboardWallet) {\n    walletName = onboardWallet.name;\n  }\n\n  const defaultChainId = getChainId(process.env.NEXT_JS_DEFAULT_ETHEREUM_NETWORK_NAME);\n  const {\n    0: chainId,\n    1: setChainId\n  } = useState(defaultChainId);\n  const {\n    0: provider,\n    1: setProvider\n  } = useState();\n  const {\n    0: usersAddress,\n    1: setUsersAddress\n  } = useState();\n  const {\n    0: magicAutoSignInAlreadyExecuted,\n    1: setMagicAutoSignInAlreadyExecuted\n  } = useState(false);\n  useEffect(() => {\n    let provider = onboardProvider; // if (!provider && signedIn) {\n    //   provider = provider\n    // }\n\n    setProvider(provider);\n  }, [onboardProvider, signedIn]);\n  useEffect(() => {\n    const storeChainIdCookie = async newChainId => {\n      await Cookies.set(STORED_CHAIN_ID_KEY, newChainId, COOKIE_OPTIONS);\n    };\n\n    const updateChainId = async () => {\n      if (onboardNetwork && onboardNetwork !== chainId) {\n        queryCache.clear();\n        setChangingNetwork(true);\n        setChainId(onboardNetwork);\n        await storeChainIdCookie(onboardNetwork);\n        setTimeout(() => {\n          setChangingNetwork(false);\n        }, 200);\n      }\n    };\n\n    updateChainId();\n  }, [onboardNetwork]);\n  useEffect(() => {\n    let usersAddress;\n\n    if (onboardAddress) {\n      usersAddress = onboardAddress;\n    }\n\n    if (!usersAddress && address) {\n      usersAddress = address;\n    }\n\n    setUsersAddress(usersAddress);\n  }, [address, onboardAddress]);\n\n  const postDisconnectRedirect = () => {\n    queryParamUpdater.add(router, {\n      signIn: '1'\n    });\n  };\n\n  const signOut = async e => {\n    if (e) {\n      e.preventDefault();\n    } // magicSignOut()\n\n\n    disconnectWallet();\n    postDisconnectRedirect();\n  };\n\n  const signInMagic = async (formEmail, postSignInCallback) => {\n    signIn(formEmail, postSignInCallback);\n    disconnectWallet();\n  };\n\n  useEffect(() => {\n    if (magic) {\n      const emailFromCookies = Cookies.get(MAGIC_EMAIL);\n\n      const autoSignInMagic = async () => {\n        if (await magic.user.isLoggedIn()) {\n          signInMagic(emailFromCookies);\n        }\n      };\n\n      if (emailFromCookies && !magicAutoSignInAlreadyExecuted) {\n        autoSignInMagic();\n      }\n\n      setMagicAutoSignInAlreadyExecuted(true);\n    }\n  }, [magic]);\n  useEffect(() => {\n    if (onboard) {\n      debug('inside onboard UseEffect if!');\n\n      const autoSignInWallet = async () => {\n        const previouslySelectedWallet = Cookies.get(SELECTED_WALLET_COOKIE_KEY);\n\n        if (previouslySelectedWallet !== undefined) {\n          debug('running autosign in!');\n          reconnectWallet(previouslySelectedWallet);\n        }\n      };\n\n      autoSignInWallet();\n    }\n  }, [onboard]);\n  const networkName = chainIdToNetworkName(chainId);\n  const supportedNetwork = SUPPORTED_CHAIN_IDS.includes(chainId);\n  const pauseQueries = !supportedNetwork || changingNetwork;\n  return __jsx(AuthControllerContext.Provider, {\n    value: {\n      changingNetwork,\n      ethBalance,\n      chainId,\n      pauseQueries,\n      provider,\n      usersAddress,\n      walletName,\n      signOut,\n      signInMagic,\n      connectWallet,\n      networkName,\n      supportedNetwork\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/contextProviders/AuthControllerContextProvider.jsx"],"names":["React","useEffect","useState","useContext","Cookies","useRouter","useQueryCache","COOKIE_OPTIONS","STORED_CHAIN_ID_KEY","SUPPORTED_CHAIN_IDS","SELECTED_WALLET_COOKIE_KEY","MAGIC_EMAIL","MagicContext","WalletContext","chainIdToNetworkName","getChainId","queryParamUpdater","debug","require","AuthControllerContext","createContext","AuthControllerContextProvider","props","children","router","queryCache","changingNetwork","setChangingNetwork","onboard","onboardAddress","onboardBalance","onboardNetwork","onboardProvider","onboardWallet","reconnectWallet","connectWallet","disconnectWallet","address","magic","signIn","signedIn","signOut","magicSignOut","ethBalance","walletName","name","defaultChainId","process","env","NEXT_JS_DEFAULT_ETHEREUM_NETWORK_NAME","chainId","setChainId","provider","setProvider","usersAddress","setUsersAddress","magicAutoSignInAlreadyExecuted","setMagicAutoSignInAlreadyExecuted","storeChainIdCookie","newChainId","set","updateChainId","clear","setTimeout","postDisconnectRedirect","add","e","preventDefault","signInMagic","formEmail","postSignInCallback","emailFromCookies","get","autoSignInMagic","user","isLoggedIn","autoSignInWallet","previouslySelectedWallet","undefined","networkName","supportedNetwork","includes","pauseQueries"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react'\nimport Cookies from 'js-cookie'\nimport { useRouter } from 'next/router'\nimport { useQueryCache } from 'react-query'\n\nimport {\n  COOKIE_OPTIONS,\n  STORED_CHAIN_ID_KEY,\n  SUPPORTED_CHAIN_IDS,\n  SELECTED_WALLET_COOKIE_KEY,\n  MAGIC_EMAIL,\n} from 'lib/constants'\nimport { MagicContext } from 'lib/components/contextProviders/MagicContextProvider'\nimport { WalletContext } from 'lib/components/contextProviders/WalletContextProvider'\nimport { chainIdToNetworkName } from 'lib/utils/chainIdToNetworkName'\nimport { getChainId } from 'lib/utils/getChainId'\nimport { queryParamUpdater } from 'lib/utils/queryParamUpdater'\n\nconst debug = require('debug')('AuthControllerContextProvider')\n\nexport const AuthControllerContext = React.createContext()\n\n// This AuthController allows us to have one place to interface with both the Magic context and\n// the Onboardjs/Wallet context - this provides us with more control of what happens to\n// both when one is signed in / signed out of and avoids circular dependencies\n//\n// This also provides a unified authentication pattern to get the usersAddress\n// and ethers provider for transactions\nexport function AuthControllerContextProvider(props) {\n  const { children } = props\n\n  const router = useRouter()\n  const queryCache = useQueryCache()\n\n  const [changingNetwork, setChangingNetwork] = useState(false)\n\n  const {\n    onboard,\n    onboardAddress,\n    onboardBalance,\n    onboardNetwork,\n    onboardProvider,\n    onboardWallet,\n    reconnectWallet,\n    connectWallet,\n    disconnectWallet\n  } = useContext(WalletContext)\n\n  const { address, magic, signIn, signedIn, signOut: magicSignOut } = useContext(MagicContext)\n \n  // TODO: extend this to also pull the eth balance from the magic session\n  // may need state / ethereum event listener\n  const ethBalance = onboardBalance || null\n  // const [ethBalance, setEthBalance] = useState(ethers.utils.bigNumberify(0))\n  // useEffect(() => {\n  //   if (ethBalance) {\n  //     setEthBalance(ethers.utils.bigNumberify(ethBalance))\n  //   }\n  // }, [])\n\n  let walletName = 'Unknown'\n  if (magic && signedIn) {\n    walletName = 'Magic'\n  } else if (onboardWallet) {\n    walletName = onboardWallet.name\n  }\n\n  const defaultChainId = getChainId(process.env.NEXT_JS_DEFAULT_ETHEREUM_NETWORK_NAME)\n  const [chainId, setChainId] = useState(defaultChainId)\n  const [provider, setProvider] = useState()\n  const [usersAddress, setUsersAddress] = useState()\n  const [magicAutoSignInAlreadyExecuted, setMagicAutoSignInAlreadyExecuted] = useState(false)\n\n  useEffect(() => {\n    let provider = onboardProvider\n    // if (!provider && signedIn) {\n    //   provider = provider\n    // }\n    setProvider(provider)\n  }, [onboardProvider, signedIn])\n\n  useEffect(() => {\n    const storeChainIdCookie = async (newChainId) => {\n      await Cookies.set(\n        STORED_CHAIN_ID_KEY,\n        newChainId,\n        COOKIE_OPTIONS\n      )\n    }\n\n    const updateChainId = async () => {\n      if (onboardNetwork && onboardNetwork !== chainId) {\n        queryCache.clear()\n        setChangingNetwork(true)\n        \n\n        setChainId(onboardNetwork)\n        await storeChainIdCookie(onboardNetwork)\n\n\n        setTimeout(() => {\n          setChangingNetwork(false)\n        }, 200)\n      }\n    }\n\n\n    updateChainId()\n  }, [onboardNetwork])\n\n  useEffect(() => {\n    let usersAddress\n\n    if (onboardAddress) {\n      usersAddress = onboardAddress\n    }\n\n    if (!usersAddress && address) {\n      usersAddress = address\n    }\n\n    setUsersAddress(usersAddress)\n  }, [address, onboardAddress])\n\n  const postDisconnectRedirect = () => {\n    queryParamUpdater.add(router, { signIn: '1' })\n  }\n\n  const signOut = async (e) => {\n    if (e) {\n      e.preventDefault()\n    }\n\n    // magicSignOut()\n    disconnectWallet()\n\n    postDisconnectRedirect()\n  }\n\n  const signInMagic = async (formEmail, postSignInCallback) => {\n    signIn(formEmail, postSignInCallback)\n    disconnectWallet()\n  }\n\n  useEffect(() => {\n    if (magic) {\n      const emailFromCookies = Cookies.get(MAGIC_EMAIL)\n\n      const autoSignInMagic = async () => {\n        if (await magic.user.isLoggedIn()) {\n          signInMagic(emailFromCookies)\n        }\n      }\n\n      if (emailFromCookies && !magicAutoSignInAlreadyExecuted) {\n        autoSignInMagic()\n      }\n\n      setMagicAutoSignInAlreadyExecuted(true)\n    }\n\n  }, [magic])\n\n  useEffect(() => {\n    if (onboard) {\n      debug('inside onboard UseEffect if!')\n      const autoSignInWallet = async () => {\n        const previouslySelectedWallet = Cookies.get(SELECTED_WALLET_COOKIE_KEY)\n\n        if (previouslySelectedWallet !== undefined) {\n          debug('running autosign in!')\n          reconnectWallet(previouslySelectedWallet)\n        }\n      }\n\n      autoSignInWallet()\n    }\n  }, [onboard])\n\n  const networkName = chainIdToNetworkName(chainId)\n  const supportedNetwork = SUPPORTED_CHAIN_IDS.includes(chainId)\n\n  const pauseQueries = !supportedNetwork || changingNetwork\n\n  return <AuthControllerContext.Provider\n    value={{\n      changingNetwork,\n      ethBalance,\n      chainId,\n      pauseQueries,\n      provider,\n      usersAddress,\n      walletName,\n      signOut,\n      signInMagic,\n      connectWallet,\n      networkName,\n      supportedNetwork,\n    }}\n  >\n    {children}\n  </AuthControllerContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}
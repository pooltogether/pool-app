{"ast":null,"code":"import { useContext, useEffect, useState } from 'react'; // import { isEmpty } from 'lodash'\n// import { useInterval } from 'beautiful-react-hooks'\n\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { WalletContext } from 'lib/components/contextProviders/WalletContextProvider';\nimport { useEthereumErc20Query } from 'lib/hooks/useEthereumErc20Query';\nimport { useEthereumErc721Query } from 'lib/hooks/useEthereumErc721Query';\nimport { useEthereumGenericQuery } from 'lib/hooks/useEthereumGenericQuery';\n\nconst debug = require('debug')('pool-app:ChainQueries');\n\nexport function ChainQueries(props) {\n  var _poolData$daiPool, _poolData$daiPool2, _poolData$daiPool2$pr, _poolData$daiPool3, _poolData$daiPool3$pr;\n\n  const {\n    children,\n    provider,\n    poolData\n  } = props;\n  const {\n    chainId,\n    pauseQueries\n  } = useContext(AuthControllerContext);\n  const {\n    status: genericChainStatus,\n    data: genericChainData,\n    error: genericChainError,\n    isFetching: genericIsFetching\n  } = useEthereumGenericQuery({\n    pauseQueries,\n    chainId,\n    provider,\n    poolData: poolData === null || poolData === void 0 ? void 0 : poolData.daiPool\n  });\n\n  if (genericChainError) {\n    console.warn(genericChainError);\n  }\n\n  const poolAddress = poolData === null || poolData === void 0 ? void 0 : (_poolData$daiPool = poolData.daiPool) === null || _poolData$daiPool === void 0 ? void 0 : _poolData$daiPool.poolAddress;\n  const graphExternalErc20Awards = poolData === null || poolData === void 0 ? void 0 : (_poolData$daiPool2 = poolData.daiPool) === null || _poolData$daiPool2 === void 0 ? void 0 : (_poolData$daiPool2$pr = _poolData$daiPool2.prizeStrategy) === null || _poolData$daiPool2$pr === void 0 ? void 0 : _poolData$daiPool2$pr.externalErc20Awards;\n  const {\n    status: externalErc20ChainStatus,\n    data: externalErc20ChainData,\n    error: externalErc20ChainError,\n    isFetching: externalErc20IsFetching\n  } = useEthereumErc20Query({\n    pauseQueries,\n    chainId,\n    provider,\n    graphErc20Awards: graphExternalErc20Awards,\n    poolAddress\n  });\n\n  if (externalErc20ChainError) {\n    console.warn(externalErc20ChainError);\n  }\n\n  const graphExternalErc721Awards = poolData === null || poolData === void 0 ? void 0 : (_poolData$daiPool3 = poolData.daiPool) === null || _poolData$daiPool3 === void 0 ? void 0 : (_poolData$daiPool3$pr = _poolData$daiPool3.prizeStrategy) === null || _poolData$daiPool3$pr === void 0 ? void 0 : _poolData$daiPool3$pr.externalErc721Awards;\n  const {\n    status: externalErc721ChainStatus,\n    data: externalErc721ChainData,\n    error: externalErc721ChainError,\n    isFetching: externalErc721IsFetching\n  } = useEthereumErc721Query({\n    pauseQueries,\n    chainId,\n    provider,\n    graphErc721Awards: graphExternalErc721Awards,\n    poolAddress\n  });\n\n  if (externalErc721ChainError) {\n    console.warn(externalErc721ChainError);\n  }\n\n  return children({\n    genericChainData\n  });\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/ChainQueries.jsx"],"names":["useContext","useEffect","useState","AuthControllerContext","WalletContext","useEthereumErc20Query","useEthereumErc721Query","useEthereumGenericQuery","debug","require","ChainQueries","props","children","provider","poolData","chainId","pauseQueries","status","genericChainStatus","data","genericChainData","error","genericChainError","isFetching","genericIsFetching","daiPool","console","warn","poolAddress","graphExternalErc20Awards","prizeStrategy","externalErc20Awards","externalErc20ChainStatus","externalErc20ChainData","externalErc20ChainError","externalErc20IsFetching","graphErc20Awards","graphExternalErc721Awards","externalErc721Awards","externalErc721ChainStatus","externalErc721ChainData","externalErc721ChainError","externalErc721IsFetching","graphErc721Awards"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD,C,CACA;AACA;;AAEA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,aAAT,QAA8B,uDAA9B;AACA,SAASC,qBAAT,QAAsC,iCAAtC;AACA,SAASC,sBAAT,QAAuC,kCAAvC;AACA,SAASC,uBAAT,QAAwC,mCAAxC;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,uBAAjB,CAAd;;AAEA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAClC,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA;AAHI,MAIFH,KAJJ;AAMA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA4BhB,UAAU,CAACG,qBAAD,CAA5C;AAEA,QAAM;AACJc,IAAAA,MAAM,EAAEC,kBADJ;AAEJC,IAAAA,IAAI,EAAEC,gBAFF;AAGJC,IAAAA,KAAK,EAAEC,iBAHH;AAIJC,IAAAA,UAAU,EAAEC;AAJR,MAKFjB,uBAAuB,CAAC;AAC1BS,IAAAA,YAD0B;AAE1BD,IAAAA,OAF0B;AAG1BF,IAAAA,QAH0B;AAI1BC,IAAAA,QAAQ,EAAEA,QAAF,aAAEA,QAAF,uBAAEA,QAAQ,CAAEW;AAJM,GAAD,CAL3B;;AAYA,MAAIH,iBAAJ,EAAuB;AACrBI,IAAAA,OAAO,CAACC,IAAR,CAAaL,iBAAb;AACD;;AAOD,QAAMM,WAAW,GAAGd,QAAH,aAAGA,QAAH,4CAAGA,QAAQ,CAAEW,OAAb,sDAAG,kBAAmBG,WAAvC;AAEA,QAAMC,wBAAwB,GAAGf,QAAH,aAAGA,QAAH,6CAAGA,QAAQ,CAAEW,OAAb,gFAAG,mBAAmBK,aAAtB,0DAAG,sBAAkCC,mBAAnE;AAEA,QAAM;AACJd,IAAAA,MAAM,EAAEe,wBADJ;AAEJb,IAAAA,IAAI,EAAEc,sBAFF;AAGJZ,IAAAA,KAAK,EAAEa,uBAHH;AAIJX,IAAAA,UAAU,EAAEY;AAJR,MAKF9B,qBAAqB,CAAC;AACxBW,IAAAA,YADwB;AAExBD,IAAAA,OAFwB;AAGxBF,IAAAA,QAHwB;AAIxBuB,IAAAA,gBAAgB,EAAEP,wBAJM;AAKxBD,IAAAA;AALwB,GAAD,CALzB;;AAaA,MAAIM,uBAAJ,EAA6B;AAC3BR,IAAAA,OAAO,CAACC,IAAR,CAAaO,uBAAb;AACD;;AAID,QAAMG,yBAAyB,GAAGvB,QAAH,aAAGA,QAAH,6CAAGA,QAAQ,CAAEW,OAAb,gFAAG,mBAAmBK,aAAtB,0DAAG,sBAAkCQ,oBAApE;AAEA,QAAM;AACJrB,IAAAA,MAAM,EAAEsB,yBADJ;AAEJpB,IAAAA,IAAI,EAAEqB,uBAFF;AAGJnB,IAAAA,KAAK,EAAEoB,wBAHH;AAIJlB,IAAAA,UAAU,EAAEmB;AAJR,MAKFpC,sBAAsB,CAAC;AACzBU,IAAAA,YADyB;AAEzBD,IAAAA,OAFyB;AAGzBF,IAAAA,QAHyB;AAIzB8B,IAAAA,iBAAiB,EAAEN,yBAJM;AAKzBT,IAAAA;AALyB,GAAD,CAL1B;;AAaA,MAAIa,wBAAJ,EAA8B;AAC5Bf,IAAAA,OAAO,CAACC,IAAR,CAAac,wBAAb;AACD;;AAED,SAAO7B,QAAQ,CAAC;AACdQ,IAAAA;AADc,GAAD,CAAf;AAGD","sourcesContent":["import { useContext, useEffect, useState } from 'react'\n// import { isEmpty } from 'lodash'\n// import { useInterval } from 'beautiful-react-hooks'\n\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { WalletContext } from 'lib/components/contextProviders/WalletContextProvider'\nimport { useEthereumErc20Query } from 'lib/hooks/useEthereumErc20Query'\nimport { useEthereumErc721Query } from 'lib/hooks/useEthereumErc721Query'\nimport { useEthereumGenericQuery } from 'lib/hooks/useEthereumGenericQuery'\n\nconst debug = require('debug')('pool-app:ChainQueries')\n\nexport function ChainQueries(props) {\n  const {\n    children,\n    provider,\n    poolData,\n  } = props\n  \n  const { chainId, pauseQueries } = useContext(AuthControllerContext)\n  \n  const {\n    status: genericChainStatus,\n    data: genericChainData,\n    error: genericChainError,\n    isFetching: genericIsFetching\n  } = useEthereumGenericQuery({\n    pauseQueries,\n    chainId,\n    provider,\n    poolData: poolData?.daiPool,\n  })\n\n  if (genericChainError) {\n    console.warn(genericChainError)\n  }\n\n\n\n\n\n  \n  const poolAddress = poolData?.daiPool?.poolAddress\n\n  const graphExternalErc20Awards = poolData?.daiPool?.prizeStrategy?.externalErc20Awards\n\n  const {\n    status: externalErc20ChainStatus,\n    data: externalErc20ChainData,\n    error: externalErc20ChainError,\n    isFetching: externalErc20IsFetching\n  } = useEthereumErc20Query({\n    pauseQueries,\n    chainId,\n    provider,\n    graphErc20Awards: graphExternalErc20Awards,\n    poolAddress,\n  })\n\n  if (externalErc20ChainError) {\n    console.warn(externalErc20ChainError)\n  }\n\n\n\n  const graphExternalErc721Awards = poolData?.daiPool?.prizeStrategy?.externalErc721Awards\n\n  const {\n    status: externalErc721ChainStatus,\n    data: externalErc721ChainData,\n    error: externalErc721ChainError,\n    isFetching: externalErc721IsFetching\n  } = useEthereumErc721Query({\n    pauseQueries,\n    chainId,\n    provider,\n    graphErc721Awards: graphExternalErc721Awards,\n    poolAddress,\n  })\n\n  if (externalErc721ChainError) {\n    console.warn(externalErc721ChainError)\n  }\n  \n  return children({ \n    genericChainData,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}
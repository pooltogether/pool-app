{"ast":null,"code":"import { useQuery } from 'react-query';\nimport { isEmpty } from 'lodash';\nimport { ERC_721_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { fetchExternalErc721Awards } from 'lib/utils/fetchExternalErc721Awards';\n\nconst getEthereumErc721Data = async params => {\n  return await fetchExternalErc721Awards(params);\n};\n\nexport function useEthereumErc721Query(params) {\n  const {\n    chainId,\n    provider,\n    graphErc721Awards,\n    pauseQueries,\n    poolAddress\n  } = params;\n  let blockNumber = params.blockNumber;\n\n  if (!blockNumber) {\n    blockNumber = -1;\n  }\n\n  const enabled = !pauseQueries && chainId && !isEmpty(provider) && !isEmpty(graphErc721Awards) && !!poolAddress;\n  const refetchInterval = !pauseQueries && blockNumber === -1 ? ERC_721_POLLING_INTERVAL : false;\n  return useQuery([QUERY_KEYS.ethereumErc721sQuery, chainId, poolAddress, blockNumber], async () => await getEthereumErc721Data(params), {\n    enabled,\n    refetchInterval\n  });\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/useEthereumErc721Query.js"],"names":["useQuery","isEmpty","ERC_721_POLLING_INTERVAL","QUERY_KEYS","fetchExternalErc721Awards","getEthereumErc721Data","params","useEthereumErc721Query","chainId","provider","graphErc721Awards","pauseQueries","poolAddress","blockNumber","enabled","refetchInterval","ethereumErc721sQuery"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,yBAAT,QAA0C,qCAA1C;;AAEA,MAAMC,qBAAqB,GAAG,MAAOC,MAAP,IAAkB;AAC9C,SAAO,MAAMF,yBAAyB,CAACE,MAAD,CAAtC;AACD,CAFD;;AAIA,OAAO,SAASC,sBAAT,CAAgCD,MAAhC,EAAwC;AAC7C,QAAM;AACJE,IAAAA,OADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,iBAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA;AALI,MAMFN,MANJ;AAQA,MAAIO,WAAW,GAAGP,MAAM,CAACO,WAAzB;;AAEA,MAAI,CAACA,WAAL,EAAkB;AAChBA,IAAAA,WAAW,GAAG,CAAC,CAAf;AACD;;AAED,QAAMC,OAAO,GAAG,CAACH,YAAD,IACdH,OADc,IAEd,CAACP,OAAO,CAACQ,QAAD,CAFM,IAGd,CAACR,OAAO,CAACS,iBAAD,CAHM,IAId,CAAC,CAACE,WAJJ;AAMA,QAAMG,eAAe,GAAG,CAACJ,YAAD,IAAkBE,WAAW,KAAK,CAAC,CAAnC,GACtBX,wBADsB,GAEtB,KAFF;AAIA,SAAOF,QAAQ,CACb,CAACG,UAAU,CAACa,oBAAZ,EAAkCR,OAAlC,EAA2CI,WAA3C,EAAwDC,WAAxD,CADa,EAEb,YAAY,MAAMR,qBAAqB,CAACC,MAAD,CAF1B,EAGb;AACEQ,IAAAA,OADF;AAEEC,IAAAA;AAFF,GAHa,CAAf;AAQD","sourcesContent":["import { useQuery } from 'react-query'\nimport { isEmpty } from 'lodash'\n\nimport {\n  ERC_721_POLLING_INTERVAL,\n  QUERY_KEYS\n} from 'lib/constants'\nimport { fetchExternalErc721Awards } from 'lib/utils/fetchExternalErc721Awards'\n\nconst getEthereumErc721Data = async (params) => {\n  return await fetchExternalErc721Awards(params)\n}\n\nexport function useEthereumErc721Query(params) {\n  const {\n    chainId,\n    provider,\n    graphErc721Awards,\n    pauseQueries,\n    poolAddress,\n  } = params\n\n  let blockNumber = params.blockNumber\n\n  if (!blockNumber) {\n    blockNumber = -1\n  }\n\n  const enabled = !pauseQueries &&\n    chainId &&\n    !isEmpty(provider) &&\n    !isEmpty(graphErc721Awards) &&\n    !!poolAddress\n\n  const refetchInterval = !pauseQueries && (blockNumber === -1) ?\n    ERC_721_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    [QUERY_KEYS.ethereumErc721sQuery, chainId, poolAddress, blockNumber],\n    async () => await getEthereumErc721Data(params),\n    { \n      enabled,\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, cloneElement } from 'react';\nimport classnames from 'classnames';\nimport { useTooltip, TooltipPopup } from '@reach/tooltip';\nimport { useTranslation } from 'lib/../i18n';\nimport { Button } from 'lib/components/Button';\nimport { QuestionMarkCircle } from 'lib/components/QuestionMarkCircle'; // Center the tooltip, but collisions will win\n\nconst custom = (triggerRect, tooltipRect) => {\n  const body = document.body;\n  const triggerCenter = triggerRect.left + triggerRect.width / 2;\n  const left = triggerCenter - tooltipRect.width / 2;\n  const maxLeft = body.offsetWidth - tooltipRect.width - 2; // const maxLeft = window.innerWidth - tooltipRect.width - 2 - 30;\n\n  return {\n    left: Math.min(Math.max(2, left), maxLeft) + window.scrollX,\n    top: triggerRect.bottom + 40 + window.scrollY\n  };\n};\n\nexport function PTHint(props) {\n  const {\n    t\n  } = useTranslation();\n  const {\n    children,\n    className,\n    isButton,\n    title\n  } = props;\n  let {\n    tip\n  } = props;\n  const [trigger, tooltip] = useTooltip();\n  const {\n    0: isVisible,\n    1: setIsVisible\n  } = useState(false);\n\n  const show = e => {\n    setIsVisible(true);\n  };\n\n  const hide = e => {\n    setIsVisible(false);\n  };\n\n  const toggleVisible = e => {\n    setIsVisible(!isVisible);\n  };\n\n  tip = __jsx(\"div\", null, tip, __jsx(\"div\", {\n    className: \"sm:hidden my-4\"\n  }, __jsx(Button, {\n    onClick: toggleVisible\n  }, t('close'))));\n\n  if (title) {\n    tip = __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"-mx-8 bg-highlight-5 px-8 py-4 -mt-6 rounded-t-lg\"\n    }, __jsx(\"h5\", {\n      className: \"text-green\"\n    }, title)), __jsx(\"div\", {\n      className: \"pt-4\"\n    }, tip));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classnames(className, 'relative cursor-pointer', {\n      'button-partially-disabled': isButton\n    }),\n    onMouseOut: hide\n  }, __jsx(\"div\", _extends({}, trigger, {\n    onMouseEnter: show // onClick={toggleVisible}\n    ,\n    onTouchStart: toggleVisible,\n    className: classnames('cursor-pointer h-full w-full l-0 r-0 t-0 b-0 absolute'),\n    style: {\n      zIndex: 12314082\n    }\n  })), children ? children : __jsx(QuestionMarkCircle, null)), __jsx(TooltipPopup, _extends({}, tooltip, {\n    isVisible: isVisible,\n    label: tip,\n    position: custom\n  })));\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/PTHint.jsx"],"names":["React","useState","cloneElement","classnames","useTooltip","TooltipPopup","useTranslation","Button","QuestionMarkCircle","custom","triggerRect","tooltipRect","body","document","triggerCenter","left","width","maxLeft","offsetWidth","Math","min","max","window","scrollX","top","bottom","scrollY","PTHint","props","t","children","className","isButton","title","tip","trigger","tooltip","isVisible","setIsVisible","show","e","hide","toggleVisible","zIndex"],"mappings":"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","sourcesContent":["import React, { useState, cloneElement } from 'react'\nimport classnames from 'classnames'\nimport { useTooltip, TooltipPopup } from '@reach/tooltip'\n\nimport { useTranslation } from 'lib/../i18n'\nimport { Button } from 'lib/components/Button'\nimport { QuestionMarkCircle } from 'lib/components/QuestionMarkCircle'\n\n// Center the tooltip, but collisions will win\nconst custom = (triggerRect, tooltipRect) => {\n  const body = document.body\n  const triggerCenter = triggerRect.left + triggerRect.width / 2;\n  const left = triggerCenter - tooltipRect.width / 2;\n  const maxLeft = body.offsetWidth - tooltipRect.width - 2;\n  // const maxLeft = window.innerWidth - tooltipRect.width - 2 - 30;\n\n  return {\n    left: Math.min(Math.max(2, left), maxLeft) + window.scrollX,\n    top: triggerRect.bottom + 40  + window.scrollY,\n  };\n};\n\nexport function PTHint(props) {\n  const { t } = useTranslation()\n  const { children, className, isButton, title } = props\n  let { tip } = props\n\n  const [trigger, tooltip] = useTooltip()\n\n  const [isVisible, setIsVisible] = useState(false)\n\n  const show = (e) => {\n    setIsVisible(true)\n  }\n\n  const hide = (e) => {\n    setIsVisible(false)\n  }\n\n  const toggleVisible = (e) => {\n    setIsVisible(!isVisible)\n  }\n\n  tip = <div>\n    {tip}\n\n    <div\n      className='sm:hidden my-4'\n    >\n      <Button\n        onClick={toggleVisible}\n      >\n        {t('close')}\n      </Button>\n    </div>\n  </div>\n\n  if (title) {\n    tip = <>\n      <div\n        className='-mx-8 bg-highlight-5 px-8 py-4 -mt-6 rounded-t-lg'\n      >\n        <h5\n          className='text-green'\n        >\n          {title}\n        </h5>\n      </div>\n\n      <div className='pt-4'>\n        {tip}\n      </div>\n    </>\n  }\n\n  return <>\n    <div\n      className={classnames(\n        className,\n        'relative cursor-pointer',\n        {\n          'button-partially-disabled': isButton\n        }\n      )}\n      onMouseOut={hide}\n    >\n      <div\n        {...trigger}\n        onMouseEnter={show}\n        // onClick={toggleVisible}\n        onTouchStart={toggleVisible}\n        className={classnames(\n          'cursor-pointer h-full w-full l-0 r-0 t-0 b-0 absolute',\n        )}\n        style={{\n          zIndex: 12314082\n        }}\n      />\n\n      {children ? children : <QuestionMarkCircle />}\n    </div>\n\n  \n    <TooltipPopup\n      {...tooltip}\n      isVisible={isVisible}\n      label={tip}\n      position={custom}\n    />\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
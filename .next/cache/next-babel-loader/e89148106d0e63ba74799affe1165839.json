{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { request } from 'graphql-request';\nimport { POOLTOGETHER_GRAPH_URIS } from 'lib/constants';\nimport { poolDripsQuery } from 'lib/queries/poolDripsQuery';\nexport var getPoolDripsData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chainId, prizeStrategyAddress, blockNumber) {\n    var query, variables, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = poolDripsQuery(blockNumber);\n            variables = {\n              prizeStrategyAddress: prizeStrategyAddress\n            };\n            _context.prev = 2;\n            _context.next = 5;\n            return request(POOLTOGETHER_GRAPH_URIS[chainId], query, variables);\n\n          case 5:\n            data = _context.sent;\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            console.error(JSON.stringify(_context.t0, undefined, 2));\n\n          case 11:\n            return _context.abrupt(\"return\", data);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  }));\n\n  return function getPoolDripsData(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/fetchers/getPoolDripsData.js"],"names":["request","POOLTOGETHER_GRAPH_URIS","poolDripsQuery","getPoolDripsData","chainId","prizeStrategyAddress","blockNumber","query","variables","data","console","error","JSON","stringify","undefined"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,iBAAxB;AAEA,SAASC,uBAAT,QAAwC,eAAxC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AAEA,OAAO,IAAMC,gBAAgB;AAAA,sEAAG,iBAAOC,OAAP,EAAgBC,oBAAhB,EAAsCC,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,YAAAA,KADwB,GAChBL,cAAc,CAACI,WAAD,CADE;AAGxBE,YAAAA,SAHwB,GAGZ;AAChBH,cAAAA,oBAAoB,EAApBA;AADgB,aAHY;AAAA;AAAA;AAAA,mBASfL,OAAO,CAClBC,uBAAuB,CAACG,OAAD,CADL,EAElBG,KAFkB,EAGlBC,SAHkB,CATQ;;AAAA;AAS5BC,YAAAA,IAT4B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAe5BC,YAAAA,OAAO,CAACC,KAAR,CAAcC,IAAI,CAACC,SAAL,cAAsBC,SAAtB,EAAiC,CAAjC,CAAd;;AAf4B;AAAA,6CAkBvBL,IAlBuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBN,gBAAgB;AAAA;AAAA;AAAA,GAAtB","sourcesContent":["import { request } from 'graphql-request'\n\nimport { POOLTOGETHER_GRAPH_URIS } from 'lib/constants'\nimport { poolDripsQuery } from 'lib/queries/poolDripsQuery'\n\nexport const getPoolDripsData = async (chainId, prizeStrategyAddress, blockNumber) => {\n  const query = poolDripsQuery(blockNumber)\n\n  const variables = {\n    prizeStrategyAddress,\n  }\n\n  let data\n  try {\n    data = await request(\n      POOLTOGETHER_GRAPH_URIS[chainId],\n      query,\n      variables\n    )\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n  }\n\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}
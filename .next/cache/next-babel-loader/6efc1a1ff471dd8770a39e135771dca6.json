{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ethers } from 'ethers';\nimport { numberWithCommas } from 'lib/utils/numberWithCommas';\nexport function displayAmountInEther(amount) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (amount === 0) {\n    amount = ethers.utils.bigNumberify(0);\n  }\n\n  if (!amount) {\n    return '';\n  }\n\n  var precision = 2;\n\n  if (options.precision !== undefined) {\n    precision = options.precision;\n  }\n\n  var commify = true;\n\n  if (options.commify !== undefined) {\n    commify = options.commify;\n  }\n\n  var decimals = 18;\n\n  if (options.decimals !== undefined) {\n    decimals = Number(options.decimals);\n  }\n\n  var etherValueAsString = ethers.utils.formatUnits(amount.toString(), decimals);\n\n  if (/\\.\\d$/.test(etherValueAsString)) {\n    etherValueAsString += '0';\n  }\n\n  if (commify === true) {\n    return numberWithCommas(etherValueAsString, _objectSpread(_objectSpread({}, options), {}, {\n      precision: precision\n    }));\n  } else {\n    var precisionWithDecimal = precision > 0 ? precision + 1 : 0;\n    return etherValueAsString.substr(0, etherValueAsString.indexOf('.') + precisionWithDecimal);\n  }\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/utils/displayAmountInEther.js"],"names":["ethers","numberWithCommas","displayAmountInEther","amount","options","utils","bigNumberify","precision","undefined","commify","decimals","Number","etherValueAsString","formatUnits","toString","test","precisionWithDecimal","substr","indexOf"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AAEA,OAAO,SAASC,oBAAT,CAA8BC,MAA9B,EAAoD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACzD,MAAID,MAAM,KAAK,CAAf,EAAkB;AAChBA,IAAAA,MAAM,GAAGH,MAAM,CAACK,KAAP,CAAaC,YAAb,CAA0B,CAA1B,CAAT;AACD;;AAED,MAAI,CAACH,MAAL,EAAa;AACX,WAAO,EAAP;AACD;;AAED,MAAII,SAAS,GAAG,CAAhB;;AACA,MAAIH,OAAO,CAACG,SAAR,KAAsBC,SAA1B,EAAqC;AACnCD,IAAAA,SAAS,GAAGH,OAAO,CAACG,SAApB;AACD;;AAED,MAAIE,OAAO,GAAG,IAAd;;AACA,MAAIL,OAAO,CAACK,OAAR,KAAoBD,SAAxB,EAAmC;AACjCC,IAAAA,OAAO,GAAGL,OAAO,CAACK,OAAlB;AACD;;AAED,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAIN,OAAO,CAACM,QAAR,KAAqBF,SAAzB,EAAoC;AAClCE,IAAAA,QAAQ,GAAGC,MAAM,CAACP,OAAO,CAACM,QAAT,CAAjB;AACD;;AAED,MAAIE,kBAAkB,GAAGZ,MAAM,CAACK,KAAP,CAAaQ,WAAb,CAAyBV,MAAM,CAACW,QAAP,EAAzB,EAA4CJ,QAA5C,CAAzB;;AAEA,MAAI,QAAQK,IAAR,CAAaH,kBAAb,CAAJ,EAAsC;AACpCA,IAAAA,kBAAkB,IAAI,GAAtB;AACD;;AAED,MAAIH,OAAO,KAAK,IAAhB,EAAsB;AACpB,WAAOR,gBAAgB,CAACW,kBAAD,kCAClBR,OADkB;AAErBG,MAAAA,SAAS,EAATA;AAFqB,OAAvB;AAID,GALD,MAKO;AACL,QAAMS,oBAAoB,GAAIT,SAAS,GAAG,CAAb,GAAkBA,SAAS,GAAG,CAA9B,GAAkC,CAA/D;AAEA,WAAOK,kBAAkB,CAACK,MAAnB,CACL,CADK,EAELL,kBAAkB,CAACM,OAAnB,CAA2B,GAA3B,IAAkCF,oBAF7B,CAAP;AAID;AACF","sourcesContent":["import { ethers } from 'ethers'\nimport { numberWithCommas } from 'lib/utils/numberWithCommas'\n\nexport function displayAmountInEther(amount, options = {}) {\n  if (amount === 0) {\n    amount = ethers.utils.bigNumberify(0)\n  }\n\n  if (!amount) {\n    return ''\n  }\n\n  let precision = 2\n  if (options.precision !== undefined) {\n    precision = options.precision\n  }\n\n  let commify = true\n  if (options.commify !== undefined) {\n    commify = options.commify\n  }\n\n  let decimals = 18\n  if (options.decimals !== undefined) {\n    decimals = Number(options.decimals)\n  }\n\n  let etherValueAsString = ethers.utils.formatUnits(amount.toString(), decimals)\n\n  if (/\\.\\d$/.test(etherValueAsString)) {\n    etherValueAsString += '0'\n  }\n\n  if (commify === true) {\n    return numberWithCommas(etherValueAsString, {\n      ...options,\n      precision\n    })\n  } else {\n    const precisionWithDecimal = (precision > 0) ? precision + 1 : 0\n\n    return etherValueAsString.substr(\n      0,\n      etherValueAsString.indexOf('.') + precisionWithDecimal\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
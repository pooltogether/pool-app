{"ast":null,"code":"import { useEffect, useContext } from 'react';\nimport { useAtom } from 'jotai';\nimport { TRANSACTIONS_KEY } from 'lib/constants';\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { checkTransactionStatuses } from 'lib/utils/checkTransactionStatuses'; // bring in new list of tx's from localStorage and check\n// if any are ongoing & what their status is\n\nconst readTransactions = (transactions, setTransactions, chainId, usersAddress, provider) => {\n  try {\n    let txs = [];\n\n    if (false) {\n      const storageKey = `${chainId}-${usersAddress.toLowerCase()}-${TRANSACTIONS_KEY}`;\n      txs = JSON.parse(localStorage.getItem(storageKey));\n      txs = txs ? txs : [];\n    }\n\n    txs = txs.filter(tx => tx.sent && !tx.cancelled); // re-write IDs so transactions are ordered properly\n\n    txs = txs.map((tx, index) => (tx.id = index + 1) && tx);\n    setTransactions([...txs]);\n    checkTransactionStatuses(txs, provider, transactions, setTransactions);\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport function TransactionStatusChecker(props) {\n  const [transactions, setTransactions] = useAtom(transactionsAtom);\n  const {\n    chainId,\n    usersAddress,\n    provider\n  } = useContext(AuthControllerContext);\n  useEffect(() => {\n    if (chainId && usersAddress && provider) {\n      readTransactions(transactions, setTransactions, chainId, usersAddress, provider);\n    }\n  }, [chainId, usersAddress, provider]);\n  return null;\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/TransactionStatusChecker.jsx"],"names":["useEffect","useContext","useAtom","TRANSACTIONS_KEY","transactionsAtom","AuthControllerContext","checkTransactionStatuses","readTransactions","transactions","setTransactions","chainId","usersAddress","provider","txs","storageKey","toLowerCase","JSON","parse","localStorage","getItem","filter","tx","sent","cancelled","map","index","id","e","console","error","TransactionStatusChecker","props"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,wBAAT,QAAyC,oCAAzC,C,CAEA;AACA;;AACA,MAAMC,gBAAgB,GAAG,CAACC,YAAD,EAAeC,eAAf,EAAgCC,OAAhC,EAAyCC,YAAzC,EAAuDC,QAAvD,KAAoE;AAC3F,MAAI;AACF,QAAIC,GAAG,GAAG,EAAV;;AACA,eAAmC;AACjC,YAAMC,UAAU,GAAI,GAAEJ,OAAQ,IAAGC,YAAY,CAACI,WAAb,EAA2B,IAAGZ,gBAAiB,EAAhF;AAEAU,MAAAA,GAAG,GAAGG,IAAI,CAACC,KAAL,CACJC,YAAY,CAACC,OAAb,CAAqBL,UAArB,CADI,CAAN;AAGAD,MAAAA,GAAG,GAAGA,GAAG,GAAGA,GAAH,GAAS,EAAlB;AACD;;AAEDA,IAAAA,GAAG,GAAGA,GAAG,CAACO,MAAJ,CAAWC,EAAE,IAAIA,EAAE,CAACC,IAAH,IAAW,CAACD,EAAE,CAACE,SAAhC,CAAN,CAXE,CAaF;;AACAV,IAAAA,GAAG,GAAGA,GAAG,CAACW,GAAJ,CAAQ,CAACH,EAAD,EAAKI,KAAL,KAAe,CAACJ,EAAE,CAACK,EAAH,GAAQD,KAAK,GAAG,CAAjB,KAAuBJ,EAA9C,CAAN;AAEAZ,IAAAA,eAAe,CAAC,CAAC,GAAGI,GAAJ,CAAD,CAAf;AACAP,IAAAA,wBAAwB,CAACO,GAAD,EAAMD,QAAN,EAAgBJ,YAAhB,EAA8BC,eAA9B,CAAxB;AACD,GAlBD,CAkBE,OAAOkB,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,CAtBD;;AAwBA,OAAO,SAASG,wBAAT,CAAkCC,KAAlC,EAAyC;AAC9C,QAAM,CAACvB,YAAD,EAAeC,eAAf,IAAkCP,OAAO,CAACE,gBAAD,CAA/C;AACA,QAAM;AAAEM,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,MAAsCX,UAAU,CAACI,qBAAD,CAAtD;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,OAAO,IAAIC,YAAX,IAA2BC,QAA/B,EAAyC;AACvCL,MAAAA,gBAAgB,CAACC,YAAD,EAAeC,eAAf,EAAgCC,OAAhC,EAAyCC,YAAzC,EAAuDC,QAAvD,CAAhB;AACD;AACF,GAJQ,EAIN,CAACF,OAAD,EAAUC,YAAV,EAAwBC,QAAxB,CAJM,CAAT;AAMA,SAAO,IAAP;AACD","sourcesContent":["import { useEffect, useContext } from 'react'\nimport { useAtom } from 'jotai'\n\nimport { TRANSACTIONS_KEY } from 'lib/constants'\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { checkTransactionStatuses } from 'lib/utils/checkTransactionStatuses'\n\n// bring in new list of tx's from localStorage and check\n// if any are ongoing & what their status is\nconst readTransactions = (transactions, setTransactions, chainId, usersAddress, provider) => {\n  try {\n    let txs = []\n    if (typeof window !== 'undefined') {\n      const storageKey = `${chainId}-${usersAddress.toLowerCase()}-${TRANSACTIONS_KEY}`\n      \n      txs = JSON.parse(\n        localStorage.getItem(storageKey)\n      )\n      txs = txs ? txs : []\n    }\n\n    txs = txs.filter(tx => tx.sent && !tx.cancelled)\n\n    // re-write IDs so transactions are ordered properly\n    txs = txs.map((tx, index) => (tx.id = index + 1) && tx)\n\n    setTransactions([...txs])\n    checkTransactionStatuses(txs, provider, transactions, setTransactions)\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nexport function TransactionStatusChecker(props) {\n  const [transactions, setTransactions] = useAtom(transactionsAtom)\n  const { chainId, usersAddress, provider } = useContext(AuthControllerContext)\n\n  useEffect(() => {\n    if (chainId && usersAddress && provider) {\n      readTransactions(transactions, setTransactions, chainId, usersAddress, provider)\n    }\n  }, [chainId, usersAddress, provider])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { UNISWAP_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { getUniswapData } from 'lib/fetchers/getUniswapData';\nexport function useUniswapTokensQuery(pauseQueries, chainId, poolAddress, blockNumber, addresses) {\n  _s();\n\n  var cacheKey = [QUERY_KEYS.uniswapTokensQuery, chainId, poolAddress, blockNumber];\n  var refetchInterval = !pauseQueries && blockNumber === -1 ? UNISWAP_POLLING_INTERVAL : false;\n  return useQuery(cacheKey, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", getUniswapData(chainId, addresses, blockNumber));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), {\n    enabled: !pauseQueries && chainId && poolAddress && addresses,\n    refetchInterval: refetchInterval\n  });\n}\n\n_s(useUniswapTokensQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/useUniswapTokensQuery.js"],"names":["useQuery","UNISWAP_POLLING_INTERVAL","QUERY_KEYS","getUniswapData","useUniswapTokensQuery","pauseQueries","chainId","poolAddress","blockNumber","addresses","cacheKey","uniswapTokensQuery","refetchInterval","enabled"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,cAAT,QAA+B,6BAA/B;AAEA,OAAO,SAASC,qBAAT,CAA+BC,YAA/B,EAA6CC,OAA7C,EAAsDC,WAAtD,EAAmEC,WAAnE,EAAgFC,SAAhF,EAA2F;AAAA;;AAChG,MAAMC,QAAQ,GAAG,CACfR,UAAU,CAACS,kBADI,EAEfL,OAFe,EAGfC,WAHe,EAIfC,WAJe,CAAjB;AAOA,MAAMI,eAAe,GAAG,CAACP,YAAD,IAAkBG,WAAW,KAAK,CAAC,CAAnC,GACtBP,wBADsB,GAEtB,KAFF;AAIA,SAAOD,QAAQ,CACbU,QADa,wEAEb;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAqBP,cAAc,CAACG,OAAD,EAAUG,SAAV,EAAqBD,WAArB,CAAnC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFa,IAGb;AACEK,IAAAA,OAAO,EAAE,CAACR,YAAD,IAAiBC,OAAjB,IAA4BC,WAA5B,IAA2CE,SADtD;AAEEG,IAAAA,eAAe,EAAfA;AAFF,GAHa,CAAf;AAQD;;GApBeR,qB;UAYPJ,Q","sourcesContent":["import { useQuery } from 'react-query'\n\nimport {\n  UNISWAP_POLLING_INTERVAL,\n  QUERY_KEYS\n} from 'lib/constants'\nimport { getUniswapData } from 'lib/fetchers/getUniswapData'\n\nexport function useUniswapTokensQuery(pauseQueries, chainId, poolAddress, blockNumber, addresses) {\n  const cacheKey = [\n    QUERY_KEYS.uniswapTokensQuery,\n    chainId,\n    poolAddress,\n    blockNumber\n  ]\n\n  const refetchInterval = !pauseQueries && (blockNumber === -1) ?\n    UNISWAP_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    cacheKey,\n    async () => { return getUniswapData(chainId, addresses, blockNumber) },\n    {\n      enabled: !pauseQueries && chainId && poolAddress && addresses,\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const getPoolDataFromQueryResult = (addresses, data) => {\n  let poolData = {\n    daiPool: null\n  };\n\n  if (addresses && (data === null || data === void 0 ? void 0 : data.length) > 0) {\n    const dynamicDaiData = data.find(prizePool => addresses.daiPool === prizePool.id);\n    poolData.daiPool = _objectSpread(_objectSpread({\n      poolAddress: addresses.daiPool\n    }, poolData.daiPool), dynamicDaiData);\n  }\n\n  return poolData;\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/services/getPoolDataFromQueryResult.js"],"names":["getPoolDataFromQueryResult","addresses","data","poolData","daiPool","length","dynamicDaiData","find","prizePool","id","poolAddress"],"mappings":";;;;;;AAAA,OAAO,MAAMA,0BAA0B,GAAG,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AAC7D,MAAIC,QAAQ,GAAG;AACbC,IAAAA,OAAO,EAAE;AADI,GAAf;;AAIA,MAAIH,SAAS,IAAI,CAAAC,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEG,MAAN,IAAe,CAAhC,EAAmC;AACjC,UAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,SAAS,IAAIP,SAAS,CAACG,OAAV,KAAsBI,SAAS,CAACC,EAAvD,CAAvB;AAEAN,IAAAA,QAAQ,CAACC,OAAT;AAAqBM,MAAAA,WAAW,EAAET,SAAS,CAACG;AAA5C,OAAwDD,QAAQ,CAACC,OAAjE,GAA6EE,cAA7E;AACD;;AAED,SAAOH,QAAP;AACD,CAZM","sourcesContent":["export const getPoolDataFromQueryResult = (addresses, data) => {\n  let poolData = {\n    daiPool: null,\n  }\n\n  if (addresses && data?.length > 0) {\n    const dynamicDaiData = data.find(prizePool => addresses.daiPool === prizePool.id)\n\n    poolData.daiPool = { poolAddress: addresses.daiPool, ...poolData.daiPool, ...dynamicDaiData }\n  }\n\n  return poolData\n}\n"]},"metadata":{},"sourceType":"module"}
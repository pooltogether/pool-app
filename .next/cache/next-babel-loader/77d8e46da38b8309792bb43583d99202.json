{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from 'react'; // import { isEmpty } from 'lodash'\n// import { useInterval } from 'beautiful-react-hooks'\n\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { WalletContext } from 'lib/components/contextProviders/WalletContextProvider';\nimport { useEthereumErc20Query } from 'lib/hooks/useEthereumErc20Query';\nimport { useEthereumErc721Query } from 'lib/hooks/useEthereumErc721Query';\nimport { useEthereumGenericQuery } from 'lib/hooks/useEthereumGenericQuery';\n\nvar debug = require('debug')('pool-app:ChainQueries');\n\nexport function ChainQueries(props) {\n  _s();\n\n  var _poolData$daiPool, _poolData$daiPool2, _poolData$daiPool2$pr, _poolData$daiPool3, _poolData$daiPool3$pr;\n\n  var children = props.children,\n      provider = props.provider,\n      poolData = props.poolData;\n\n  var _useContext = useContext(AuthControllerContext),\n      chainId = _useContext.chainId,\n      pauseQueries = _useContext.pauseQueries;\n\n  var _useEthereumGenericQu = useEthereumGenericQuery({\n    pauseQueries: pauseQueries,\n    chainId: chainId,\n    provider: provider,\n    poolData: poolData === null || poolData === void 0 ? void 0 : poolData.daiPool\n  }),\n      genericChainStatus = _useEthereumGenericQu.status,\n      genericChainData = _useEthereumGenericQu.data,\n      genericChainError = _useEthereumGenericQu.error,\n      genericIsFetching = _useEthereumGenericQu.isFetching;\n\n  if (genericChainError) {\n    console.warn(genericChainError);\n  }\n\n  var poolAddress = poolData === null || poolData === void 0 ? void 0 : (_poolData$daiPool = poolData.daiPool) === null || _poolData$daiPool === void 0 ? void 0 : _poolData$daiPool.poolAddress;\n  var graphExternalErc20Awards = poolData === null || poolData === void 0 ? void 0 : (_poolData$daiPool2 = poolData.daiPool) === null || _poolData$daiPool2 === void 0 ? void 0 : (_poolData$daiPool2$pr = _poolData$daiPool2.prizeStrategy) === null || _poolData$daiPool2$pr === void 0 ? void 0 : _poolData$daiPool2$pr.externalErc20Awards;\n\n  var _useEthereumErc20Quer = useEthereumErc20Query({\n    pauseQueries: pauseQueries,\n    chainId: chainId,\n    provider: provider,\n    graphErc20Awards: graphExternalErc20Awards,\n    poolAddress: poolAddress\n  }),\n      externalErc20ChainStatus = _useEthereumErc20Quer.status,\n      externalErc20ChainData = _useEthereumErc20Quer.data,\n      externalErc20ChainError = _useEthereumErc20Quer.error,\n      externalErc20IsFetching = _useEthereumErc20Quer.isFetching;\n\n  if (externalErc20ChainError) {\n    console.warn(externalErc20ChainError);\n  }\n\n  var graphExternalErc721Awards = poolData === null || poolData === void 0 ? void 0 : (_poolData$daiPool3 = poolData.daiPool) === null || _poolData$daiPool3 === void 0 ? void 0 : (_poolData$daiPool3$pr = _poolData$daiPool3.prizeStrategy) === null || _poolData$daiPool3$pr === void 0 ? void 0 : _poolData$daiPool3$pr.externalErc721Awards;\n\n  var _useEthereumErc721Que = useEthereumErc721Query({\n    pauseQueries: pauseQueries,\n    chainId: chainId,\n    provider: provider,\n    graphErc721Awards: graphExternalErc721Awards,\n    poolAddress: poolAddress\n  }),\n      externalErc721ChainStatus = _useEthereumErc721Que.status,\n      externalErc721ChainData = _useEthereumErc721Que.data,\n      externalErc721ChainError = _useEthereumErc721Que.error,\n      externalErc721IsFetching = _useEthereumErc721Que.isFetching;\n\n  if (externalErc721ChainError) {\n    console.warn(externalErc721ChainError);\n  }\n\n  return children({\n    genericChainData: genericChainData\n  });\n}\n\n_s(ChainQueries, \"tiXrjKAOFC0NZVR604RmiCRa/74=\", false, function () {\n  return [useEthereumGenericQuery, useEthereumErc20Query, useEthereumErc721Query];\n});\n\n_c = ChainQueries;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChainQueries\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/ChainQueries.jsx"],"names":["useContext","useEffect","useState","AuthControllerContext","WalletContext","useEthereumErc20Query","useEthereumErc721Query","useEthereumGenericQuery","debug","require","ChainQueries","props","children","provider","poolData","chainId","pauseQueries","daiPool","genericChainStatus","status","genericChainData","data","genericChainError","error","genericIsFetching","isFetching","console","warn","poolAddress","graphExternalErc20Awards","prizeStrategy","externalErc20Awards","graphErc20Awards","externalErc20ChainStatus","externalErc20ChainData","externalErc20ChainError","externalErc20IsFetching","graphExternalErc721Awards","externalErc721Awards","graphErc721Awards","externalErc721ChainStatus","externalErc721ChainData","externalErc721ChainError","externalErc721IsFetching"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from 'react'\n// import { isEmpty } from 'lodash'\n// import { useInterval } from 'beautiful-react-hooks'\n\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { WalletContext } from 'lib/components/contextProviders/WalletContextProvider'\nimport { useEthereumErc20Query } from 'lib/hooks/useEthereumErc20Query'\nimport { useEthereumErc721Query } from 'lib/hooks/useEthereumErc721Query'\nimport { useEthereumGenericQuery } from 'lib/hooks/useEthereumGenericQuery'\n\nconst debug = require('debug')('pool-app:ChainQueries')\n\nexport function ChainQueries(props) {\n  const {\n    children,\n    provider,\n    poolData,\n  } = props\n  \n  const { chainId, pauseQueries } = useContext(AuthControllerContext)\n  \n  const {\n    status: genericChainStatus,\n    data: genericChainData,\n    error: genericChainError,\n    isFetching: genericIsFetching\n  } = useEthereumGenericQuery({\n    pauseQueries,\n    chainId,\n    provider,\n    poolData: poolData?.daiPool,\n  })\n\n  if (genericChainError) {\n    console.warn(genericChainError)\n  }\n\n\n\n\n\n  \n  const poolAddress = poolData?.daiPool?.poolAddress\n\n  const graphExternalErc20Awards = poolData?.daiPool?.prizeStrategy?.externalErc20Awards\n\n  const {\n    status: externalErc20ChainStatus,\n    data: externalErc20ChainData,\n    error: externalErc20ChainError,\n    isFetching: externalErc20IsFetching\n  } = useEthereumErc20Query({\n    pauseQueries,\n    chainId,\n    provider,\n    graphErc20Awards: graphExternalErc20Awards,\n    poolAddress,\n  })\n\n  if (externalErc20ChainError) {\n    console.warn(externalErc20ChainError)\n  }\n\n\n\n  const graphExternalErc721Awards = poolData?.daiPool?.prizeStrategy?.externalErc721Awards\n\n  const {\n    status: externalErc721ChainStatus,\n    data: externalErc721ChainData,\n    error: externalErc721ChainError,\n    isFetching: externalErc721IsFetching\n  } = useEthereumErc721Query({\n    pauseQueries,\n    chainId,\n    provider,\n    graphErc721Awards: graphExternalErc721Awards,\n    poolAddress,\n  })\n\n  if (externalErc721ChainError) {\n    console.warn(externalErc721ChainError)\n  }\n  \n  return children({ \n    genericChainData,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}
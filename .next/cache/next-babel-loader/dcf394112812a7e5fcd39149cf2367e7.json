{"ast":null,"code":"import { useContext } from 'react';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { usePoolDripsQuery } from 'lib/hooks/usePoolDripsQuery';\n\nconst debug = require('debug')('pool-app:DripQueries');\n\nexport const DripQueries = props => {\n  const {\n    pool,\n    children\n  } = props;\n  const {\n    chainId,\n    pauseQueries\n  } = useContext(AuthControllerContext);\n  const {\n    status,\n    data: graphDripData,\n    error,\n    isFetching\n  } = usePoolDripsQuery(pauseQueries, chainId, pool);\n\n  if (error) {\n    console.error(error);\n  }\n\n  return children({\n    dripDataLoading: isFetching,\n    graphDripData\n  });\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/queryComponents/DripQueries.jsx"],"names":["useContext","AuthControllerContext","usePoolDripsQuery","debug","require","DripQueries","props","pool","children","chainId","pauseQueries","status","data","graphDripData","error","isFetching","console","dripDataLoading"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,iBAAT,QAAkC,6BAAlC;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,sBAAjB,CAAd;;AAEA,OAAO,MAAMC,WAAW,GACtBC,KADyB,IAEtB;AACH,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBF,KAA3B;AAEA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA4BV,UAAU,CAACC,qBAAD,CAA5C;AAEA,QAAM;AACJU,IAAAA,MADI;AAEJC,IAAAA,IAAI,EAAEC,aAFF;AAGJC,IAAAA,KAHI;AAIJC,IAAAA;AAJI,MAKFb,iBAAiB,CAACQ,YAAD,EAAeD,OAAf,EAAwBF,IAAxB,CALrB;;AAOA,MAAIO,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;;AAED,SAAON,QAAQ,CAAC;AACdS,IAAAA,eAAe,EAAEF,UADH;AAEdF,IAAAA;AAFc,GAAD,CAAf;AAID,CAtBM","sourcesContent":["import { useContext } from 'react'\n\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { usePoolDripsQuery } from 'lib/hooks/usePoolDripsQuery'\n\nconst debug = require('debug')('pool-app:DripQueries')\n\nexport const DripQueries = (\n  props,\n) => {\n  const { pool, children } = props\n\n  const { chainId, pauseQueries } = useContext(AuthControllerContext)\n\n  const {\n    status,\n    data: graphDripData,\n    error,\n    isFetching\n  } = usePoolDripsQuery(pauseQueries, chainId, pool)\n\n  if (error) {\n    console.error(error)\n  }\n\n  return children({\n    dripDataLoading: isFetching,\n    graphDripData,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}
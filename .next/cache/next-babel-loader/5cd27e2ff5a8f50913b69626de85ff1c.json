{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ethers } from 'ethers';\nimport { QUERY_KEYS } from 'lib/constants';\nimport { calculateEstimatedPoolPrize } from 'lib/services/calculateEstimatedPoolPrize';\nimport { calculateEstimatedExternalAwardsValue } from 'lib/services/calculateEstimatedExternalAwardsValue'; // import { calculateEstimatedExternalItemAwardsValue } from 'lib/services/calculateEstimatedExternalItemAwardsValue'\n\nimport { compileErc20Awards } from 'lib/services/compileErc20Awards';\nimport { compileErc721Awards } from 'lib/services/compileErc721Awards'; // this gathers the current data for a pool\n// note: when calculating value of ERC20 tokens this uses current chain data (infura/alchemy) to get the balance\n// but uses the Uniswap subgraph to get the prices\n// \n// in the compilePoolWithBlockNumber(), the balance is pulled from the pooltogether subgraph as we want the balance\n// at the time the prize was awarded, etc\n\nexport var compilePool = function compilePool(chainId, poolInfo, poolAddress, queryCache, poolChainData, poolGraphData) {\n  var poolObj = _objectSpread(_objectSpread({}, poolChainData), poolGraphData);\n\n  var uniswapPriceData = queryCache.getQueryData([QUERY_KEYS.uniswapTokensQuery, chainId, poolAddress, -1]);\n  var ethereumErc20Awards = queryCache.getQueryData([QUERY_KEYS.ethereumErc20sQuery, chainId, poolAddress, -1]);\n  var ethereumErc721Awards = queryCache.getQueryData([QUERY_KEYS.ethereumErc721sQuery, chainId, poolAddress, -1]);\n  var externalErc20Awards = compileErc20Awards(ethereumErc20Awards, poolGraphData, uniswapPriceData);\n  var externalErc721Awards = compileErc721Awards(ethereumErc721Awards, poolGraphData);\n  var externalAwardsEstimateUSD = calculateEstimatedExternalAwardsValue(externalErc20Awards); // const externalItemAwardsEstimate = calculateEstimatedExternalItemAwardsValue(\n  //   ethereumErc721Awards\n  // )\n\n  var interestPrizeEstimateUSD = calculateEstimatedPoolPrize(poolObj);\n  var totalPrizeEstimateUSD = externalAwardsEstimateUSD ? interestPrizeEstimateUSD.add(ethers.utils.parseEther(externalAwardsEstimateUSD.toString())) : interestPrizeEstimateUSD;\n  return _objectSpread(_objectSpread(_objectSpread({}, poolInfo), poolObj), {}, {\n    prizeAmountUSD: totalPrizeEstimateUSD,\n    interestPrizeUSD: interestPrizeEstimateUSD,\n    externalAwardsUSD: externalAwardsEstimateUSD,\n    // externalItemAwardsEstimate,\n    externalErc20Awards: externalErc20Awards,\n    externalErc721Awards: externalErc721Awards\n  });\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/services/compilePool.jsx"],"names":["ethers","QUERY_KEYS","calculateEstimatedPoolPrize","calculateEstimatedExternalAwardsValue","compileErc20Awards","compileErc721Awards","compilePool","chainId","poolInfo","poolAddress","queryCache","poolChainData","poolGraphData","poolObj","uniswapPriceData","getQueryData","uniswapTokensQuery","ethereumErc20Awards","ethereumErc20sQuery","ethereumErc721Awards","ethereumErc721sQuery","externalErc20Awards","externalErc721Awards","externalAwardsEstimateUSD","interestPrizeEstimateUSD","totalPrizeEstimateUSD","add","utils","parseEther","toString","prizeAmountUSD","interestPrizeUSD","externalAwardsUSD"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,SACEC,UADF,QAEO,eAFP;AAIA,SAASC,2BAAT,QAA4C,0CAA5C;AACA,SAASC,qCAAT,QAAsD,oDAAtD,C,CACA;;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,mBAAT,QAAoC,kCAApC,C,CAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CACzBC,OADyB,EAEzBC,QAFyB,EAGzBC,WAHyB,EAIzBC,UAJyB,EAKzBC,aALyB,EAMzBC,aANyB,EAOtB;AACH,MAAMC,OAAO,mCACRF,aADQ,GAERC,aAFQ,CAAb;;AAKA,MAAME,gBAAgB,GAAGJ,UAAU,CAACK,YAAX,CAAwB,CAACd,UAAU,CAACe,kBAAZ,EAAgCT,OAAhC,EAAyCE,WAAzC,EAAsD,CAAC,CAAvD,CAAxB,CAAzB;AACA,MAAMQ,mBAAmB,GAAGP,UAAU,CAACK,YAAX,CAAwB,CAACd,UAAU,CAACiB,mBAAZ,EAAiCX,OAAjC,EAA0CE,WAA1C,EAAuD,CAAC,CAAxD,CAAxB,CAA5B;AACA,MAAMU,oBAAoB,GAAGT,UAAU,CAACK,YAAX,CAAwB,CAACd,UAAU,CAACmB,oBAAZ,EAAkCb,OAAlC,EAA2CE,WAA3C,EAAwD,CAAC,CAAzD,CAAxB,CAA7B;AAEA,MAAMY,mBAAmB,GAAGjB,kBAAkB,CAACa,mBAAD,EAAsBL,aAAtB,EAAqCE,gBAArC,CAA9C;AAEA,MAAMQ,oBAAoB,GAAGjB,mBAAmB,CAACc,oBAAD,EAAuBP,aAAvB,CAAhD;AAEA,MAAMW,yBAAyB,GAAGpB,qCAAqC,CAACkB,mBAAD,CAAvE,CAdG,CAeH;AACA;AACA;;AAEA,MAAMG,wBAAwB,GAAGtB,2BAA2B,CAACW,OAAD,CAA5D;AAEA,MAAMY,qBAAqB,GAAGF,yBAAyB,GACrDC,wBAAwB,CAACE,GAAzB,CAA6B1B,MAAM,CAAC2B,KAAP,CAAaC,UAAb,CAC3BL,yBAAyB,CAACM,QAA1B,EAD2B,CAA7B,CADqD,GAIrDL,wBAJF;AAMA,uDACKhB,QADL,GAEKK,OAFL;AAGEiB,IAAAA,cAAc,EAAEL,qBAHlB;AAIEM,IAAAA,gBAAgB,EAAEP,wBAJpB;AAKEQ,IAAAA,iBAAiB,EAAET,yBALrB;AAME;AACAF,IAAAA,mBAAmB,EAAnBA,mBAPF;AAQEC,IAAAA,oBAAoB,EAApBA;AARF;AAUD,CA5CM","sourcesContent":["import { ethers } from 'ethers'\n\nimport {\n  QUERY_KEYS\n} from 'lib/constants'\n\nimport { calculateEstimatedPoolPrize } from 'lib/services/calculateEstimatedPoolPrize'\nimport { calculateEstimatedExternalAwardsValue } from 'lib/services/calculateEstimatedExternalAwardsValue'\n// import { calculateEstimatedExternalItemAwardsValue } from 'lib/services/calculateEstimatedExternalItemAwardsValue'\nimport { compileErc20Awards } from 'lib/services/compileErc20Awards'\nimport { compileErc721Awards } from 'lib/services/compileErc721Awards'\n\n\n// this gathers the current data for a pool\n// note: when calculating value of ERC20 tokens this uses current chain data (infura/alchemy) to get the balance\n// but uses the Uniswap subgraph to get the prices\n// \n// in the compilePoolWithBlockNumber(), the balance is pulled from the pooltogether subgraph as we want the balance\n// at the time the prize was awarded, etc\n\nexport const compilePool = (\n  chainId,\n  poolInfo,\n  poolAddress,\n  queryCache,\n  poolChainData,\n  poolGraphData,\n) => {\n  const poolObj = {\n    ...poolChainData,\n    ...poolGraphData,\n  }\n\n  const uniswapPriceData = queryCache.getQueryData([QUERY_KEYS.uniswapTokensQuery, chainId, poolAddress, -1])\n  const ethereumErc20Awards = queryCache.getQueryData([QUERY_KEYS.ethereumErc20sQuery, chainId, poolAddress, -1])\n  const ethereumErc721Awards = queryCache.getQueryData([QUERY_KEYS.ethereumErc721sQuery, chainId, poolAddress, -1])\n\n  const externalErc20Awards = compileErc20Awards(ethereumErc20Awards, poolGraphData, uniswapPriceData)\n\n  const externalErc721Awards = compileErc721Awards(ethereumErc721Awards, poolGraphData)\n\n  const externalAwardsEstimateUSD = calculateEstimatedExternalAwardsValue(externalErc20Awards)\n  // const externalItemAwardsEstimate = calculateEstimatedExternalItemAwardsValue(\n  //   ethereumErc721Awards\n  // )\n\n  const interestPrizeEstimateUSD = calculateEstimatedPoolPrize(poolObj)\n\n  const totalPrizeEstimateUSD = externalAwardsEstimateUSD ?\n    interestPrizeEstimateUSD.add(ethers.utils.parseEther(\n      externalAwardsEstimateUSD.toString()\n    )) :\n    interestPrizeEstimateUSD\n\n  return {\n    ...poolInfo,\n    ...poolObj,\n    prizeAmountUSD: totalPrizeEstimateUSD,\n    interestPrizeUSD: interestPrizeEstimateUSD,\n    externalAwardsUSD: externalAwardsEstimateUSD,\n    // externalItemAwardsEstimate,\n    externalErc20Awards,\n    externalErc721Awards\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { isEmpty } from 'lodash';\nimport { MAINNET_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { getPoolsData } from 'lib/fetchers/getPoolsData';\nexport function usePoolsQuery(pauseQueries, chainId, contractAddresses) {\n  _s();\n\n  var blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n  var refetchInterval = !pauseQueries && blockNumber === -1 ? MAINNET_POLLING_INTERVAL : false;\n  return useQuery([QUERY_KEYS.poolsQuery, chainId, blockNumber], /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", getPoolsData(chainId, contractAddresses, blockNumber));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), {\n    enabled: !pauseQueries && chainId && blockNumber && !isEmpty(contractAddresses),\n    refetchInterval: refetchInterval\n  });\n}\n\n_s(usePoolsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/usePoolsQuery.js"],"names":["useQuery","isEmpty","MAINNET_POLLING_INTERVAL","QUERY_KEYS","getPoolsData","usePoolsQuery","pauseQueries","chainId","contractAddresses","blockNumber","refetchInterval","poolsQuery","enabled"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,YAAT,QAA6B,2BAA7B;AAEA,OAAO,SAASC,aAAT,CAAuBC,YAAvB,EAAqCC,OAArC,EAA8CC,iBAA9C,EAAmF;AAAA;;AAAA,MAAlBC,WAAkB,uEAAJ,CAAC,CAAG;AACxF,MAAMC,eAAe,GAAG,CAACJ,YAAD,IAAkBG,WAAW,KAAK,CAAC,CAAnC,GACtBP,wBADsB,GAEtB,KAFF;AAIA,SAAOF,QAAQ,CACb,CAACG,UAAU,CAACQ,UAAZ,EAAwBJ,OAAxB,EAAiCE,WAAjC,CADa,wEAEb;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAqBL,YAAY,CAACG,OAAD,EAAUC,iBAAV,EAA6BC,WAA7B,CAAjC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFa,IAGb;AACEG,IAAAA,OAAO,EAAE,CAACN,YAAD,IAAiBC,OAAjB,IAA4BE,WAA5B,IAA2C,CAACR,OAAO,CAACO,iBAAD,CAD9D;AAEEE,IAAAA,eAAe,EAAfA;AAFF,GAHa,CAAf;AAQD;;GAbeL,a;UAKPL,Q","sourcesContent":["import { useQuery } from 'react-query'\nimport { isEmpty } from 'lodash'\n\nimport {\n  MAINNET_POLLING_INTERVAL,\n  QUERY_KEYS\n} from 'lib/constants'\nimport { getPoolsData } from 'lib/fetchers/getPoolsData'\n\nexport function usePoolsQuery(pauseQueries, chainId, contractAddresses, blockNumber = -1) {\n  const refetchInterval = !pauseQueries && (blockNumber === -1) ? \n    MAINNET_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    [QUERY_KEYS.poolsQuery, chainId, blockNumber],\n    async () => { return getPoolsData(chainId, contractAddresses, blockNumber) },\n    { \n      enabled: !pauseQueries && chainId && blockNumber && !isEmpty(contractAddresses),\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
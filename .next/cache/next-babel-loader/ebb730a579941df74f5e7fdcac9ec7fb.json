{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport { ethers } from 'ethers';\nimport { useRouter } from 'next/router';\nimport { useAtom } from 'jotai';\nimport { REFERRER_ADDRESS_KEY } from 'lib/constants';\nimport { Trans, useTranslation } from 'lib/../i18n';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom';\nimport { DepositInfoList } from 'lib/components/DepositInfoList';\nimport { PaneTitle } from 'lib/components/PaneTitle';\nimport { PoolNumber } from 'lib/components/PoolNumber';\nimport { TransactionsTakeTimeMessage } from 'lib/components/TransactionsTakeTimeMessage';\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction';\nimport { numberWithCommas } from 'lib/utils/numberWithCommas';\nimport { permitSignOrRegularDeposit } from 'lib/utils/permitSignOrRegularDeposit';\nvar bn = ethers.utils.bigNumberify;\nexport function ExecuteCryptoDeposit(props) {\n  _s();\n\n  var _pool$prizeStrategy, _pool$prizeStrategy$s, _pool$prizeStrategy$s2;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useAtom = useAtom(transactionsAtom),\n      _useAtom2 = _slicedToArray(_useAtom, 2),\n      transactions = _useAtom2[0],\n      setTransactions = _useAtom2[1];\n\n  var nextStep = props.nextStep,\n      previousStep = props.previousStep;\n  var router = useRouter();\n  var quantity = router.query.quantity;\n\n  var _useContext = useContext(AuthControllerContext),\n      chainId = _useContext.chainId,\n      usersAddress = _useContext.usersAddress,\n      provider = _useContext.provider;\n\n  var _useContext2 = useContext(PoolDataContext),\n      usersChainData = _useContext2.usersChainData,\n      pool = _useContext2.pool;\n\n  var decimals = pool === null || pool === void 0 ? void 0 : pool.underlyingCollateralDecimals;\n  var ticker = pool === null || pool === void 0 ? void 0 : pool.underlyingCollateralSymbol;\n  var tokenAddress = pool === null || pool === void 0 ? void 0 : pool.underlyingCollateralToken;\n  var poolAddress = pool === null || pool === void 0 ? void 0 : pool.poolAddress;\n  var controlledTokenAddress = pool === null || pool === void 0 ? void 0 : (_pool$prizeStrategy = pool.prizeStrategy) === null || _pool$prizeStrategy === void 0 ? void 0 : (_pool$prizeStrategy$s = _pool$prizeStrategy.singleRandomWinner) === null || _pool$prizeStrategy$s === void 0 ? void 0 : (_pool$prizeStrategy$s2 = _pool$prizeStrategy$s.ticket) === null || _pool$prizeStrategy$s2 === void 0 ? void 0 : _pool$prizeStrategy$s2.id;\n  var tickerUpcased = ticker === null || ticker === void 0 ? void 0 : ticker.toUpperCase(); // const {\n  //   usersDaiPermitAllowance,\n  // } = usersDataForPool(pool, usersChainData)\n\n  var _useState = useState(false),\n      txExecuted = _useState[0],\n      setTxExecuted = _useState[1];\n\n  var _useState2 = useState(),\n      txId = _useState2[0],\n      setTxId = _useState2[1];\n\n  var txMainName = \"\".concat(t('deposit'), \" \").concat(numberWithCommas(quantity, {\n    precision: 2\n  }), \" \").concat(t('tickets')); // if (poolTokenSupportsPermitSign(chainId, tokenAddress)) {\n  //   txMainName = `${t('permitAnd')} ${txMainName}`\n  // }\n\n  var txSubName = \"\".concat(quantity, \" \").concat(tickerUpcased);\n  var txName = \"\".concat(txMainName, \" (\").concat(txSubName, \")\");\n\n  var _useSendTransaction = useSendTransaction(txName, transactions, setTransactions),\n      _useSendTransaction2 = _slicedToArray(_useSendTransaction, 1),\n      sendTx = _useSendTransaction2[0];\n\n  var tx = transactions === null || transactions === void 0 ? void 0 : transactions.find(function (tx) {\n    return tx.id === txId;\n  });\n  useEffect(function () {\n    var runTx = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var referrerAddress, quantityBN, sharedParams, id;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setTxExecuted(true);\n                referrerAddress = Cookies.get(REFERRER_ADDRESS_KEY);\n\n                try {\n                  ethers.utils.getAddress(referrerAddress);\n                } catch (e) {\n                  referrerAddress = ethers.constants.AddressZero;\n                  console.log(\"referrer address was an invalid Ethereum address:\", e.message);\n                }\n\n                quantityBN = ethers.utils.parseUnits(quantity, Number(decimals)); // const needsPermit = quantityBN.gt(0) && usersDaiPermitAllowance.lt(quantityBN)\n\n                sharedParams = [usersAddress, quantityBN, controlledTokenAddress, referrerAddress];\n                _context.next = 7;\n                return permitSignOrRegularDeposit(t, provider, chainId, usersAddress, poolAddress, tokenAddress, sendTx, sharedParams // needsPermit\n                );\n\n              case 7:\n                id = _context.sent;\n                setTxId(id);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function runTx() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    if (!txExecuted && quantity && decimals) {\n      runTx();\n    }\n  }, [quantity, decimals]);\n  useEffect(function () {\n    if ((tx === null || tx === void 0 ? void 0 : tx.cancelled) || (tx === null || tx === void 0 ? void 0 : tx.error)) {\n      previousStep();\n    } else if (tx === null || tx === void 0 ? void 0 : tx.completed) {\n      nextStep();\n      var valueInCentsWithDecimals = Number(quantity) * 100;\n      var valueInCents = parseInt(valueInCentsWithDecimals, 10); // console.log('value in cents', valueInCents)\n      // console.log(window.fathom)\n      // if (window && window.Fathom) {\n      // console.log('send fathom')\n      // this is naive as the user would have to stay on\n      // the same page until the tx confirms, so it won't be accurate anyways\n      // (from app.jsx) Fathom.trackGoal('L4PBHM0U', valueInCents)\n      // }\n    }\n  }, [tx]);\n  return __jsx(React.Fragment, null, __jsx(PaneTitle, {\n    \"short\": true\n  }, __jsx(Trans, {\n    i18nKey: \"depositAmountTicker\",\n    defaults: \"Deposit <number>{{amount}}</number> {{ticker}}\",\n    components: {\n      number: __jsx(PoolNumber, null)\n    },\n    values: {\n      amount: quantity,\n      ticker: tickerUpcased\n    }\n  })), __jsx(\"div\", {\n    className: \"-mt-2\"\n  }, __jsx(PaneTitle, {\n    small: true\n  }, __jsx(Trans, {\n    i18nKey: \"forAmountTickets\",\n    defaults: \"for <number>{{amount}}</number> tickets\",\n    components: {\n      number: __jsx(PoolNumber, null)\n    },\n    values: {\n      amount: quantity,\n      ticker: tickerUpcased\n    }\n  }))), __jsx(\"div\", {\n    className: \"mt-4\"\n  }, __jsx(DepositInfoList, null)), !(tx === null || tx === void 0 ? void 0 : tx.completed) && __jsx(React.Fragment, null, __jsx(TransactionsTakeTimeMessage, {\n    tx: tx,\n    paneMessage: __jsx(React.Fragment, null, (tx === null || tx === void 0 ? void 0 : tx.inWallet) && t('confirmDepositInYourWallet'), (tx === null || tx === void 0 ? void 0 : tx.sent) && t('depositConfirming'))\n  })));\n}\n\n_s(ExecuteCryptoDeposit, \"Du437QwxubASOY30g+gofZWMciI=\", false, function () {\n  return [useTranslation, useAtom, useRouter, useSendTransaction];\n});\n\n_c = ExecuteCryptoDeposit;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExecuteCryptoDeposit\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/ExecuteCryptoDeposit.jsx"],"names":["React","useContext","useState","useEffect","Cookies","ethers","useRouter","useAtom","REFERRER_ADDRESS_KEY","Trans","useTranslation","AuthControllerContext","PoolDataContext","transactionsAtom","DepositInfoList","PaneTitle","PoolNumber","TransactionsTakeTimeMessage","useSendTransaction","numberWithCommas","permitSignOrRegularDeposit","bn","utils","bigNumberify","ExecuteCryptoDeposit","props","t","transactions","setTransactions","nextStep","previousStep","router","quantity","query","chainId","usersAddress","provider","usersChainData","pool","decimals","underlyingCollateralDecimals","ticker","underlyingCollateralSymbol","tokenAddress","underlyingCollateralToken","poolAddress","controlledTokenAddress","prizeStrategy","singleRandomWinner","ticket","id","tickerUpcased","toUpperCase","txExecuted","setTxExecuted","txId","setTxId","txMainName","precision","txSubName","txName","sendTx","tx","find","runTx","referrerAddress","get","getAddress","e","constants","AddressZero","console","log","message","quantityBN","parseUnits","Number","sharedParams","cancelled","error","completed","valueInCentsWithDecimals","valueInCents","parseInt","number","amount","inWallet","sent"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\nimport Cookies from 'js-cookie'\nimport { ethers } from 'ethers'\nimport { useRouter } from 'next/router'\nimport { useAtom } from 'jotai'\n\nimport { REFERRER_ADDRESS_KEY } from 'lib/constants'\nimport { Trans, useTranslation } from 'lib/../i18n'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom'\nimport { DepositInfoList } from 'lib/components/DepositInfoList'\nimport { PaneTitle } from 'lib/components/PaneTitle'\nimport { PoolNumber } from 'lib/components/PoolNumber'\nimport { TransactionsTakeTimeMessage } from 'lib/components/TransactionsTakeTimeMessage'\nimport { useSendTransaction } from 'lib/hooks/useSendTransaction'\nimport { numberWithCommas } from 'lib/utils/numberWithCommas'\nimport { permitSignOrRegularDeposit } from 'lib/utils/permitSignOrRegularDeposit'\n\nconst bn = ethers.utils.bigNumberify\n\nexport function ExecuteCryptoDeposit(props) {\n  const { t } = useTranslation()\n\n  const [transactions, setTransactions] = useAtom(transactionsAtom)\n  \n  const { nextStep, previousStep } = props\n\n  const router = useRouter()\n  const quantity = router.query.quantity\n\n  const { chainId, usersAddress, provider } = useContext(AuthControllerContext)\n  const { usersChainData, pool } = useContext(PoolDataContext)\n\n  const decimals = pool?.underlyingCollateralDecimals\n  const ticker = pool?.underlyingCollateralSymbol\n  const tokenAddress = pool?.underlyingCollateralToken\n  const poolAddress = pool?.poolAddress\n  const controlledTokenAddress = pool?.prizeStrategy?.singleRandomWinner?.ticket?.id\n  const tickerUpcased = ticker?.toUpperCase()\n\n  // const {\n  //   usersDaiPermitAllowance,\n  // } = usersDataForPool(pool, usersChainData)\n\n  const [txExecuted, setTxExecuted] = useState(false)\n  const [txId, setTxId] = useState()\n\n  let txMainName = `${t('deposit')} ${numberWithCommas(quantity, { precision: 2 })} ${t('tickets')}`\n  // if (poolTokenSupportsPermitSign(chainId, tokenAddress)) {\n  //   txMainName = `${t('permitAnd')} ${txMainName}`\n  // }\n\n  const txSubName = `${quantity} ${tickerUpcased}`\n  const txName = `${txMainName} (${txSubName})`\n  \n  const [sendTx] = useSendTransaction(txName, transactions, setTransactions)\n\n  \n  \n  const tx = transactions?.find((tx) => tx.id === txId)\n\n  useEffect(() => {\n    const runTx = async () => {\n      setTxExecuted(true)\n\n      let referrerAddress = Cookies.get(REFERRER_ADDRESS_KEY)\n      try {\n        ethers.utils.getAddress(referrerAddress)\n      } catch (e) {\n        referrerAddress = ethers.constants.AddressZero\n        console.log(`referrer address was an invalid Ethereum address:`, e.message)\n      }\n\n      const quantityBN = ethers.utils.parseUnits(quantity, Number(decimals))\n      // const needsPermit = quantityBN.gt(0) && usersDaiPermitAllowance.lt(quantityBN)\n\n      const sharedParams = [\n        usersAddress,\n        quantityBN,\n        controlledTokenAddress,\n        referrerAddress,\n      ]\n\n      const id = await permitSignOrRegularDeposit(\n        t,\n        provider,\n        chainId,\n        usersAddress,\n        poolAddress,\n        tokenAddress,\n        sendTx,\n        sharedParams,\n        // needsPermit\n      )\n      setTxId(id)\n    }\n\n    if (!txExecuted && quantity && decimals) {\n      runTx()\n    }\n  }, [quantity, decimals])\n  \n  useEffect(() => {\n    if (tx?.cancelled || tx?.error) {\n      previousStep()\n    } else if (tx?.completed) {\n      nextStep()\n\n      const valueInCentsWithDecimals = Number(quantity) * 100\n      const valueInCents = parseInt(valueInCentsWithDecimals, 10)\n\n      // console.log('value in cents', valueInCents)\n      // console.log(window.fathom)\n      // if (window && window.Fathom) {\n        // console.log('send fathom')\n        // this is naive as the user would have to stay on\n        // the same page until the tx confirms, so it won't be accurate anyways\n        // (from app.jsx) Fathom.trackGoal('L4PBHM0U', valueInCents)\n      // }\n    }\n  }, [tx])\n\n  return <>\n    <PaneTitle short>\n      <Trans\n        i18nKey='depositAmountTicker'\n        defaults='Deposit <number>{{amount}}</number> {{ticker}}'\n        components={{\n          number: <PoolNumber />,\n        }}\n        values={{\n          amount: quantity,\n          ticker: tickerUpcased,\n        }}\n      />\n    </PaneTitle>\n\n    <div className='-mt-2'>\n      <PaneTitle small>\n        <Trans\n          i18nKey='forAmountTickets'\n          defaults='for <number>{{amount}}</number> tickets'\n          components={{\n            number: <PoolNumber />,\n          }}\n          values={{\n            amount: quantity,\n            ticker: tickerUpcased,\n          }}\n        />\n      </PaneTitle>\n    </div>\n\n    <div className='mt-4'>\n      <DepositInfoList />\n    </div>\n\n    {!tx?.completed && <>\n      <TransactionsTakeTimeMessage\n        tx={tx}\n        paneMessage={<>\n          {tx?.inWallet && t('confirmDepositInYourWallet')}\n          {tx?.sent && t('depositConfirming')}\n        </>}\n      />\n    </>}\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
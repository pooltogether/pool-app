{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useQueryCache } from 'react-query';\nimport { isEmpty } from 'lodash';\nimport { QUERY_KEYS } from 'lib/constants';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { ChainQueries } from 'lib/components/ChainQueries';\nimport { FetchUsersChainData } from 'lib/components/FetchUsersChainData';\nimport { GraphPoolDripQueries } from 'lib/components/queryComponents/GraphPoolDripQueries';\nimport { UniswapData } from 'lib/components/UniswapData';\nimport { usePoolsQuery } from 'lib/hooks/usePoolsQuery';\nimport { compilePools } from 'lib/services/compilePools';\nimport { getCurrentPool } from 'lib/services/getCurrentPool';\nimport { getContractAddresses } from 'lib/services/getContractAddresses';\nimport { getPoolDataFromQueryResult } from 'lib/services/getPoolDataFromQueryResult';\nimport { readProvider } from 'lib/services/readProvider';\nimport { poolToast } from 'lib/utils/poolToast';\nexport var PoolDataContext = /*#__PURE__*/React.createContext();\n\nvar debug = require('debug')('pool-app:PoolDataContext');\n\nexport function PoolDataContextProvider(props) {\n  _s();\n\n  var _router$query, _router$query$symbol;\n\n  var queryCache = useQueryCache();\n\n  var _useContext = useContext(AuthControllerContext),\n      supportedNetwork = _useContext.supportedNetwork,\n      networkName = _useContext.networkName,\n      chainId = _useContext.chainId,\n      pauseQueries = _useContext.pauseQueries,\n      usersAddress = _useContext.usersAddress;\n\n  var _useState = useState({}),\n      defaultReadProvider = _useState[0],\n      setDefaultReadProvider = _useState[1];\n\n  var router = useRouter();\n  var querySymbol = router === null || router === void 0 ? void 0 : (_router$query = router.query) === null || _router$query === void 0 ? void 0 : (_router$query$symbol = _router$query.symbol) === null || _router$query$symbol === void 0 ? void 0 : _router$query$symbol.toLowerCase();\n  useEffect(function () {\n    var getReadProvider = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var defaultReadProvider;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return readProvider(networkName);\n\n              case 2:\n                defaultReadProvider = _context.sent;\n                setDefaultReadProvider(defaultReadProvider);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getReadProvider() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    getReadProvider();\n  }, [networkName]);\n  var contractAddresses;\n\n  try {\n    if (supportedNetwork) {\n      contractAddresses = getContractAddresses(chainId);\n    }\n  } catch (e) {\n    poolToast.error(e);\n    console.error(e);\n  }\n\n  var blockNumber = -1;\n\n  var _usePoolsQuery = usePoolsQuery(pauseQueries, chainId, contractAddresses, blockNumber),\n      refetchPoolsData = _usePoolsQuery.refetch,\n      poolsGraphData = _usePoolsQuery.data,\n      poolsError = _usePoolsQuery.error,\n      poolsIsFetching = _usePoolsQuery.isFetching;\n\n  if (poolsError) {\n    poolToast.error(poolsError);\n    console.error(poolsError);\n  }\n\n  var poolData = getPoolDataFromQueryResult(contractAddresses, poolsGraphData);\n  var poolsDataLoading = !poolsGraphData;\n\n  if (!poolsIsFetching && !isEmpty(poolsGraphData)) {\n    // this should obviously be moved out of the global window namespace :)\n    window.hideGraphError();\n  }\n\n  return __jsx(React.Fragment, null, __jsx(ChainQueries, _extends({}, props, {\n    chainId: chainId,\n    provider: defaultReadProvider,\n    poolData: poolData\n  }), function (_ref2) {\n    var _poolData$daiPool, _ethereumErc20Awards$, _poolData$daiPool2;\n\n    var genericChainData = _ref2.genericChainData;\n    var pools = compilePools(chainId, contractAddresses, queryCache, poolData, genericChainData);\n    var currentPool = getCurrentPool(querySymbol, pools);\n    var ethereumErc20Awards = queryCache.getQueryData([QUERY_KEYS.ethereumErc20sQuery, chainId, poolData === null || poolData === void 0 ? void 0 : (_poolData$daiPool = poolData.daiPool) === null || _poolData$daiPool === void 0 ? void 0 : _poolData$daiPool.poolAddress, -1]);\n    var addresses = ethereumErc20Awards === null || ethereumErc20Awards === void 0 ? void 0 : (_ethereumErc20Awards$ = ethereumErc20Awards.filter(function (award) {\n      return award.balance.gt(0);\n    })) === null || _ethereumErc20Awards$ === void 0 ? void 0 : _ethereumErc20Awards$.map(function (award) {\n      return award.address;\n    });\n    return __jsx(UniswapData, {\n      addresses: addresses,\n      poolAddress: poolData === null || poolData === void 0 ? void 0 : (_poolData$daiPool2 = poolData.daiPool) === null || _poolData$daiPool2 === void 0 ? void 0 : _poolData$daiPool2.poolAddress\n    }, function () {\n      return __jsx(GraphPoolDripQueries, {\n        pools: pools\n      }, function (_ref3) {\n        var dripDataLoading = _ref3.dripDataLoading,\n            graphDripData = _ref3.graphDripData;\n        return __jsx(FetchUsersChainData, _extends({}, props, {\n          provider: defaultReadProvider,\n          pool: currentPool,\n          usersAddress: usersAddress,\n          graphDripData: graphDripData,\n          contractAddresses: contractAddresses\n        }), function (_ref4) {\n          var usersChainData = _ref4.usersChainData;\n          return __jsx(PoolDataContext.Provider, {\n            value: {\n              loading: poolsDataLoading,\n              pool: currentPool,\n              pools: pools,\n              contractAddresses: contractAddresses,\n              defaultReadProvider: defaultReadProvider,\n              genericChainData: genericChainData,\n              refetchPoolsData: refetchPoolsData,\n              graphDripData: graphDripData,\n              usersChainData: usersChainData\n            }\n          }, props.children);\n        });\n      });\n    });\n  }));\n}\n\n_s(PoolDataContextProvider, \"ryTfytQ407LOBCgKa7TpP3lFUgk=\", false, function () {\n  return [useQueryCache, useRouter, usePoolsQuery];\n});\n\n_c = PoolDataContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PoolDataContextProvider\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/contextProviders/PoolDataContextProvider.jsx"],"names":["React","useContext","useEffect","useState","useRouter","useQueryCache","isEmpty","QUERY_KEYS","AuthControllerContext","ChainQueries","FetchUsersChainData","GraphPoolDripQueries","UniswapData","usePoolsQuery","compilePools","getCurrentPool","getContractAddresses","getPoolDataFromQueryResult","readProvider","poolToast","PoolDataContext","createContext","debug","require","PoolDataContextProvider","props","queryCache","supportedNetwork","networkName","chainId","pauseQueries","usersAddress","defaultReadProvider","setDefaultReadProvider","router","querySymbol","query","symbol","toLowerCase","getReadProvider","contractAddresses","e","error","console","blockNumber","refetchPoolsData","refetch","poolsGraphData","data","poolsError","poolsIsFetching","isFetching","poolData","poolsDataLoading","window","hideGraphError","genericChainData","pools","currentPool","ethereumErc20Awards","getQueryData","ethereumErc20sQuery","daiPool","poolAddress","addresses","filter","award","balance","gt","map","address","dripDataLoading","graphDripData","usersChainData","loading","pool","children"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,oBAAT,QAAqC,qDAArC;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,oBAAT,QAAqC,mCAArC;AACA,SAASC,0BAAT,QAA2C,yCAA3C;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAEA,OAAO,IAAMC,eAAe,gBAAGpB,KAAK,CAACqB,aAAN,EAAxB;;AACP,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,0BAAjB,CAAd;;AAEA,OAAO,SAASC,uBAAT,CAAiCC,KAAjC,EAAwC;AAAA;;AAAA;;AAC7C,MAAMC,UAAU,GAAGrB,aAAa,EAAhC;;AAD6C,oBASzCJ,UAAU,CAACO,qBAAD,CAT+B;AAAA,MAI3CmB,gBAJ2C,eAI3CA,gBAJ2C;AAAA,MAK3CC,WAL2C,eAK3CA,WAL2C;AAAA,MAM3CC,OAN2C,eAM3CA,OAN2C;AAAA,MAO3CC,YAP2C,eAO3CA,YAP2C;AAAA,MAQ3CC,YAR2C,eAQ3CA,YAR2C;;AAAA,kBAWS5B,QAAQ,CAAC,EAAD,CAXjB;AAAA,MAWtC6B,mBAXsC;AAAA,MAWjBC,sBAXiB;;AAa7C,MAAMC,MAAM,GAAG9B,SAAS,EAAxB;AACA,MAAM+B,WAAW,GAAGD,MAAH,aAAGA,MAAH,wCAAGA,MAAM,CAAEE,KAAX,0EAAG,cAAeC,MAAlB,yDAAG,qBAAuBC,WAAvB,EAApB;AAEApC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMqC,eAAe;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACYrB,YAAY,CAACU,WAAD,CADxB;;AAAA;AAChBI,gBAAAA,mBADgB;AAEtBC,gBAAAA,sBAAsB,CAACD,mBAAD,CAAtB;;AAFsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAfO,eAAe;AAAA;AAAA;AAAA,OAArB;;AAIAA,IAAAA,eAAe;AAChB,GANQ,EAMN,CAACX,WAAD,CANM,CAAT;AAWA,MAAIY,iBAAJ;;AACA,MAAI;AACF,QAAIb,gBAAJ,EAAsB;AACpBa,MAAAA,iBAAiB,GAAGxB,oBAAoB,CAACa,OAAD,CAAxC;AACD;AACF,GAJD,CAIE,OAAOY,CAAP,EAAU;AACVtB,IAAAA,SAAS,CAACuB,KAAV,CAAgBD,CAAhB;AACAE,IAAAA,OAAO,CAACD,KAAR,CAAcD,CAAd;AACD;;AAGD,MAAMG,WAAW,GAAG,CAAC,CAArB;;AAtC6C,uBA4CzC/B,aAAa,CAACiB,YAAD,EAAeD,OAAf,EAAwBW,iBAAxB,EAA2CI,WAA3C,CA5C4B;AAAA,MAwClCC,gBAxCkC,kBAwC3CC,OAxC2C;AAAA,MAyCrCC,cAzCqC,kBAyC3CC,IAzC2C;AAAA,MA0CpCC,UA1CoC,kBA0C3CP,KA1C2C;AAAA,MA2C/BQ,eA3C+B,kBA2C3CC,UA3C2C;;AA8C7C,MAAIF,UAAJ,EAAgB;AACd9B,IAAAA,SAAS,CAACuB,KAAV,CAAgBO,UAAhB;AACAN,IAAAA,OAAO,CAACD,KAAR,CAAcO,UAAd;AACD;;AAED,MAAMG,QAAQ,GAAGnC,0BAA0B,CAACuB,iBAAD,EAAoBO,cAApB,CAA3C;AAEA,MAAMM,gBAAgB,GAAG,CAACN,cAA1B;;AAEA,MAAI,CAACG,eAAD,IAAoB,CAAC5C,OAAO,CAACyC,cAAD,CAAhC,EAAkD;AAChD;AACAO,IAAAA,MAAM,CAACC,cAAP;AACD;;AAED,SAAO,4BACL,MAAC,YAAD,eACM9B,KADN;AAEE,IAAA,OAAO,EAAEI,OAFX;AAGE,IAAA,QAAQ,EAAEG,mBAHZ;AAIE,IAAA,QAAQ,EAAEoB;AAJZ,MAMG,iBAA0B;AAAA;;AAAA,QAAvBI,gBAAuB,SAAvBA,gBAAuB;AACzB,QAAMC,KAAK,GAAG3C,YAAY,CAACe,OAAD,EAAUW,iBAAV,EAA6Bd,UAA7B,EAAyC0B,QAAzC,EAAmDI,gBAAnD,CAA1B;AAEA,QAAME,WAAW,GAAG3C,cAAc,CAACoB,WAAD,EAAcsB,KAAd,CAAlC;AAEA,QAAME,mBAAmB,GAAGjC,UAAU,CAACkC,YAAX,CAAwB,CAClDrD,UAAU,CAACsD,mBADuC,EAElDhC,OAFkD,EAGlDuB,QAHkD,aAGlDA,QAHkD,4CAGlDA,QAAQ,CAAEU,OAHwC,sDAGlD,kBAAmBC,WAH+B,EAIlD,CAAC,CAJiD,CAAxB,CAA5B;AAMA,QAAMC,SAAS,GAAGL,mBAAH,aAAGA,mBAAH,gDAAGA,mBAAmB,CACjCM,MADc,CACP,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACC,OAAN,CAAcC,EAAd,CAAiB,CAAjB,CAAJ;AAAA,KADE,CAAH,0DAAG,sBAEdC,GAFc,CAEV,UAAAH,KAAK;AAAA,aAAIA,KAAK,CAACI,OAAV;AAAA,KAFK,CAAlB;AAIA,WAAO,MAAC,WAAD;AACL,MAAA,SAAS,EAAEN,SADN;AAEL,MAAA,WAAW,EAAEZ,QAAF,aAAEA,QAAF,6CAAEA,QAAQ,CAAEU,OAAZ,uDAAE,mBAAmBC;AAF3B,OAIJ,YAAM;AACL,aAAO,MAAC,oBAAD;AACL,QAAA,KAAK,EAAEN;AADF,SAGJ,iBAAwC;AAAA,YAArCc,eAAqC,SAArCA,eAAqC;AAAA,YAApBC,aAAoB,SAApBA,aAAoB;AACvC,eAAO,MAAC,mBAAD,eACD/C,KADC;AAEL,UAAA,QAAQ,EAAEO,mBAFL;AAGL,UAAA,IAAI,EAAE0B,WAHD;AAIL,UAAA,YAAY,EAAE3B,YAJT;AAKL,UAAA,aAAa,EAAEyC,aALV;AAML,UAAA,iBAAiB,EAAEhC;AANd,YAQJ,iBAAwB;AAAA,cAArBiC,cAAqB,SAArBA,cAAqB;AACvB,iBAAO,MAAC,eAAD,CAAiB,QAAjB;AACL,YAAA,KAAK,EAAE;AACLC,cAAAA,OAAO,EAAErB,gBADJ;AAELsB,cAAAA,IAAI,EAAEjB,WAFD;AAGLD,cAAAA,KAAK,EAALA,KAHK;AAILjB,cAAAA,iBAAiB,EAAjBA,iBAJK;AAKLR,cAAAA,mBAAmB,EAAnBA,mBALK;AAMLwB,cAAAA,gBAAgB,EAAhBA,gBANK;AAOLX,cAAAA,gBAAgB,EAAhBA,gBAPK;AAQL2B,cAAAA,aAAa,EAAbA,aARK;AASLC,cAAAA,cAAc,EAAdA;AATK;AADF,aAaJhD,KAAK,CAACmD,QAbF,CAAP;AAeD,SAxBI,CAAP;AA0BD,OA9BI,CAAP;AAgCD,KArCI,CAAP;AAuCD,GA5DH,CADK,CAAP;AAgED;;GA5HepD,uB;UACKnB,a,EAYJD,S,EA+BXS,a;;;KA5CUW,uB","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { useQueryCache } from 'react-query'\nimport { isEmpty } from 'lodash'\n\nimport { QUERY_KEYS } from 'lib/constants'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { ChainQueries } from 'lib/components/ChainQueries'\nimport { FetchUsersChainData } from 'lib/components/FetchUsersChainData'\nimport { GraphPoolDripQueries } from 'lib/components/queryComponents/GraphPoolDripQueries'\nimport { UniswapData } from 'lib/components/UniswapData'\nimport { usePoolsQuery } from 'lib/hooks/usePoolsQuery'\nimport { compilePools } from 'lib/services/compilePools'\nimport { getCurrentPool } from 'lib/services/getCurrentPool'\nimport { getContractAddresses } from 'lib/services/getContractAddresses'\nimport { getPoolDataFromQueryResult } from 'lib/services/getPoolDataFromQueryResult'\nimport { readProvider } from 'lib/services/readProvider'\nimport { poolToast } from 'lib/utils/poolToast'\n\nexport const PoolDataContext = React.createContext()\nconst debug = require('debug')('pool-app:PoolDataContext')\n\nexport function PoolDataContextProvider(props) {\n  const queryCache = useQueryCache()\n\n  const {\n    supportedNetwork,\n    networkName,\n    chainId,\n    pauseQueries,\n    usersAddress\n  } = useContext(AuthControllerContext)\n\n  const [defaultReadProvider, setDefaultReadProvider] = useState({})\n\n  const router = useRouter()\n  const querySymbol = router?.query?.symbol?.toLowerCase()\n\n  useEffect(() => {\n    const getReadProvider = async () => {\n      const defaultReadProvider = await readProvider(networkName)\n      setDefaultReadProvider(defaultReadProvider)\n    }\n    getReadProvider()\n  }, [networkName])\n\n\n\n\n  let contractAddresses\n  try {\n    if (supportedNetwork) {\n      contractAddresses = getContractAddresses(chainId)\n    }\n  } catch (e) {\n    poolToast.error(e)\n    console.error(e)\n  }\n\n\n  const blockNumber = -1\n  const {\n    refetch: refetchPoolsData,\n    data: poolsGraphData,\n    error: poolsError,\n    isFetching: poolsIsFetching,\n  } = usePoolsQuery(pauseQueries, chainId, contractAddresses, blockNumber)\n\n  if (poolsError) {\n    poolToast.error(poolsError)\n    console.error(poolsError)\n  }\n\n  const poolData = getPoolDataFromQueryResult(contractAddresses, poolsGraphData)\n\n  const poolsDataLoading = !poolsGraphData\n\n  if (!poolsIsFetching && !isEmpty(poolsGraphData)) {\n    // this should obviously be moved out of the global window namespace :)\n    window.hideGraphError()\n  }\n\n  return <>\n    <ChainQueries\n      {...props}\n      chainId={chainId}\n      provider={defaultReadProvider}\n      poolData={poolData}\n    >\n      {({ genericChainData }) => {\n        const pools = compilePools(chainId, contractAddresses, queryCache, poolData, genericChainData)\n\n        const currentPool = getCurrentPool(querySymbol, pools)\n        \n        const ethereumErc20Awards = queryCache.getQueryData([\n          QUERY_KEYS.ethereumErc20sQuery,\n          chainId,\n          poolData?.daiPool?.poolAddress,\n          -1\n        ])\n        const addresses = ethereumErc20Awards\n          ?.filter(award => award.balance.gt(0))\n          ?.map(award => award.address)\n\n        return <UniswapData\n          addresses={addresses}\n          poolAddress={poolData?.daiPool?.poolAddress}\n        >\n          {() => {\n            return <GraphPoolDripQueries\n              pools={pools}\n            >\n              {({ dripDataLoading, graphDripData }) => {\n                return <FetchUsersChainData\n                  {...props}\n                  provider={defaultReadProvider}\n                  pool={currentPool}\n                  usersAddress={usersAddress}\n                  graphDripData={graphDripData}\n                  contractAddresses={contractAddresses}\n                >\n                  {({ usersChainData }) => {\n                    return <PoolDataContext.Provider\n                      value={{\n                        loading: poolsDataLoading,\n                        pool: currentPool,\n                        pools,\n                        contractAddresses,\n                        defaultReadProvider,\n                        genericChainData,\n                        refetchPoolsData,\n                        graphDripData,\n                        usersChainData,\n                      }}\n                    >\n                      {props.children}\n                    </PoolDataContext.Provider>\n                  }}\n                </FetchUsersChainData>\n              }}\n            </GraphPoolDripQueries>\n          }}\n        </UniswapData>\n      }}\n    </ChainQueries>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { arc } from 'd3-shape';\nimport { scaleLinear } from 'd3-scale'; // import { format } from 'd3-format'\n\nimport { ThemeContext } from 'lib/components/contextProviders/ThemeContextProvider';\nexport function Gauge(_ref) {\n  _s();\n\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? 50 : _ref$value,\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 0 : _ref$min,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max,\n      label = _ref.label,\n      units = _ref.units;\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme;\n\n  var backgroundFillColor = theme === 'light' ? '#9f82d7' : '#222B45';\n  var startAngle = -Math.PI / 2 - 0.6;\n  var endAngle = Math.PI / 2 + 0.6;\n  var backgroundArc = arc().innerRadius(0.85).outerRadius(1).startAngle(startAngle).endAngle(endAngle).cornerRadius(1)();\n  var percentScale = scaleLinear().domain([min, max]).range([0, 1]);\n  var percent = percentScale(value);\n  var angleScale = scaleLinear().domain([0, 1]).range([startAngle, endAngle]).clamp(true);\n  var angle = angleScale(percent);\n  var filledArc = arc().innerRadius(0.85).outerRadius(1).startAngle(startAngle).endAngle(angle).cornerRadius(1)();\n  var colorScale = scaleLinear().domain([0, 1]).range(['#EF2751', '#6CE988']);\n  var gradientSteps = colorScale.ticks(10).map(function (value) {\n    return colorScale(value);\n  }); // const markerLocation = getCoordsOnArc(\n  //   angle,\n  //   1 - ((1 - 0.65) / 2),\n  // )\n\n  return __jsx(\"div\", {\n    className: \"text-center\"\n  }, __jsx(\"svg\", {\n    className: \"mx-auto overflow-visible\",\n    width: \"15em\",\n    viewBox: [-1, -1, 2, 1].join(' ')\n  }, __jsx(\"defs\", null, __jsx(\"linearGradient\", {\n    id: \"Gauge__gradient\",\n    gradientUnits: \"userSpaceOnUse\",\n    x1: \"-1\",\n    x2: \"1\",\n    y2: \"0\"\n  }, gradientSteps.map(function (color, index) {\n    return __jsx(\"stop\", {\n      key: color,\n      stopColor: color,\n      offset: \"\".concat(index / (gradientSteps.length - 1))\n    });\n  }))), __jsx(\"path\", {\n    d: backgroundArc,\n    fill: backgroundFillColor\n  }), __jsx(\"path\", {\n    d: filledArc,\n    fill: \"url(#Gauge__gradient)\"\n  })), __jsx(\"div\", {\n    className: \"relative\",\n    style: {\n      top: '-5.5rem'\n    }\n  }, label));\n} // const getCoordsOnArc = (angle, offset = 10) => [\n//   Math.cos(angle - (Math.PI / 2)) * offset,\n//   Math.sin(angle - (Math.PI / 2)) * offset,\n// ]\n\n_s(Gauge, \"LidUGjXGvl6nqLnPI8yC77ot4bM=\");\n\n_c = Gauge;\n\nvar _c;\n\n$RefreshReg$(_c, \"Gauge\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/Gauge.jsx"],"names":["React","useContext","arc","scaleLinear","ThemeContext","Gauge","value","min","max","label","units","theme","backgroundFillColor","startAngle","Math","PI","endAngle","backgroundArc","innerRadius","outerRadius","cornerRadius","percentScale","domain","range","percent","angleScale","clamp","angle","filledArc","colorScale","gradientSteps","ticks","map","join","color","index","length","top"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,WAAT,QAA4B,UAA5B,C,CACA;;AAEA,SAASC,YAAT,QAA6B,sDAA7B;AAEA,OAAO,SAASC,KAAT,OAMJ;AAAA;;AAAA,wBALDC,KAKC;AAAA,MALDA,KAKC,2BALO,EAKP;AAAA,sBAJDC,GAIC;AAAA,MAJDA,GAIC,yBAJK,CAIL;AAAA,sBAHDC,GAGC;AAAA,MAHDA,GAGC,yBAHK,GAGL;AAAA,MAFDC,KAEC,QAFDA,KAEC;AAAA,MADDC,KACC,QADDA,KACC;;AAAA,oBACiBT,UAAU,CAACG,YAAD,CAD3B;AAAA,MACOO,KADP,eACOA,KADP;;AAGD,MAAMC,mBAAmB,GAAGD,KAAK,KAAK,OAAV,GAAoB,SAApB,GAAgC,SAA5D;AAEA,MAAME,UAAU,GAAI,CAACC,IAAI,CAACC,EAAN,GAAW,CAAZ,GAAiB,GAApC;AACA,MAAMC,QAAQ,GAAIF,IAAI,CAACC,EAAL,GAAU,CAAX,GAAgB,GAAjC;AAEA,MAAME,aAAa,GAAGf,GAAG,GACtBgB,WADmB,CACP,IADO,EAEnBC,WAFmB,CAEP,CAFO,EAGnBN,UAHmB,CAGRA,UAHQ,EAInBG,QAJmB,CAIVA,QAJU,EAKnBI,YALmB,CAKN,CALM,GAAtB;AAQA,MAAMC,YAAY,GAAGlB,WAAW,GAC7BmB,MADkB,CACX,CAACf,GAAD,EAAMC,GAAN,CADW,EAElBe,KAFkB,CAEZ,CAAC,CAAD,EAAI,CAAJ,CAFY,CAArB;AAGA,MAAMC,OAAO,GAAGH,YAAY,CAACf,KAAD,CAA5B;AAEA,MAAMmB,UAAU,GAAGtB,WAAW,GAC3BmB,MADgB,CACT,CAAC,CAAD,EAAI,CAAJ,CADS,EAEhBC,KAFgB,CAEV,CAACV,UAAD,EAAaG,QAAb,CAFU,EAGhBU,KAHgB,CAGV,IAHU,CAAnB;AAKA,MAAMC,KAAK,GAAGF,UAAU,CAACD,OAAD,CAAxB;AAEA,MAAMI,SAAS,GAAG1B,GAAG,GAClBgB,WADe,CACH,IADG,EAEfC,WAFe,CAEH,CAFG,EAGfN,UAHe,CAGJA,UAHI,EAIfG,QAJe,CAINW,KAJM,EAKfP,YALe,CAKF,CALE,GAAlB;AAQA,MAAMS,UAAU,GAAG1B,WAAW,GAC3BmB,MADgB,CACT,CAAC,CAAD,EAAI,CAAJ,CADS,EAEhBC,KAFgB,CAEV,CAAC,SAAD,EAAY,SAAZ,CAFU,CAAnB;AAIA,MAAMO,aAAa,GAAGD,UAAU,CAACE,KAAX,CAAiB,EAAjB,EACnBC,GADmB,CACf,UAAA1B,KAAK;AAAA,WAAIuB,UAAU,CAACvB,KAAD,CAAd;AAAA,GADU,CAAtB,CAxCC,CA2CD;AACA;AACA;AACA;;AAEA,SACE;AACE,IAAA,SAAS,EAAC;AADZ,KAGE;AACE,IAAA,SAAS,EAAC,0BADZ;AAEE,IAAA,KAAK,EAAC,MAFR;AAGE,IAAA,OAAO,EAAE,CACP,CAAC,CADM,EACH,CAAC,CADE,EAEP,CAFO,EAEJ,CAFI,EAGP2B,IAHO,CAGF,GAHE;AAHX,KAQE,oBACE;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,aAAa,EAAC,gBAFhB;AAGE,IAAA,EAAE,EAAC,IAHL;AAIE,IAAA,EAAE,EAAC,GAJL;AAKE,IAAA,EAAE,EAAC;AALL,KAMGH,aAAa,CAACE,GAAd,CAAkB,UAACE,KAAD,EAAQC,KAAR;AAAA,WACjB;AACE,MAAA,GAAG,EAAED,KADP;AAEE,MAAA,SAAS,EAAEA,KAFb;AAGE,MAAA,MAAM,YAAKC,KAAK,IACXL,aAAa,CAACM,MAAd,GAAuB,CADZ,CAAV;AAHR,MADiB;AAAA,GAAlB,CANH,CADF,CARF,EA0BE;AACE,IAAA,CAAC,EAAEnB,aADL;AAEE,IAAA,IAAI,EAAEL;AAFR,IA1BF,EA8BE;AACE,IAAA,CAAC,EAAEgB,SADL;AAEE,IAAA,IAAI,EAAC;AAFP,IA9BF,CAHF,EA+DE;AACE,IAAA,SAAS,EAAC,UADZ;AAEE,IAAA,KAAK,EAAE;AACLS,MAAAA,GAAG,EAAE;AADA;AAFT,KAMG5B,KANH,CA/DF,CADF;AAoFD,C,CAED;AACA;AACA;AACA;;GA/IgBJ,K;;KAAAA,K","sourcesContent":["import React, { useContext } from 'react'\nimport { arc } from 'd3-shape'\nimport { scaleLinear } from 'd3-scale'\n// import { format } from 'd3-format'\n\nimport { ThemeContext } from 'lib/components/contextProviders/ThemeContextProvider'\n\nexport function Gauge({\n  value = 50,\n  min = 0,\n  max = 100,\n  label,\n  units,\n}) {\n  const { theme } = useContext(ThemeContext)\n\n  const backgroundFillColor = theme === 'light' ? '#9f82d7' : '#222B45'\n\n  const startAngle = (-Math.PI / 2) - 0.6\n  const endAngle = (Math.PI / 2) + 0.6\n\n  const backgroundArc = arc()\n    .innerRadius(0.85)\n    .outerRadius(1)\n    .startAngle(startAngle)\n    .endAngle(endAngle)\n    .cornerRadius(1)\n    ()\n\n  const percentScale = scaleLinear()\n    .domain([min, max])\n    .range([0, 1])\n  const percent = percentScale(value)\n\n  const angleScale = scaleLinear()\n    .domain([0, 1])\n    .range([startAngle, endAngle])\n    .clamp(true)\n\n  const angle = angleScale(percent)\n\n  const filledArc = arc()\n    .innerRadius(0.85)\n    .outerRadius(1)\n    .startAngle(startAngle)\n    .endAngle(angle)\n    .cornerRadius(1)\n    ()\n\n  const colorScale = scaleLinear()\n    .domain([0, 1])\n    .range(['#EF2751', '#6CE988'])\n\n  const gradientSteps = colorScale.ticks(10)\n    .map(value => colorScale(value))\n\n  // const markerLocation = getCoordsOnArc(\n  //   angle,\n  //   1 - ((1 - 0.65) / 2),\n  // )\n\n  return (\n    <div\n      className='text-center'\n    >\n      <svg\n        className='mx-auto overflow-visible'\n        width='15em'\n        viewBox={[\n          -1, -1,\n          2, 1,\n        ].join(' ')}\n      >\n        <defs>\n          <linearGradient\n            id='Gauge__gradient'\n            gradientUnits='userSpaceOnUse'\n            x1='-1'\n            x2='1'\n            y2='0'>\n            {gradientSteps.map((color, index) => (\n              <stop\n                key={color}\n                stopColor={color}\n                offset={`${index\n                  / (gradientSteps.length - 1)\n                  }`}\n              />\n            ))}\n          </linearGradient>\n        </defs>\n        <path\n          d={backgroundArc}\n          fill={backgroundFillColor}\n        />\n        <path\n          d={filledArc}\n          fill=\"url(#Gauge__gradient)\"\n        />\n        {/* <line\n          y1=\"-1\"\n          y2=\"-0.65\"\n          stroke=\"white\"\n          strokeWidth=\"0.027\"\n        /> */}\n        {/* <circle\n          cx={markerLocation[0]}\n          cy={markerLocation[1]}\n          r='0.5'\n          stroke='#2c3e50'\n          strokeWidth='0.01'\n          fill={colorScale(percent)}\n        /> */}\n        {/* <path\n          d=\"M0.136364 0.0290102C0.158279 -0.0096701 0.219156 -0.00967009 0.241071 0.0290102C0.297078 0.120023 0.375 0.263367 0.375 0.324801C0.375 0.422639 0.292208 0.5 0.1875 0.5C0.0852272 0.5 -1.8346e-08 0.422639 -9.79274e-09 0.324801C0.00243506 0.263367 0.0803571 0.120023 0.136364 0.0290102ZM0.1875 0.381684C0.221591 0.381684 0.248377 0.356655 0.248377 0.324801C0.248377 0.292947 0.221591 0.267918 0.1875 0.267918C0.153409 0.267918 0.126623 0.292947 0.126623 0.324801C0.126623 0.356655 0.155844 0.381684 0.1875 0.381684Z\"\n          transform={`rotate(${angle * (180 / Math.PI)\n            }) translate(-0.2, -0.33)`}\n          fill=\"#6a6a85\"\n        /> */}\n      </svg>\n\n      {/* <div>\n        {format(\",\")(value)}\n      </div> */}\n\n      <div\n        className='relative'\n        style={{\n          top: '-5.5rem'\n        }}\n      >\n        {label}\n      </div>\n\n      {/* {units && (\n        <div style={{\n          color: \"#8b8ba7\",\n          lineHeight: \"1.3em\",\n          fontWeight: \"300\",\n        }}>\n          { units}\n        </div>\n      )} */}\n    </div>\n  )\n}\n\n// const getCoordsOnArc = (angle, offset = 10) => [\n//   Math.cos(angle - (Math.PI / 2)) * offset,\n//   Math.sin(angle - (Math.PI / 2)) * offset,\n// ]\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { isEmpty } from 'lodash';\nimport { ethers } from 'ethers';\nimport { TOKEN_VALUES } from 'lib/constants';\nexport var compileErc20Awards = function compileErc20Awards(erc20ChainData, poolData, uniswapPriceData) {\n  var _poolData$prizeStrate;\n\n  var erc20GraphData = poolData === null || poolData === void 0 ? void 0 : (_poolData$prizeStrate = poolData.prizeStrategy) === null || _poolData$prizeStrate === void 0 ? void 0 : _poolData$prizeStrate.externalErc20Awards;\n\n  if (isEmpty(erc20ChainData) || isEmpty(erc20GraphData) || isEmpty(uniswapPriceData)) {\n    return {};\n  }\n\n  var data = {};\n  erc20GraphData.forEach(function (obj) {\n    var chainData = erc20ChainData.find(function (token) {\n      return obj.address === token.address;\n    });\n    var priceData = uniswapPriceData[obj.address];\n    var priceUSD = TOKEN_VALUES === null || TOKEN_VALUES === void 0 ? void 0 : TOKEN_VALUES[obj.address];\n\n    if (!priceUSD) {\n      priceUSD = priceData === null || priceData === void 0 ? void 0 : priceData.usd;\n    }\n\n    var balanceFormatted = ethers.utils.formatUnits(chainData.balance, parseInt(obj.decimals, 10));\n    var value = priceUSD && parseFloat(balanceFormatted) * priceUSD;\n    data[obj.address] = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, obj), chainData), priceData), {}, {\n      value: value\n    });\n  });\n  return data;\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/services/compileErc20Awards.jsx"],"names":["isEmpty","ethers","TOKEN_VALUES","compileErc20Awards","erc20ChainData","poolData","uniswapPriceData","erc20GraphData","prizeStrategy","externalErc20Awards","data","forEach","obj","chainData","find","token","address","priceData","priceUSD","usd","balanceFormatted","utils","formatUnits","balance","parseInt","decimals","value","parseFloat"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,cAAD,EAAiBC,QAAjB,EAA2BC,gBAA3B,EAAgD;AAAA;;AAChF,MAAMC,cAAc,GAAGF,QAAH,aAAGA,QAAH,gDAAGA,QAAQ,CAAEG,aAAb,0DAAG,sBAAyBC,mBAAhD;;AAEA,MACET,OAAO,CAACI,cAAD,CAAP,IACAJ,OAAO,CAACO,cAAD,CADP,IAEAP,OAAO,CAACM,gBAAD,CAHT,EAIE;AACA,WAAO,EAAP;AACD;;AAED,MAAII,IAAI,GAAG,EAAX;AAEAH,EAAAA,cAAc,CAACI,OAAf,CAAuB,UAAAC,GAAG,EAAI;AAC5B,QAAMC,SAAS,GAAGT,cAAc,CAACU,IAAf,CAAoB,UAAAC,KAAK;AAAA,aAAIH,GAAG,CAACI,OAAJ,KAAgBD,KAAK,CAACC,OAA1B;AAAA,KAAzB,CAAlB;AACA,QAAMC,SAAS,GAAGX,gBAAgB,CAACM,GAAG,CAACI,OAAL,CAAlC;AAEA,QAAIE,QAAQ,GAAGhB,YAAH,aAAGA,YAAH,uBAAGA,YAAY,CAAGU,GAAG,CAACI,OAAP,CAA3B;;AACA,QAAI,CAACE,QAAL,EAAe;AACbA,MAAAA,QAAQ,GAAGD,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEE,GAAtB;AACD;;AAED,QAAMC,gBAAgB,GAAGnB,MAAM,CAACoB,KAAP,CAAaC,WAAb,CAAyBT,SAAS,CAACU,OAAnC,EAA4CC,QAAQ,CAACZ,GAAG,CAACa,QAAL,EAAe,EAAf,CAApD,CAAzB;AACA,QAAMC,KAAK,GAAGR,QAAQ,IAAIS,UAAU,CAACP,gBAAD,CAAV,GAA+BF,QAAzD;AAEAR,IAAAA,IAAI,CAACE,GAAG,CAACI,OAAL,CAAJ,+DACKJ,GADL,GAEKC,SAFL,GAGKI,SAHL;AAIES,MAAAA,KAAK,EAALA;AAJF;AAMD,GAlBD;AAoBA,SAAOhB,IAAP;AACD,CAlCM","sourcesContent":["import { isEmpty } from 'lodash'\nimport { ethers } from 'ethers'\n\nimport { TOKEN_VALUES } from 'lib/constants'\n\nexport const compileErc20Awards = (erc20ChainData, poolData, uniswapPriceData) => {\n  const erc20GraphData = poolData?.prizeStrategy?.externalErc20Awards\n\n  if (\n    isEmpty(erc20ChainData) ||\n    isEmpty(erc20GraphData) ||\n    isEmpty(uniswapPriceData)\n  ) {\n    return {}\n  }\n\n  let data = {}\n\n  erc20GraphData.forEach(obj => {\n    const chainData = erc20ChainData.find(token => obj.address === token.address)\n    const priceData = uniswapPriceData[obj.address]\n\n    let priceUSD = TOKEN_VALUES?.[obj.address]\n    if (!priceUSD) {\n      priceUSD = priceData?.usd\n    }\n\n    const balanceFormatted = ethers.utils.formatUnits(chainData.balance, parseInt(obj.decimals, 10))\n    const value = priceUSD && parseFloat(balanceFormatted) * priceUSD\n\n    data[obj.address] = {\n      ...obj,\n      ...chainData,\n      ...priceData,\n      value\n    }\n  })\n\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useContext } from 'react';\nimport { useAtom } from 'jotai';\nimport { TRANSACTIONS_KEY } from 'lib/constants';\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { checkTransactionStatuses } from 'lib/utils/checkTransactionStatuses'; // bring in new list of tx's from localStorage and check\n// if any are ongoing & what their status is\n\nvar readTransactions = function readTransactions(transactions, setTransactions, chainId, usersAddress, provider) {\n  try {\n    var txs = [];\n\n    if (true) {\n      var storageKey = \"\".concat(chainId, \"-\").concat(usersAddress.toLowerCase(), \"-\").concat(TRANSACTIONS_KEY);\n      txs = JSON.parse(localStorage.getItem(storageKey));\n      txs = txs ? txs : [];\n    }\n\n    txs = txs.filter(function (tx) {\n      return tx.sent && !tx.cancelled;\n    }); // re-write IDs so transactions are ordered properly\n\n    txs = txs.map(function (tx, index) {\n      return (tx.id = index + 1) && tx;\n    });\n    setTransactions(_toConsumableArray(txs));\n    checkTransactionStatuses(txs, provider, transactions, setTransactions);\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport function TransactionStatusChecker(props) {\n  _s();\n\n  var _useAtom = useAtom(transactionsAtom),\n      _useAtom2 = _slicedToArray(_useAtom, 2),\n      transactions = _useAtom2[0],\n      setTransactions = _useAtom2[1];\n\n  var _useContext = useContext(AuthControllerContext),\n      chainId = _useContext.chainId,\n      usersAddress = _useContext.usersAddress,\n      provider = _useContext.provider;\n\n  useEffect(function () {\n    if (chainId && usersAddress && provider) {\n      readTransactions(transactions, setTransactions, chainId, usersAddress, provider);\n    }\n  }, [chainId, usersAddress, provider]);\n  return null;\n}\n\n_s(TransactionStatusChecker, \"Krjy7MmorH3qAZbpEc3r67qB8Tw=\", false, function () {\n  return [useAtom];\n});\n\n_c = TransactionStatusChecker;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionStatusChecker\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/TransactionStatusChecker.jsx"],"names":["useEffect","useContext","useAtom","TRANSACTIONS_KEY","transactionsAtom","AuthControllerContext","checkTransactionStatuses","readTransactions","transactions","setTransactions","chainId","usersAddress","provider","txs","storageKey","toLowerCase","JSON","parse","localStorage","getItem","filter","tx","sent","cancelled","map","index","id","e","console","error","TransactionStatusChecker","props"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,wBAAT,QAAyC,oCAAzC,C,CAEA;AACA;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,YAAD,EAAeC,eAAf,EAAgCC,OAAhC,EAAyCC,YAAzC,EAAuDC,QAAvD,EAAoE;AAC3F,MAAI;AACF,QAAIC,GAAG,GAAG,EAAV;;AACA,cAAmC;AACjC,UAAMC,UAAU,aAAMJ,OAAN,cAAiBC,YAAY,CAACI,WAAb,EAAjB,cAA+CZ,gBAA/C,CAAhB;AAEAU,MAAAA,GAAG,GAAGG,IAAI,CAACC,KAAL,CACJC,YAAY,CAACC,OAAb,CAAqBL,UAArB,CADI,CAAN;AAGAD,MAAAA,GAAG,GAAGA,GAAG,GAAGA,GAAH,GAAS,EAAlB;AACD;;AAEDA,IAAAA,GAAG,GAAGA,GAAG,CAACO,MAAJ,CAAW,UAAAC,EAAE;AAAA,aAAIA,EAAE,CAACC,IAAH,IAAW,CAACD,EAAE,CAACE,SAAnB;AAAA,KAAb,CAAN,CAXE,CAaF;;AACAV,IAAAA,GAAG,GAAGA,GAAG,CAACW,GAAJ,CAAQ,UAACH,EAAD,EAAKI,KAAL;AAAA,aAAe,CAACJ,EAAE,CAACK,EAAH,GAAQD,KAAK,GAAG,CAAjB,KAAuBJ,EAAtC;AAAA,KAAR,CAAN;AAEAZ,IAAAA,eAAe,oBAAKI,GAAL,EAAf;AACAP,IAAAA,wBAAwB,CAACO,GAAD,EAAMD,QAAN,EAAgBJ,YAAhB,EAA8BC,eAA9B,CAAxB;AACD,GAlBD,CAkBE,OAAOkB,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,CAtBD;;AAwBA,OAAO,SAASG,wBAAT,CAAkCC,KAAlC,EAAyC;AAAA;;AAAA,iBACN7B,OAAO,CAACE,gBAAD,CADD;AAAA;AAAA,MACvCI,YADuC;AAAA,MACzBC,eADyB;;AAAA,oBAEFR,UAAU,CAACI,qBAAD,CAFR;AAAA,MAEtCK,OAFsC,eAEtCA,OAFsC;AAAA,MAE7BC,YAF6B,eAE7BA,YAF6B;AAAA,MAEfC,QAFe,eAEfA,QAFe;;AAI9CZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,OAAO,IAAIC,YAAX,IAA2BC,QAA/B,EAAyC;AACvCL,MAAAA,gBAAgB,CAACC,YAAD,EAAeC,eAAf,EAAgCC,OAAhC,EAAyCC,YAAzC,EAAuDC,QAAvD,CAAhB;AACD;AACF,GAJQ,EAIN,CAACF,OAAD,EAAUC,YAAV,EAAwBC,QAAxB,CAJM,CAAT;AAMA,SAAO,IAAP;AACD;;GAXekB,wB;UAC0B5B,O;;;KAD1B4B,wB","sourcesContent":["import { useEffect, useContext } from 'react'\nimport { useAtom } from 'jotai'\n\nimport { TRANSACTIONS_KEY } from 'lib/constants'\nimport { transactionsAtom } from 'lib/atoms/transactionsAtom'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { checkTransactionStatuses } from 'lib/utils/checkTransactionStatuses'\n\n// bring in new list of tx's from localStorage and check\n// if any are ongoing & what their status is\nconst readTransactions = (transactions, setTransactions, chainId, usersAddress, provider) => {\n  try {\n    let txs = []\n    if (typeof window !== 'undefined') {\n      const storageKey = `${chainId}-${usersAddress.toLowerCase()}-${TRANSACTIONS_KEY}`\n      \n      txs = JSON.parse(\n        localStorage.getItem(storageKey)\n      )\n      txs = txs ? txs : []\n    }\n\n    txs = txs.filter(tx => tx.sent && !tx.cancelled)\n\n    // re-write IDs so transactions are ordered properly\n    txs = txs.map((tx, index) => (tx.id = index + 1) && tx)\n\n    setTransactions([...txs])\n    checkTransactionStatuses(txs, provider, transactions, setTransactions)\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nexport function TransactionStatusChecker(props) {\n  const [transactions, setTransactions] = useAtom(transactionsAtom)\n  const { chainId, usersAddress, provider } = useContext(AuthControllerContext)\n\n  useEffect(() => {\n    if (chainId && usersAddress && provider) {\n      readTransactions(transactions, setTransactions, chainId, usersAddress, provider)\n    }\n  }, [chainId, usersAddress, provider])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}
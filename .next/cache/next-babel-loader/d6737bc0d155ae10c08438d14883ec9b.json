{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { i18n } from 'lib/../i18n';\nimport { DropdownList } from 'lib/components/DropdownList';\n{\n  /*\n   de: Deutsch (German)\n   en: English\n   es: Español (Spanish)\n   fr: Français (French)\n   hr: Hrvatski (Croatian)\n   it: Italiana (Italian)\n   ja: 日本 (Japanese)\n   ko: 한국어 (Korean)\n   tr: Türk (Turkish)\n   zh: 普通话 (Mandarin)\n  */\n}\nexport function LanguagePicker(props) {\n  _s();\n\n  var _useState = useState({\n    en: {\n      'name': 'English',\n      'nativeName': 'English'\n    }\n  }),\n      langs = _useState[0],\n      setLangs = _useState[1];\n\n  var _useState2 = useState('en'),\n      currentLang = _useState2[0],\n      setCurrentLang = _useState2[1];\n\n  var onValueSet = function onValueSet(newLang) {\n    setCurrentLang(newLang);\n    i18n.changeLanguage(newLang);\n  }; // set lang to whatever i18n thinks it should be (based\n  // on lang detection or stored cookies)\n\n\n  useEffect(function () {\n    if (i18n.language) {\n      setCurrentLang(i18n.language);\n    }\n  }, []);\n  useEffect(function () {\n    var runGetLangs = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return i18n.services.backendConnector.backend.getLanguages(function (err, result) {\n                  if (err) {\n                    console.error(\"There was an error getting the languages from locize: \", err);\n                  }\n\n                  var activeLangsArray = Object.keys(result).reduce(function (array, lang) {\n                    if (i18n.options.allLanguages.includes(lang)) {\n                      array.push(lang);\n                    }\n\n                    return array;\n                  }, []);\n                  var items = {};\n                  activeLangsArray.forEach(function (valueItem) {\n                    items[valueItem] = result[valueItem];\n                  });\n                  setLangs(items);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function runGetLangs() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    runGetLangs();\n  }, []);\n\n  var formatValue = function formatValue(key) {\n    var lang = langs[key];\n    return __jsx(React.Fragment, null, key.toUpperCase(), \" - \", __jsx(\"span\", {\n      className: \"capitalize\"\n    }, lang.nativeName.split(',')[0]), \" (\", lang.name.split(';')[0], \")\");\n  };\n\n  return __jsx(React.Fragment, null, __jsx(DropdownList, {\n    id: \"language-picker-dropdown\",\n    className: \"ml-8 xs:ml-6 sm:ml-6 mr-2 sm:mr-4 my-2 text-xxs sm:text-base text-lg\",\n    label: currentLang === null || currentLang === void 0 ? void 0 : currentLang.toUpperCase(),\n    formatValue: formatValue,\n    onValueSet: onValueSet,\n    current: currentLang,\n    values: langs\n  }));\n}\n\n_s(LanguagePicker, \"FMhGq3Oj8ianBqrdut45Tdr1W0s=\");\n\n_c = LanguagePicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguagePicker\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/LanguagePicker.jsx"],"names":["React","useEffect","useState","i18n","DropdownList","LanguagePicker","props","en","langs","setLangs","currentLang","setCurrentLang","onValueSet","newLang","changeLanguage","language","runGetLangs","services","backendConnector","backend","getLanguages","err","result","console","error","activeLangsArray","Object","keys","reduce","array","lang","options","allLanguages","includes","push","items","forEach","valueItem","formatValue","key","toUpperCase","nativeName","split","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport { i18n } from 'lib/../i18n'\nimport { DropdownList } from 'lib/components/DropdownList'\n\n{/*\n  de: Deutsch (German)\n  en: English\n  es: Español (Spanish)\n  fr: Français (French)\n  hr: Hrvatski (Croatian)\n  it: Italiana (Italian)\n  ja: 日本 (Japanese)\n  ko: 한국어 (Korean)\n  tr: Türk (Turkish)\n  zh: 普通话 (Mandarin)\n*/}\n\nexport function LanguagePicker(props) {\n  const [langs, setLangs] = useState(\n    {\n      en: {\n        'name': 'English',\n        'nativeName': 'English'\n      },\n    }\n  )\n\n  const [currentLang, setCurrentLang] = useState('en')\n\n  const onValueSet = (newLang) => {\n    setCurrentLang(newLang)\n    i18n.changeLanguage(newLang)\n  }\n\n  // set lang to whatever i18n thinks it should be (based\n  // on lang detection or stored cookies)\n  useEffect(() => {\n    if (i18n.language) {\n      setCurrentLang(i18n.language)\n    }\n  }, [])\n  \n  useEffect(() => {\n    const runGetLangs = async () => {\n      await i18n.services.backendConnector.backend.getLanguages((err, result) => {\n        if (err) {\n          console.error(`There was an error getting the languages from locize: `, err)\n        }\n\n        const activeLangsArray = Object.keys(result).reduce(function (array, lang) {\n          if (i18n.options.allLanguages.includes(lang)) {\n            array.push(lang)\n          }\n          return array\n        }, [])\n\n        let items = {}\n        activeLangsArray.forEach(valueItem => {\n          items[valueItem] = result[valueItem]\n        })\n        \n        setLangs(items)\n      })\n    }\n    runGetLangs()\n  }, [])\n\n\n  const formatValue = (key) => {\n    const lang = langs[key]\n\n    return <>\n      {key.toUpperCase()} - <span className='capitalize'>\n        {lang.nativeName.split(',')[0]}\n      </span> ({lang.name.split(';')[0]})\n    </>\n  }\n\n  return <>\n    <DropdownList\n      id='language-picker-dropdown'\n      className='ml-8 xs:ml-6 sm:ml-6 mr-2 sm:mr-4 my-2 text-xxs sm:text-base text-lg'\n      label={currentLang?.toUpperCase()}\n      formatValue={formatValue}\n      onValueSet={onValueSet}\n      current={currentLang}\n      values={langs}\n    />\n\n  </>\n}"]},"metadata":{},"sourceType":"module"}
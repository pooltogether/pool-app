{"ast":null,"code":"import { poolTokenSupportsPermitSign } from 'lib/utils/poolTokenSupportsPermitSign';\nimport { ethers } from 'ethers';\nimport DaiAbi from '@pooltogether/pooltogether-contracts/abis/Dai'; // import PermitAndDepositDaiAbi from '@pooltogether/pooltogether-contracts/abis/PermitAndDepositDai'\n\nimport PrizePoolAbi from '@pooltogether/pooltogether-contracts/abis/PrizePool';\nimport { CONTRACT_ADDRESSES } from 'lib/constants';\nimport { signPermit } from 'lib/utils/signPermit';\nexport const permitSignOrRegularDeposit = async (t, provider, chainId, usersAddress, poolAddress, tokenAddress, sendTx, sharedParams // needsPermit\n) => {\n  // let permitAddress\n  // const supportsPermit = false\n  // const supportsPermit = poolTokenSupportsPermitSign(chainId, tokenAddress)// && provider.isMetaMask\n  // if (supportsPermit) {\n  //   permitAddress = CONTRACT_ADDRESSES[chainId].PermitAndDepositDai\n  // }\n  let contractAbi = PrizePoolAbi; // let contractAbi = supportsPermit ? PermitAndDepositDaiAbi : PrizePoolAbi\n\n  let contractAddress = poolAddress; // let contractAddress = supportsPermit ? permitAddress : poolAddress\n\n  let method = 'depositTo'; // let permitParams = []\n  // let additionalSubsequentParams = []\n  // if (supportsPermit && needsPermit) {\n  //   const signer = await provider.getSigner()\n  //   const daiContract = new ethers.Contract(tokenAddress, DaiAbi, provider)\n  //   const nonce = await daiContract.nonces(usersAddress)\n  //   const expiry = (new Date()).getTime() + 1200000 // 20 minutes into future\n  //   const holder = await signer.getAddress()\n  //   let permit = await signPermit(\n  //     signer,\n  //     {\n  //       name: \"Dai Stablecoin\",\n  //       version: \"1\",\n  //       chainId,\n  //       verifyingContract: tokenAddress,\n  //     },\n  //     {\n  //       holder,\n  //       spender: permitAddress,\n  //       nonce: nonce.toString(),\n  //       expiry,\n  //       allowed: true\n  //     }\n  //   )\n  //   let { v, r, s } = ethers.utils.splitSignature(permit.sig)\n  //   permitParams = [\n  //     tokenAddress,\n  //     usersAddress,\n  //     nonce,\n  //     expiry,\n  //     true,\n  //     v,\n  //     r,\n  //     s,\n  //     poolAddress,\n  //   ]\n  //   method = 'permitAndDepositTo'\n  // }\n  // if (supportsPermit && !needsPermit) {\n  //   additionalSubsequentParams = [\n  //     tokenAddress,\n  //     poolAddress,\n  //   ]\n  // }\n\n  const params = [// ...permitParams,\n  // ...additionalSubsequentParams,\n  ...sharedParams];\n  const id = sendTx(t, provider, usersAddress, contractAbi, contractAddress, method, params);\n  return id;\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/utils/permitSignOrRegularDeposit.js"],"names":["poolTokenSupportsPermitSign","ethers","DaiAbi","PrizePoolAbi","CONTRACT_ADDRESSES","signPermit","permitSignOrRegularDeposit","t","provider","chainId","usersAddress","poolAddress","tokenAddress","sendTx","sharedParams","contractAbi","contractAddress","method","params","id"],"mappings":"AAAA,SAASA,2BAAT,QAA4C,uCAA5C;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAOC,MAAP,MAAmB,+CAAnB,C,CACA;;AACA,OAAOC,YAAP,MAAyB,qDAAzB;AAEA,SAASC,kBAAT,QAAmC,eAAnC;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,OAAO,MAAMC,0BAA0B,GAAG,OACxCC,CADwC,EAExCC,QAFwC,EAGxCC,OAHwC,EAIxCC,YAJwC,EAKxCC,WALwC,EAMxCC,YANwC,EAOxCC,MAPwC,EAQxCC,YARwC,CASxC;AATwC,KAUrC;AACH;AAEA;AACA;AACA;AACA;AACA;AAEA,MAAIC,WAAW,GAAGZ,YAAlB,CATG,CAUH;;AACA,MAAIa,eAAe,GAAGL,WAAtB,CAXG,CAYH;;AACA,MAAIM,MAAM,GAAG,WAAb,CAbG,CAcH;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,MAAM,GAAG,CACb;AACA;AACA,KAAGJ,YAHU,CAAf;AAMA,QAAMK,EAAE,GAAGN,MAAM,CACfN,CADe,EAEfC,QAFe,EAGfE,YAHe,EAIfK,WAJe,EAKfC,eALe,EAMfC,MANe,EAOfC,MAPe,CAAjB;AAUA,SAAOC,EAAP;AACD,CA9FM","sourcesContent":["import { poolTokenSupportsPermitSign } from 'lib/utils/poolTokenSupportsPermitSign'\nimport { ethers } from 'ethers'\n\nimport DaiAbi from '@pooltogether/pooltogether-contracts/abis/Dai'\n// import PermitAndDepositDaiAbi from '@pooltogether/pooltogether-contracts/abis/PermitAndDepositDai'\nimport PrizePoolAbi from '@pooltogether/pooltogether-contracts/abis/PrizePool'\n\nimport { CONTRACT_ADDRESSES } from 'lib/constants'\nimport { signPermit } from 'lib/utils/signPermit'\n\nexport const permitSignOrRegularDeposit = async (\n  t,\n  provider,\n  chainId,\n  usersAddress,\n  poolAddress,\n  tokenAddress,\n  sendTx,\n  sharedParams,\n  // needsPermit\n) => {\n  // let permitAddress\n  \n  // const supportsPermit = false\n  // const supportsPermit = poolTokenSupportsPermitSign(chainId, tokenAddress)// && provider.isMetaMask\n  // if (supportsPermit) {\n  //   permitAddress = CONTRACT_ADDRESSES[chainId].PermitAndDepositDai\n  // }\n\n  let contractAbi = PrizePoolAbi\n  // let contractAbi = supportsPermit ? PermitAndDepositDaiAbi : PrizePoolAbi\n  let contractAddress = poolAddress\n  // let contractAddress = supportsPermit ? permitAddress : poolAddress\n  let method = 'depositTo'\n  // let permitParams = []\n  // let additionalSubsequentParams = []\n\n  // if (supportsPermit && needsPermit) {\n  //   const signer = await provider.getSigner()\n  //   const daiContract = new ethers.Contract(tokenAddress, DaiAbi, provider)\n  //   const nonce = await daiContract.nonces(usersAddress)\n  //   const expiry = (new Date()).getTime() + 1200000 // 20 minutes into future\n\n  //   const holder = await signer.getAddress()\n\n  //   let permit = await signPermit(\n  //     signer,\n  //     {\n  //       name: \"Dai Stablecoin\",\n  //       version: \"1\",\n  //       chainId,\n  //       verifyingContract: tokenAddress,\n  //     },\n  //     {\n  //       holder,\n  //       spender: permitAddress,\n  //       nonce: nonce.toString(),\n  //       expiry,\n  //       allowed: true\n  //     }\n  //   )\n\n  //   let { v, r, s } = ethers.utils.splitSignature(permit.sig)\n\n    \n  //   permitParams = [\n  //     tokenAddress,\n  //     usersAddress,\n  //     nonce,\n  //     expiry,\n  //     true,\n  //     v,\n  //     r,\n  //     s,\n  //     poolAddress,\n  //   ]\n\n  //   method = 'permitAndDepositTo'\n  // }\n\n  // if (supportsPermit && !needsPermit) {\n  //   additionalSubsequentParams = [\n  //     tokenAddress,\n  //     poolAddress,\n  //   ]\n  // }\n\n  const params = [\n    // ...permitParams,\n    // ...additionalSubsequentParams,\n    ...sharedParams,\n  ]\n\n  const id = sendTx(\n    t,\n    provider,\n    usersAddress,\n    contractAbi,\n    contractAddress,\n    method,\n    params\n  )\n\n  return id\n}"]},"metadata":{},"sourceType":"module"}
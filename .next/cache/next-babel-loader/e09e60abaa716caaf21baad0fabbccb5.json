{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { usePlayerQuery } from 'lib/hooks/usePlayerQuery';\nimport { useSponsorQuery } from 'lib/hooks/useSponsorQuery';\nimport { getUsersSponsorshipBalance } from 'lib/services/getUsersSponsorshipBalance';\nimport { getUsersTicketBalance } from 'lib/services/getUsersTicketBalance';\nimport { testAddress } from 'lib/utils/testAddress';\nexport const PlayerDataContext = /*#__PURE__*/React.createContext();\n\nconst debug = require('debug')('pool-app:PoolDataContext');\n\nexport function PlayerDataContextProvider(props) {\n  const {\n    chainId,\n    pauseQueries,\n    usersAddress\n  } = useContext(AuthControllerContext);\n  const {\n    pool\n  } = useContext(PoolDataContext);\n  const addressError = testAddress(usersAddress);\n  const blockNumber = -1;\n  const {\n    refetch: refetchPlayerData,\n    data: playerData,\n    error,\n    isFetching\n  } = usePlayerQuery(pauseQueries, chainId, usersAddress, blockNumber, addressError);\n\n  if (error) {\n    console.error(error);\n  }\n\n  const {\n    refetch: refetchSponsorData,\n    data: sponsorData,\n    error: sponsorError,\n    isFetching: sponsorIsFetching\n  } = useSponsorQuery(pauseQueries, chainId, usersAddress, blockNumber, addressError);\n\n  if (sponsorError) {\n    console.error(sponsorError);\n  }\n\n  const {\n    usersTicketBalance,\n    usersTicketBalanceBN\n  } = getUsersTicketBalance(pool, playerData);\n  const {\n    usersSponsorshipBalance,\n    usersSponsorshipBalanceBN\n  } = getUsersSponsorshipBalance(pool, sponsorData);\n  return __jsx(React.Fragment, null, __jsx(PlayerDataContext.Provider, {\n    value: {\n      refetchPlayerData,\n      refetchSponsorData,\n      usersSponsorshipBalance,\n      usersSponsorshipBalanceBN,\n      usersTicketBalance,\n      usersTicketBalanceBN\n    }\n  }, props.children));\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/contextProviders/PlayerDataContextProvider.jsx"],"names":["React","useContext","AuthControllerContext","PoolDataContext","usePlayerQuery","useSponsorQuery","getUsersSponsorshipBalance","getUsersTicketBalance","testAddress","PlayerDataContext","createContext","debug","require","PlayerDataContextProvider","props","chainId","pauseQueries","usersAddress","pool","addressError","blockNumber","refetch","refetchPlayerData","data","playerData","error","isFetching","console","refetchSponsorData","sponsorData","sponsorError","sponsorIsFetching","usersTicketBalance","usersTicketBalanceBN","usersSponsorshipBalance","usersSponsorshipBalanceBN","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,qBAAT,QAAsC,+DAAtC;AACA,SAASC,eAAT,QAAgC,yDAAhC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,0BAAT,QAA2C,yCAA3C;AACA,SAASC,qBAAT,QAAsC,oCAAtC;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAEA,OAAO,MAAMC,iBAAiB,gBAAGT,KAAK,CAACU,aAAN,EAA1B;;AACP,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,0BAAjB,CAAd;;AAEA,OAAO,SAASC,yBAAT,CAAmCC,KAAnC,EAA0C;AAC/C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,MAA0ChB,UAAU,CAACC,qBAAD,CAA1D;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAWjB,UAAU,CAACE,eAAD,CAA3B;AAEA,QAAMgB,YAAY,GAAGX,WAAW,CAACS,YAAD,CAAhC;AAEA,QAAMG,WAAW,GAAG,CAAC,CAArB;AACA,QAAM;AACJC,IAAAA,OAAO,EAAEC,iBADL;AAEJC,IAAAA,IAAI,EAAEC,UAFF;AAGJC,IAAAA,KAHI;AAIJC,IAAAA;AAJI,MAKFtB,cAAc,CAACY,YAAD,EAAeD,OAAf,EAAwBE,YAAxB,EAAsCG,WAAtC,EAAmDD,YAAnD,CALlB;;AAOA,MAAIM,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;;AAID,QAAM;AACJJ,IAAAA,OAAO,EAAEO,kBADL;AAEJL,IAAAA,IAAI,EAAEM,WAFF;AAGJJ,IAAAA,KAAK,EAAEK,YAHH;AAIJJ,IAAAA,UAAU,EAAEK;AAJR,MAKF1B,eAAe,CAACW,YAAD,EAAeD,OAAf,EAAwBE,YAAxB,EAAsCG,WAAtC,EAAmDD,YAAnD,CALnB;;AAOA,MAAIW,YAAJ,EAAkB;AAChBH,IAAAA,OAAO,CAACF,KAAR,CAAcK,YAAd;AACD;;AAID,QAAM;AACJE,IAAAA,kBADI;AAEJC,IAAAA;AAFI,MAGF1B,qBAAqB,CAACW,IAAD,EAAOM,UAAP,CAHzB;AAKA,QAAM;AACJU,IAAAA,uBADI;AAEJC,IAAAA;AAFI,MAGF7B,0BAA0B,CAACY,IAAD,EAAOW,WAAP,CAH9B;AAKA,SAAO,4BACL,MAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLP,MAAAA,iBADK;AAELM,MAAAA,kBAFK;AAGLM,MAAAA,uBAHK;AAILC,MAAAA,yBAJK;AAKLH,MAAAA,kBALK;AAMLC,MAAAA;AANK;AADT,KAUGnB,KAAK,CAACsB,QAVT,CADK,CAAP;AAcD","sourcesContent":["import React, { useContext } from 'react'\n\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { usePlayerQuery } from 'lib/hooks/usePlayerQuery'\nimport { useSponsorQuery } from 'lib/hooks/useSponsorQuery'\nimport { getUsersSponsorshipBalance } from 'lib/services/getUsersSponsorshipBalance'\nimport { getUsersTicketBalance } from 'lib/services/getUsersTicketBalance'\nimport { testAddress } from 'lib/utils/testAddress'\n\nexport const PlayerDataContext = React.createContext()\nconst debug = require('debug')('pool-app:PoolDataContext')\n\nexport function PlayerDataContextProvider(props) {\n  const { chainId, pauseQueries, usersAddress } = useContext(AuthControllerContext)\n  const { pool } = useContext(PoolDataContext)\n\n  const addressError = testAddress(usersAddress)\n\n  const blockNumber = -1\n  const {\n    refetch: refetchPlayerData,\n    data: playerData,\n    error,\n    isFetching\n  } = usePlayerQuery(pauseQueries, chainId, usersAddress, blockNumber, addressError)\n\n  if (error) {\n    console.error(error)\n  }\n\n\n\n  const {\n    refetch: refetchSponsorData,\n    data: sponsorData,\n    error: sponsorError,\n    isFetching: sponsorIsFetching\n  } = useSponsorQuery(pauseQueries, chainId, usersAddress, blockNumber, addressError)\n\n  if (sponsorError) {\n    console.error(sponsorError)\n  }\n\n\n\n  const {\n    usersTicketBalance,\n    usersTicketBalanceBN\n  } = getUsersTicketBalance(pool, playerData)\n\n  const {\n    usersSponsorshipBalance,\n    usersSponsorshipBalanceBN\n  } = getUsersSponsorshipBalance(pool, sponsorData)\n\n  return <>\n    <PlayerDataContext.Provider\n      value={{\n        refetchPlayerData,\n        refetchSponsorData,\n        usersSponsorshipBalance,\n        usersSponsorshipBalanceBN,\n        usersTicketBalance,\n        usersTicketBalanceBN,\n      }}\n    >\n      {props.children}\n    </PlayerDataContext.Provider>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
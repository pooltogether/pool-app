{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { isSafari } from 'react-device-detect';\nimport { useTranslation } from 'lib/../i18n';\nimport { axiosInstance } from 'lib/axiosInstance';\nimport { DropdownList } from 'lib/components/DropdownList';\nimport { poolToast } from 'lib/utils/poolToast'; // import GooglePay from 'assets/images/googlepay.svg'\n\nimport ApplePay from 'assets/images/applepay.svg';\nconst WYRE_LAMBDA_PATH = `/.netlify/functions/wyre-api`;\nexport function WyreTopUpBalanceDropdown(props) {\n  const {\n    t\n  } = useTranslation();\n  const {\n    label,\n    className,\n    hoverTextColor,\n    textColor,\n    tickerUpcased\n  } = props;\n\n  const onValueSet = currency => {\n    handleOpenWyre(currency);\n  };\n\n  const applePay = __jsx(React.Fragment, null, isSafari && __jsx(React.Fragment, null, \", \", __jsx(\"img\", {\n    src: ApplePay,\n    className: \"inline-block relative h-6 w-12\",\n    style: {\n      top: 0\n    }\n  })));\n\n  const currencies = {\n    [tickerUpcased]: {\n      'label': __jsx(\"span\", {\n        className: \"text-xs\"\n      }, t('buyTickerDebitCreditCard', {\n        ticker: tickerUpcased\n      }), applePay)\n    },\n    'ETH': {\n      'label': __jsx(\"span\", {\n        className: \"text-xs\"\n      }, t('buyEthDebitCreditCard'), applePay)\n    }\n  };\n\n  const handleOpenWyre = async currency => {\n    const {\n      usersAddress\n    } = props;\n    const params = {\n      path: `/v3/orders/reserve`,\n      dest: `ethereum:${usersAddress}`,\n      destCurrency: currency.toUpperCase()\n    };\n    let response;\n\n    try {\n      var _response, _response$data;\n\n      response = await axiosInstance.post(`${WYRE_LAMBDA_PATH}`, params);\n      console.log(response); // dropdownRef.handleClose()\n\n      const url = (_response = response) === null || _response === void 0 ? void 0 : (_response$data = _response.data) === null || _response$data === void 0 ? void 0 : _response$data.url;\n\n      if (url) {\n        window.open(url);\n      } else {\n        console.log(response.error);\n      }\n    } catch (e) {\n      poolToast.error(`Wyre - purchase error, please try again or message support`);\n      console.error(e);\n    }\n  };\n\n  const formatValue = key => {\n    const currency = currencies[key];\n    return __jsx(React.Fragment, null, currency.label);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: \"relative z-50\"\n  }, __jsx(DropdownList, {\n    id: \"topup-dropdown\",\n    label: label,\n    className: className,\n    textColor: textColor,\n    hoverTextColor: hoverTextColor,\n    formatValue: formatValue,\n    onValueSet: onValueSet,\n    current: null,\n    values: currencies\n  })));\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/WyreTopUpBalanceDropdown.jsx"],"names":["React","useEffect","useState","isSafari","useTranslation","axiosInstance","DropdownList","poolToast","ApplePay","WYRE_LAMBDA_PATH","WyreTopUpBalanceDropdown","props","t","label","className","hoverTextColor","textColor","tickerUpcased","onValueSet","currency","handleOpenWyre","applePay","top","currencies","ticker","usersAddress","params","path","dest","destCurrency","toUpperCase","response","post","console","log","url","data","window","open","error","e","formatValue","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { isSafari } from 'react-device-detect'\n\nimport { useTranslation } from 'lib/../i18n'\nimport { axiosInstance } from 'lib/axiosInstance'\nimport { DropdownList } from 'lib/components/DropdownList'\nimport { poolToast } from 'lib/utils/poolToast'\n\n// import GooglePay from 'assets/images/googlepay.svg'\nimport ApplePay from 'assets/images/applepay.svg'\n\nconst WYRE_LAMBDA_PATH = `/.netlify/functions/wyre-api`\n\nexport function WyreTopUpBalanceDropdown(props) {\n  const { t } = useTranslation()\n\n  const {\n    label,\n    className,\n    hoverTextColor,\n    textColor,\n    tickerUpcased\n  } = props\n  \n  const onValueSet = (currency) => {\n    handleOpenWyre(currency)\n  }\n\n  const applePay = <>\n    {isSafari && <>, <img\n      src={ApplePay}\n      className='inline-block relative h-6 w-12'\n      style={{ top: 0 }}\n    /></>}\n  </>\n\n  const currencies = {\n    [tickerUpcased]: {\n      'label': <span className='text-xs'>\n        {t('buyTickerDebitCreditCard', {\n          ticker: tickerUpcased\n        })}{applePay}\n      </span>,\n    },\n    'ETH': {\n      'label': <span className='text-xs'>\n        {t('buyEthDebitCreditCard')}{applePay}\n      </span>,\n    },\n  }\n\n  const handleOpenWyre = async (currency) => {\n    const {\n      usersAddress\n    } = props\n\n\n    const params = {\n      path: `/v3/orders/reserve`,\n      dest: `ethereum:${usersAddress}`,\n      destCurrency: currency.toUpperCase()\n    }\n\n\n    let response\n\n    try {\n      response = await axiosInstance.post(\n        `${WYRE_LAMBDA_PATH}`,\n        params\n      )\n      console.log(response)\n\n      // dropdownRef.handleClose()\n\n      const url = response?.data?.url\n\n      if (url) {\n        window.open(url)\n      } else {\n        console.log(response.error)\n      }\n    } catch (e) {\n      poolToast.error(`Wyre - purchase error, please try again or message support`)\n      console.error(e)\n    }\n  }\n\n  const formatValue = (key) => {\n    const currency = currencies[key]\n\n    return <>\n      {currency.label}\n    </>\n  }\n\n  return <>\n    <span className='relative z-50'>\n      <DropdownList\n        id='topup-dropdown'\n        label={label}\n        className={className}\n        textColor={textColor}\n        hoverTextColor={hoverTextColor}\n        formatValue={formatValue}\n        onValueSet={onValueSet}\n        current={null}\n        values={currencies}\n      />\n    </span>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst queryString = require('query-string');\n\nexport const queryParamUpdater = {\n  add: (router, addition) => {\n    const pathnameParts = [].concat(router.pathname.split('?'));\n    const asPathParts = [].concat(router.asPath.split('?'));\n    const hasQueryParams = /\\?/.test(router.asPath);\n\n    let newParams = _objectSpread({}, addition);\n\n    if (hasQueryParams) {\n      const existing = queryString.parse(`?${asPathParts.pop()}`);\n      newParams = _objectSpread(_objectSpread({}, existing), addition);\n    }\n\n    const newPathname = `${pathnameParts.shift()}?${queryString.stringify(newParams)}`;\n    const newAsPath = `${asPathParts.shift()}?${queryString.stringify(newParams)}`;\n    router.push(newPathname, newAsPath, {\n      shallow: true\n    });\n    return router.asPath.toString();\n  },\n  removeAll: router => {\n    const pathnameParts = [].concat(router.pathname.split('?'));\n    const asPathParts = [].concat(router.asPath.split('?'));\n    const newPathname = pathnameParts.shift();\n    const newAsPath = asPathParts.shift();\n    router.push(newPathname, newAsPath, {\n      shallow: true\n    });\n    return router.asPath.toString();\n  },\n  remove: (router, key) => {\n    const pathnameParts = [].concat(router.pathname.split('?'));\n    const asPathParts = [].concat(router.asPath.split('?'));\n    const hasQueryParams = /\\?/.test(router.asPath);\n\n    if (hasQueryParams) {\n      const existing = queryString.parse(`?${asPathParts.pop()}`);\n      delete existing[key];\n      let hasNoMoreKeys = true;\n\n      for (const key of Object.keys(existing)) {\n        hasNoMoreKeys = false;\n      }\n\n      if (hasNoMoreKeys) {\n        router.push(pathnameParts.shift(), asPathParts.shift(), {\n          shallow: true\n        });\n      } else {\n        const newPathname = `${pathnameParts.shift()}?${queryString.stringify(existing)}`;\n        const newAsPath = `${asPathParts.shift()}?${queryString.stringify(existing)}`;\n        router.push(newPathname, newAsPath, {\n          shallow: true\n        });\n      }\n    }\n\n    return router.asPath.toString();\n  }\n};","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/utils/queryParamUpdater.js"],"names":["queryString","require","queryParamUpdater","add","router","addition","pathnameParts","concat","pathname","split","asPathParts","asPath","hasQueryParams","test","newParams","existing","parse","pop","newPathname","shift","stringify","newAsPath","push","shallow","toString","removeAll","remove","key","hasNoMoreKeys","Object","keys"],"mappings":"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","sourcesContent":["const queryString = require('query-string')\n\nexport const queryParamUpdater = {\n  add: (router, addition) => {\n    const pathnameParts = [].concat(router.pathname.split('?'))\n    const asPathParts = [].concat(router.asPath.split('?'))\n\n    const hasQueryParams = /\\?/.test(router.asPath)\n\n    let newParams = { ...addition }\n    if (hasQueryParams) {\n      const existing = queryString.parse(`?${asPathParts.pop()}`)\n\n      newParams = {\n        ...existing,\n        ...addition\n      }\n    }\n\n    const newPathname = `${pathnameParts.shift()}?${queryString.stringify(newParams)}`\n    const newAsPath = `${asPathParts.shift()}?${queryString.stringify(newParams)}`\n\n    router.push(\n      newPathname,\n      newAsPath,\n      { shallow: true }\n    )\n\n    return router.asPath.toString()\n  },\n\n  removeAll: (router) => {\n    const pathnameParts = [].concat(router.pathname.split('?'))\n    const asPathParts = [].concat(router.asPath.split('?'))\n\n    const newPathname = pathnameParts.shift()\n    const newAsPath = asPathParts.shift()\n\n    router.push(\n      newPathname,\n      newAsPath,\n      { shallow: true }\n    )\n\n    return router.asPath.toString()\n  },\n\n  remove: (router, key) => {\n    const pathnameParts = [].concat(router.pathname.split('?'))\n    const asPathParts = [].concat(router.asPath.split('?'))\n\n    const hasQueryParams = /\\?/.test(router.asPath)\n\n    if (hasQueryParams) {\n      const existing = queryString.parse(`?${asPathParts.pop()}`)\n\n      delete existing[key]\n\n      let hasNoMoreKeys = true\n      for (const key of Object.keys(existing)) {\n        hasNoMoreKeys = false\n      }\n\n      if (hasNoMoreKeys) {\n        router.push(\n          pathnameParts.shift(),\n          asPathParts.shift(),\n          { shallow: true }\n        )\n      } else {\n        const newPathname = `${pathnameParts.shift()}?${queryString.stringify(existing)}`\n        const newAsPath = `${asPathParts.shift()}?${queryString.stringify(existing)}`\n\n        router.push(\n          newPathname,\n          newAsPath,\n          { shallow: true }\n        )\n      }\n    }\n\n    return router.asPath.toString()\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}
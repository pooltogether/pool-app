{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport Cookies from 'js-cookie';\nimport { useRouter } from 'next/router';\nimport { useQueryCache } from 'react-query';\nimport { COOKIE_OPTIONS, STORED_CHAIN_ID_KEY, SUPPORTED_CHAIN_IDS, SELECTED_WALLET_COOKIE_KEY, MAGIC_EMAIL } from 'lib/constants';\nimport { MagicContext } from 'lib/components/contextProviders/MagicContextProvider';\nimport { WalletContext } from 'lib/components/contextProviders/WalletContextProvider';\nimport { chainIdToNetworkName } from 'lib/utils/chainIdToNetworkName';\nimport { getChainId } from 'lib/utils/getChainId';\nimport { queryParamUpdater } from 'lib/utils/queryParamUpdater';\n\nvar debug = require('debug')('AuthControllerContextProvider');\n\nexport var AuthControllerContext = /*#__PURE__*/React.createContext(); // This AuthController allows us to have one place to interface with both the Magic context and\n// the Onboardjs/Wallet context - this provides us with more control of what happens to\n// both when one is signed in / signed out of and avoids circular dependencies\n//\n// This also provides a unified authentication pattern to get the usersAddress\n// and ethers provider for transactions\n\nexport function AuthControllerContextProvider(props) {\n  _s();\n\n  var children = props.children;\n  var router = useRouter();\n  var queryCache = useQueryCache();\n\n  var _useState = useState(false),\n      changingNetwork = _useState[0],\n      setChangingNetwork = _useState[1];\n\n  var _useContext = useContext(WalletContext),\n      onboard = _useContext.onboard,\n      onboardAddress = _useContext.onboardAddress,\n      onboardBalance = _useContext.onboardBalance,\n      onboardNetwork = _useContext.onboardNetwork,\n      onboardProvider = _useContext.onboardProvider,\n      onboardWallet = _useContext.onboardWallet,\n      reconnectWallet = _useContext.reconnectWallet,\n      connectWallet = _useContext.connectWallet,\n      disconnectWallet = _useContext.disconnectWallet;\n\n  var _useContext2 = useContext(MagicContext),\n      address = _useContext2.address,\n      magic = _useContext2.magic,\n      signIn = _useContext2.signIn,\n      signedIn = _useContext2.signedIn,\n      magicSignOut = _useContext2.signOut; // TODO: extend this to also pull the eth balance from the magic session\n  // may need state / ethereum event listener\n\n\n  var ethBalance = onboardBalance || null; // const [ethBalance, setEthBalance] = useState(ethers.utils.bigNumberify(0))\n  // useEffect(() => {\n  //   if (ethBalance) {\n  //     setEthBalance(ethers.utils.bigNumberify(ethBalance))\n  //   }\n  // }, [])\n\n  var walletName = 'Unknown';\n\n  if (magic && signedIn) {\n    walletName = 'Magic';\n  } else if (onboardWallet) {\n    walletName = onboardWallet.name;\n  }\n\n  var defaultChainId = getChainId(process.env.NEXT_JS_DEFAULT_ETHEREUM_NETWORK_NAME);\n\n  var _useState2 = useState(defaultChainId),\n      chainId = _useState2[0],\n      setChainId = _useState2[1];\n\n  var _useState3 = useState(),\n      provider = _useState3[0],\n      setProvider = _useState3[1];\n\n  var _useState4 = useState(),\n      usersAddress = _useState4[0],\n      setUsersAddress = _useState4[1];\n\n  var _useState5 = useState(false),\n      magicAutoSignInAlreadyExecuted = _useState5[0],\n      setMagicAutoSignInAlreadyExecuted = _useState5[1];\n\n  useEffect(function () {\n    var provider = onboardProvider; // if (!provider && signedIn) {\n    //   provider = provider\n    // }\n\n    setProvider(provider);\n  }, [onboardProvider, signedIn]);\n  useEffect(function () {\n    var storeChainIdCookie = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newChainId) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Cookies.set(STORED_CHAIN_ID_KEY, newChainId, COOKIE_OPTIONS);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function storeChainIdCookie(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var updateChainId = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(onboardNetwork && onboardNetwork !== chainId)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                queryCache.clear();\n                setChangingNetwork(true);\n                setChainId(onboardNetwork);\n                _context2.next = 6;\n                return storeChainIdCookie(onboardNetwork);\n\n              case 6:\n                setTimeout(function () {\n                  setChangingNetwork(false);\n                }, 200);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function updateChainId() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    updateChainId();\n  }, [onboardNetwork]);\n  useEffect(function () {\n    var usersAddress;\n\n    if (onboardAddress) {\n      usersAddress = onboardAddress;\n    }\n\n    if (!usersAddress && address) {\n      usersAddress = address;\n    }\n\n    setUsersAddress(usersAddress);\n  }, [address, onboardAddress]);\n\n  var postDisconnectRedirect = function postDisconnectRedirect() {\n    queryParamUpdater.add(router, {\n      signIn: '1'\n    });\n  };\n\n  var signOut = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(e) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (e) {\n                e.preventDefault();\n              } // magicSignOut()\n\n\n              disconnectWallet();\n              postDisconnectRedirect();\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function signOut(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var signInMagic = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(formEmail, postSignInCallback) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              signIn(formEmail, postSignInCallback);\n              disconnectWallet();\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function signInMagic(_x3, _x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (magic) {\n      var emailFromCookies = Cookies.get(MAGIC_EMAIL);\n\n      var autoSignInMagic = /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return magic.user.isLoggedIn();\n\n                case 2:\n                  if (!_context5.sent) {\n                    _context5.next = 4;\n                    break;\n                  }\n\n                  signInMagic(emailFromCookies);\n\n                case 4:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function autoSignInMagic() {\n          return _ref5.apply(this, arguments);\n        };\n      }();\n\n      if (emailFromCookies && !magicAutoSignInAlreadyExecuted) {\n        autoSignInMagic();\n      }\n\n      setMagicAutoSignInAlreadyExecuted(true);\n    }\n  }, [magic]);\n  useEffect(function () {\n    if (onboard) {\n      debug('inside onboard UseEffect if!');\n\n      var autoSignInWallet = /*#__PURE__*/function () {\n        var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n          var previouslySelectedWallet;\n          return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  previouslySelectedWallet = Cookies.get(SELECTED_WALLET_COOKIE_KEY);\n\n                  if (previouslySelectedWallet !== undefined) {\n                    debug('running autosign in!');\n                    reconnectWallet(previouslySelectedWallet);\n                  }\n\n                case 2:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        }));\n\n        return function autoSignInWallet() {\n          return _ref6.apply(this, arguments);\n        };\n      }();\n\n      autoSignInWallet();\n    }\n  }, [onboard]);\n  var networkName = chainIdToNetworkName(chainId);\n  var supportedNetwork = SUPPORTED_CHAIN_IDS.includes(chainId);\n  var pauseQueries = !supportedNetwork || changingNetwork;\n  return __jsx(AuthControllerContext.Provider, {\n    value: {\n      changingNetwork: changingNetwork,\n      ethBalance: ethBalance,\n      chainId: chainId,\n      pauseQueries: pauseQueries,\n      provider: provider,\n      usersAddress: usersAddress,\n      walletName: walletName,\n      signOut: signOut,\n      signInMagic: signInMagic,\n      connectWallet: connectWallet,\n      networkName: networkName,\n      supportedNetwork: supportedNetwork\n    }\n  }, children);\n}\n\n_s(AuthControllerContextProvider, \"T8ctR4yjnsvt3K3K6Nhsz5Q3V5M=\", false, function () {\n  return [useRouter, useQueryCache];\n});\n\n_c = AuthControllerContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthControllerContextProvider\");","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/contextProviders/AuthControllerContextProvider.jsx"],"names":["React","useEffect","useState","useContext","Cookies","useRouter","useQueryCache","COOKIE_OPTIONS","STORED_CHAIN_ID_KEY","SUPPORTED_CHAIN_IDS","SELECTED_WALLET_COOKIE_KEY","MAGIC_EMAIL","MagicContext","WalletContext","chainIdToNetworkName","getChainId","queryParamUpdater","debug","require","AuthControllerContext","createContext","AuthControllerContextProvider","props","children","router","queryCache","changingNetwork","setChangingNetwork","onboard","onboardAddress","onboardBalance","onboardNetwork","onboardProvider","onboardWallet","reconnectWallet","connectWallet","disconnectWallet","address","magic","signIn","signedIn","magicSignOut","signOut","ethBalance","walletName","name","defaultChainId","process","env","NEXT_JS_DEFAULT_ETHEREUM_NETWORK_NAME","chainId","setChainId","provider","setProvider","usersAddress","setUsersAddress","magicAutoSignInAlreadyExecuted","setMagicAutoSignInAlreadyExecuted","storeChainIdCookie","newChainId","set","updateChainId","clear","setTimeout","postDisconnectRedirect","add","e","preventDefault","signInMagic","formEmail","postSignInCallback","emailFromCookies","get","autoSignInMagic","user","isLoggedIn","autoSignInWallet","previouslySelectedWallet","undefined","networkName","supportedNetwork","includes","pauseQueries"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react'\nimport Cookies from 'js-cookie'\nimport { useRouter } from 'next/router'\nimport { useQueryCache } from 'react-query'\n\nimport {\n  COOKIE_OPTIONS,\n  STORED_CHAIN_ID_KEY,\n  SUPPORTED_CHAIN_IDS,\n  SELECTED_WALLET_COOKIE_KEY,\n  MAGIC_EMAIL,\n} from 'lib/constants'\nimport { MagicContext } from 'lib/components/contextProviders/MagicContextProvider'\nimport { WalletContext } from 'lib/components/contextProviders/WalletContextProvider'\nimport { chainIdToNetworkName } from 'lib/utils/chainIdToNetworkName'\nimport { getChainId } from 'lib/utils/getChainId'\nimport { queryParamUpdater } from 'lib/utils/queryParamUpdater'\n\nconst debug = require('debug')('AuthControllerContextProvider')\n\nexport const AuthControllerContext = React.createContext()\n\n// This AuthController allows us to have one place to interface with both the Magic context and\n// the Onboardjs/Wallet context - this provides us with more control of what happens to\n// both when one is signed in / signed out of and avoids circular dependencies\n//\n// This also provides a unified authentication pattern to get the usersAddress\n// and ethers provider for transactions\nexport function AuthControllerContextProvider(props) {\n  const { children } = props\n\n  const router = useRouter()\n  const queryCache = useQueryCache()\n\n  const [changingNetwork, setChangingNetwork] = useState(false)\n\n  const {\n    onboard,\n    onboardAddress,\n    onboardBalance,\n    onboardNetwork,\n    onboardProvider,\n    onboardWallet,\n    reconnectWallet,\n    connectWallet,\n    disconnectWallet\n  } = useContext(WalletContext)\n\n  const { address, magic, signIn, signedIn, signOut: magicSignOut } = useContext(MagicContext)\n \n  // TODO: extend this to also pull the eth balance from the magic session\n  // may need state / ethereum event listener\n  const ethBalance = onboardBalance || null\n  // const [ethBalance, setEthBalance] = useState(ethers.utils.bigNumberify(0))\n  // useEffect(() => {\n  //   if (ethBalance) {\n  //     setEthBalance(ethers.utils.bigNumberify(ethBalance))\n  //   }\n  // }, [])\n\n  let walletName = 'Unknown'\n  if (magic && signedIn) {\n    walletName = 'Magic'\n  } else if (onboardWallet) {\n    walletName = onboardWallet.name\n  }\n\n  const defaultChainId = getChainId(process.env.NEXT_JS_DEFAULT_ETHEREUM_NETWORK_NAME)\n  const [chainId, setChainId] = useState(defaultChainId)\n  const [provider, setProvider] = useState()\n  const [usersAddress, setUsersAddress] = useState()\n  const [magicAutoSignInAlreadyExecuted, setMagicAutoSignInAlreadyExecuted] = useState(false)\n\n  useEffect(() => {\n    let provider = onboardProvider\n    // if (!provider && signedIn) {\n    //   provider = provider\n    // }\n    setProvider(provider)\n  }, [onboardProvider, signedIn])\n\n  useEffect(() => {\n    const storeChainIdCookie = async (newChainId) => {\n      await Cookies.set(\n        STORED_CHAIN_ID_KEY,\n        newChainId,\n        COOKIE_OPTIONS\n      )\n    }\n\n    const updateChainId = async () => {\n      if (onboardNetwork && onboardNetwork !== chainId) {\n        queryCache.clear()\n        setChangingNetwork(true)\n        \n\n        setChainId(onboardNetwork)\n        await storeChainIdCookie(onboardNetwork)\n\n\n        setTimeout(() => {\n          setChangingNetwork(false)\n        }, 200)\n      }\n    }\n\n\n    updateChainId()\n  }, [onboardNetwork])\n\n  useEffect(() => {\n    let usersAddress\n\n    if (onboardAddress) {\n      usersAddress = onboardAddress\n    }\n\n    if (!usersAddress && address) {\n      usersAddress = address\n    }\n\n    setUsersAddress(usersAddress)\n  }, [address, onboardAddress])\n\n  const postDisconnectRedirect = () => {\n    queryParamUpdater.add(router, { signIn: '1' })\n  }\n\n  const signOut = async (e) => {\n    if (e) {\n      e.preventDefault()\n    }\n\n    // magicSignOut()\n    disconnectWallet()\n\n    postDisconnectRedirect()\n  }\n\n  const signInMagic = async (formEmail, postSignInCallback) => {\n    signIn(formEmail, postSignInCallback)\n    disconnectWallet()\n  }\n\n  useEffect(() => {\n    if (magic) {\n      const emailFromCookies = Cookies.get(MAGIC_EMAIL)\n\n      const autoSignInMagic = async () => {\n        if (await magic.user.isLoggedIn()) {\n          signInMagic(emailFromCookies)\n        }\n      }\n\n      if (emailFromCookies && !magicAutoSignInAlreadyExecuted) {\n        autoSignInMagic()\n      }\n\n      setMagicAutoSignInAlreadyExecuted(true)\n    }\n\n  }, [magic])\n\n  useEffect(() => {\n    if (onboard) {\n      debug('inside onboard UseEffect if!')\n      const autoSignInWallet = async () => {\n        const previouslySelectedWallet = Cookies.get(SELECTED_WALLET_COOKIE_KEY)\n\n        if (previouslySelectedWallet !== undefined) {\n          debug('running autosign in!')\n          reconnectWallet(previouslySelectedWallet)\n        }\n      }\n\n      autoSignInWallet()\n    }\n  }, [onboard])\n\n  const networkName = chainIdToNetworkName(chainId)\n  const supportedNetwork = SUPPORTED_CHAIN_IDS.includes(chainId)\n\n  const pauseQueries = !supportedNetwork || changingNetwork\n\n  return <AuthControllerContext.Provider\n    value={{\n      changingNetwork,\n      ethBalance,\n      chainId,\n      pauseQueries,\n      provider,\n      usersAddress,\n      walletName,\n      signOut,\n      signInMagic,\n      connectWallet,\n      networkName,\n      supportedNetwork,\n    }}\n  >\n    {children}\n  </AuthControllerContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}
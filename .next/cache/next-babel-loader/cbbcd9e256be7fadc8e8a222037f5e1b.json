{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { isEmpty } from 'lodash';\nimport { MAINNET_POLLING_INTERVAL, QUERY_KEYS } from 'lib/constants';\nimport { fetchGenericChainData } from 'lib/utils/fetchGenericChainData';\n\nvar getEthereumErc20Data = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetchGenericChainData(params);\n\n          case 2:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              dai: data\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getEthereumErc20Data(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport function useEthereumGenericQuery(params) {\n  _s();\n\n  var _poolData$prizeStrate, _poolData$compoundPri;\n\n  var chainId = params.chainId,\n      pauseQueries = params.pauseQueries,\n      provider = params.provider,\n      poolData = params.poolData;\n  var blockNumber = params.blockNumber;\n\n  if (!blockNumber) {\n    blockNumber = -1;\n  }\n\n  var prizeStrategyAddress = poolData === null || poolData === void 0 ? void 0 : (_poolData$prizeStrate = poolData.prizeStrategy) === null || _poolData$prizeStrate === void 0 ? void 0 : _poolData$prizeStrate.id;\n  var cTokenAddress = poolData === null || poolData === void 0 ? void 0 : (_poolData$compoundPri = poolData.compoundPrizePool) === null || _poolData$compoundPri === void 0 ? void 0 : _poolData$compoundPri.cToken;\n  var poolAddress = poolData === null || poolData === void 0 ? void 0 : poolData.poolAddress;\n  var enabled = !pauseQueries && chainId && !isEmpty(provider) && !isEmpty(poolData) && Boolean(prizeStrategyAddress) && Boolean(cTokenAddress) && Boolean(poolAddress);\n  var refetchInterval = !pauseQueries && blockNumber === -1 ? MAINNET_POLLING_INTERVAL : false;\n  return useQuery([QUERY_KEYS.ethereumGenericQuery, chainId, poolAddress, blockNumber], /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getEthereumErc20Data(params);\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), {\n    enabled: enabled,\n    refetchInterval: refetchInterval\n  });\n}\n\n_s(useEthereumGenericQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/hooks/useEthereumGenericQuery.js"],"names":["useQuery","isEmpty","MAINNET_POLLING_INTERVAL","QUERY_KEYS","fetchGenericChainData","getEthereumErc20Data","params","data","dai","useEthereumGenericQuery","chainId","pauseQueries","provider","poolData","blockNumber","prizeStrategyAddress","prizeStrategy","id","cTokenAddress","compoundPrizePool","cToken","poolAddress","enabled","Boolean","refetchInterval","ethereumGenericQuery"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,SACEC,wBADF,EAEEC,UAFF,QAGO,eAHP;AAIA,SAASC,qBAAT,QAAsC,iCAAtC;;AAEA,IAAMC,oBAAoB;AAAA,sEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACRF,qBAAqB,CAACE,MAAD,CADb;;AAAA;AACrBC,YAAAA,IADqB;AAAA,6CAGpB;AACLC,cAAAA,GAAG,EAAED;AADA,aAHoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBF,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;AAQA,OAAO,SAASI,uBAAT,CAAiCH,MAAjC,EAAyC;AAAA;;AAAA;;AAAA,MAE5CI,OAF4C,GAM1CJ,MAN0C,CAE5CI,OAF4C;AAAA,MAG5CC,YAH4C,GAM1CL,MAN0C,CAG5CK,YAH4C;AAAA,MAI5CC,QAJ4C,GAM1CN,MAN0C,CAI5CM,QAJ4C;AAAA,MAK5CC,QAL4C,GAM1CP,MAN0C,CAK5CO,QAL4C;AAQ9C,MAAIC,WAAW,GAAGR,MAAM,CAACQ,WAAzB;;AAEA,MAAI,CAACA,WAAL,EAAkB;AAChBA,IAAAA,WAAW,GAAG,CAAC,CAAf;AACD;;AAED,MAAMC,oBAAoB,GAAGF,QAAH,aAAGA,QAAH,gDAAGA,QAAQ,CAAEG,aAAb,0DAAG,sBAAyBC,EAAtD;AACA,MAAMC,aAAa,GAAGL,QAAH,aAAGA,QAAH,gDAAGA,QAAQ,CAAEM,iBAAb,0DAAG,sBAA6BC,MAAnD;AACA,MAAMC,WAAW,GAAGR,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEQ,WAA9B;AAEA,MAAMC,OAAO,GAAG,CAACX,YAAD,IACdD,OADc,IAEd,CAACT,OAAO,CAACW,QAAD,CAFM,IAGd,CAACX,OAAO,CAACY,QAAD,CAHM,IAIdU,OAAO,CAACR,oBAAD,CAJO,IAKdQ,OAAO,CAACL,aAAD,CALO,IAMdK,OAAO,CAACF,WAAD,CANT;AAQA,MAAMG,eAAe,GAAG,CAACb,YAAD,IAAkBG,WAAW,KAAK,CAAC,CAAnC,GACtBZ,wBADsB,GAEtB,KAFF;AAIA,SAAOF,QAAQ,CACb,CAACG,UAAU,CAACsB,oBAAZ,EAAkCf,OAAlC,EAA2CW,WAA3C,EAAwDP,WAAxD,CADa,wEAEb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkBT,oBAAoB,CAACC,MAAD,CAAtC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFa,IAGb;AACEgB,IAAAA,OAAO,EAAPA,OADF;AAEEE,IAAAA,eAAe,EAAfA;AAFF,GAHa,CAAf;AAQD;;GAtCef,uB;UA8BPT,Q","sourcesContent":["import { useQuery } from 'react-query'\nimport { isEmpty } from 'lodash'\n\nimport {\n  MAINNET_POLLING_INTERVAL,\n  QUERY_KEYS,\n} from 'lib/constants'\nimport { fetchGenericChainData } from 'lib/utils/fetchGenericChainData'\n\nconst getEthereumErc20Data = async (params) => {\n  const data = await fetchGenericChainData(params)\n  \n  return {\n    dai: data\n  }\n}\n\nexport function useEthereumGenericQuery(params) {\n  const {\n    chainId,\n    pauseQueries,\n    provider,\n    poolData\n  } = params\n\n  let blockNumber = params.blockNumber\n\n  if (!blockNumber) {\n    blockNumber = -1\n  }\n\n  const prizeStrategyAddress = poolData?.prizeStrategy?.id\n  const cTokenAddress = poolData?.compoundPrizePool?.cToken\n  const poolAddress = poolData?.poolAddress\n\n  const enabled = !pauseQueries &&\n    chainId &&\n    !isEmpty(provider) &&\n    !isEmpty(poolData) && \n    Boolean(prizeStrategyAddress) &&\n    Boolean(cTokenAddress) &&\n    Boolean(poolAddress)\n\n  const refetchInterval = !pauseQueries && (blockNumber === -1) ?\n    MAINNET_POLLING_INTERVAL :\n    false\n\n  return useQuery(\n    [QUERY_KEYS.ethereumGenericQuery, chainId, poolAddress, blockNumber],\n    async () => await getEthereumErc20Data(params),\n    { \n      enabled,\n      refetchInterval\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
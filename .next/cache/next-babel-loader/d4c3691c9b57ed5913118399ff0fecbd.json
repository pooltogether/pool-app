{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { request } from 'graphql-request';\nimport { POOLTOGETHER_GRAPH_URIS } from 'lib/constants';\nimport { sponsorQuery } from 'lib/queries/sponsorQuery';\nexport var getSponsorData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chainId, sponsorAddress, blockNumber) {\n    var _data;\n\n    var query, variables, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = sponsorQuery(blockNumber);\n            variables = {\n              sponsorAddress: sponsorAddress\n            };\n            _context.prev = 2;\n            _context.next = 5;\n            return request(POOLTOGETHER_GRAPH_URIS[chainId], query, variables);\n\n          case 5:\n            data = _context.sent;\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            console.error(JSON.stringify(_context.t0, undefined, 2));\n\n          case 11:\n            return _context.abrupt(\"return\", (_data = data) === null || _data === void 0 ? void 0 : _data.sponsor);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  }));\n\n  return function getSponsorData(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/fetchers/getSponsorData.js"],"names":["request","POOLTOGETHER_GRAPH_URIS","sponsorQuery","getSponsorData","chainId","sponsorAddress","blockNumber","query","variables","data","console","error","JSON","stringify","undefined","sponsor"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,iBAAxB;AAEA,SAASC,uBAAT,QAAwC,eAAxC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,OAAO,IAAMC,cAAc;AAAA,sEAAG,iBAAOC,OAAP,EAAgBC,cAAhB,EAAgCC,WAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBC,YAAAA,KADsB,GACdL,YAAY,CAACI,WAAD,CADE;AAGtBE,YAAAA,SAHsB,GAGV;AAChBH,cAAAA,cAAc,EAAdA;AADgB,aAHU;AAAA;AAAA;AAAA,mBASbL,OAAO,CAClBC,uBAAuB,CAACG,OAAD,CADL,EAElBG,KAFkB,EAGlBC,SAHkB,CATM;;AAAA;AAS1BC,YAAAA,IAT0B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAe1BC,YAAAA,OAAO,CAACC,KAAR,CAAcC,IAAI,CAACC,SAAL,cAAsBC,SAAtB,EAAiC,CAAjC,CAAd;;AAf0B;AAAA,sDAkBrBL,IAlBqB,0CAkBrB,MAAMM,OAlBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdZ,cAAc;AAAA;AAAA;AAAA,GAApB","sourcesContent":["import { request } from 'graphql-request'\n\nimport { POOLTOGETHER_GRAPH_URIS } from 'lib/constants'\nimport { sponsorQuery } from 'lib/queries/sponsorQuery'\n\nexport const getSponsorData = async (chainId, sponsorAddress, blockNumber) => {\n  const query = sponsorQuery(blockNumber)\n\n  const variables = {\n    sponsorAddress,\n  }\n\n  let data\n  try {\n    data = await request(\n      POOLTOGETHER_GRAPH_URIS[chainId],\n      query,\n      variables\n    )\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n  }\n\n  return data?.sponsor\n}\n"]},"metadata":{},"sourceType":"module"}
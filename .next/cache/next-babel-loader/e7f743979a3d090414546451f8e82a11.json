{"ast":null,"code":"import { stringWithPrecision } from 'lib/utils/stringWithPrecision';\nexport function numberWithCommas(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!str) {\n    return typeof str === 'number' ? str : '';\n  }\n\n  var precision = 2;\n\n  if (options.precision !== undefined) {\n    precision = options.precision;\n  }\n\n  var localeString = 'en-GB';\n\n  if (options.currentLang && options.currentLang === 'es') {\n    localeString = 'es-ES';\n  } // auto-round to the nearest whole number\n\n\n  if (precision === 0) {\n    str = Math.floor(Number(str));\n  } // handle exponents\n\n\n  if (str.toString().match('e')) {\n    str = Number.parseFloat(str).toFixed(0);\n  }\n\n  var parts = str.toString().split('.');\n  parts[0] = parts[0].replace(',', '');\n  var numberStr = '';\n\n  if (parts.length > 1 && precision > 0) {\n    numberStr = stringWithPrecision(parts.join('.'), {\n      precision: precision\n    });\n  } else {\n    numberStr = parts[0];\n  }\n\n  return Number(numberStr).toLocaleString(localeString, {\n    minimumFractionDigits: precision\n  });\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/utils/numberWithCommas.js"],"names":["stringWithPrecision","numberWithCommas","str","options","precision","undefined","localeString","currentLang","Math","floor","Number","toString","match","parseFloat","toFixed","parts","split","replace","numberStr","length","join","toLocaleString","minimumFractionDigits"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,+BAApC;AAEA,OAAO,SAASC,gBAAT,CAA0BC,GAA1B,EAA6C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAClD,MAAI,CAACD,GAAL,EAAU;AACR,WAAO,OAAOA,GAAP,KAAe,QAAf,GACLA,GADK,GAEL,EAFF;AAGD;;AAED,MAAIE,SAAS,GAAG,CAAhB;;AACA,MAAID,OAAO,CAACC,SAAR,KAAsBC,SAA1B,EAAqC;AACnCD,IAAAA,SAAS,GAAGD,OAAO,CAACC,SAApB;AACD;;AAED,MAAIE,YAAY,GAAG,OAAnB;;AACA,MAAIH,OAAO,CAACI,WAAR,IAAuBJ,OAAO,CAACI,WAAR,KAAwB,IAAnD,EAAyD;AACvDD,IAAAA,YAAY,GAAG,OAAf;AACD,GAfiD,CAiBlD;;;AACA,MAAIF,SAAS,KAAK,CAAlB,EAAqB;AACnBF,IAAAA,GAAG,GAAGM,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACR,GAAD,CAAjB,CAAN;AACD,GApBiD,CAsBlD;;;AACA,MAAIA,GAAG,CAACS,QAAJ,GAAeC,KAAf,CAAqB,GAArB,CAAJ,EAA+B;AAC7BV,IAAAA,GAAG,GAAGQ,MAAM,CAACG,UAAP,CAAkBX,GAAlB,EAAuBY,OAAvB,CAA+B,CAA/B,CAAN;AACD;;AAED,MAAIC,KAAK,GAAGb,GAAG,CAACS,QAAJ,GAAeK,KAAf,CAAqB,GAArB,CAAZ;AACAD,EAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASE,OAAT,CAAiB,GAAjB,EAAsB,EAAtB,CAAX;AAEA,MAAIC,SAAS,GAAG,EAAhB;;AAEA,MAAIH,KAAK,CAACI,MAAN,GAAe,CAAf,IAAoBf,SAAS,GAAG,CAApC,EAAuC;AACrCc,IAAAA,SAAS,GAAGlB,mBAAmB,CAC7Be,KAAK,CAACK,IAAN,CAAW,GAAX,CAD6B,EAE7B;AAAEhB,MAAAA,SAAS,EAATA;AAAF,KAF6B,CAA/B;AAID,GALD,MAKO;AACLc,IAAAA,SAAS,GAAGH,KAAK,CAAC,CAAD,CAAjB;AACD;;AAED,SAAOL,MAAM,CAACQ,SAAD,CAAN,CAAkBG,cAAlB,CACLf,YADK,EAEL;AAAEgB,IAAAA,qBAAqB,EAAElB;AAAzB,GAFK,CAAP;AAID","sourcesContent":["import { stringWithPrecision } from 'lib/utils/stringWithPrecision'\n\nexport function numberWithCommas(str, options = {}) {\n  if (!str) {\n    return typeof str === 'number' ? \n      str :\n      ''    \n  }\n\n  let precision = 2\n  if (options.precision !== undefined) {\n    precision = options.precision\n  }\n\n  let localeString = 'en-GB'\n  if (options.currentLang && options.currentLang === 'es') {\n    localeString = 'es-ES'\n  }\n\n  // auto-round to the nearest whole number\n  if (precision === 0) {\n    str = Math.floor(Number(str))\n  }\n\n  // handle exponents\n  if (str.toString().match('e')) {\n    str = Number.parseFloat(str).toFixed(0)\n  }\n  \n  let parts = str.toString().split('.')\n  parts[0] = parts[0].replace(',', '')\n\n  let numberStr = ''\n\n  if (parts.length > 1 && precision > 0) {\n    numberStr = stringWithPrecision(\n      parts.join('.'),\n      { precision }\n    )\n  } else {\n    numberStr = parts[0]\n  }\n\n  return Number(numberStr).toLocaleString(\n    localeString,\n    { minimumFractionDigits: precision }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
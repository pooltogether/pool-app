{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext, useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useTranslation } from 'lib/../i18n';\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider';\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider';\nimport { Button } from 'lib/components/Button';\nimport { Modal } from 'lib/components/Modal';\nimport { usePrizeQuery } from 'lib/hooks/usePrizeQuery';\nimport PrizeIllustration from 'assets/images/prize-illustration-new@2x.png';\n\nconst debug = require('debug')('pool-app:NewPrizeWinnerEventListener');\n\nexport function NewPrizeWinnerEventListener(props) {\n  var _recentPrize$winners, _winner;\n\n  const {\n    t\n  } = useTranslation();\n  const router = useRouter();\n  const {\n    0: cachedChainId,\n    1: setCachedChainId\n  } = useState(null);\n  const {\n    0: storedRecentPrizeId,\n    1: setStoredRecentPrizeId\n  } = useState(null);\n  const {\n    0: newPrizeModalVisible,\n    1: setNewPrizeModalVisible\n  } = useState(null);\n  const {\n    chainId,\n    pauseQueries,\n    usersAddress\n  } = useContext(AuthControllerContext);\n  const {\n    pools\n  } = useContext(PoolDataContext); // TODO: Expand this to work for every pool!\n\n  const pool = pools === null || pools === void 0 ? void 0 : pools[0];\n  const recentPrizeId = (pool === null || pool === void 0 ? void 0 : pool.currentPrizeId) - 1;\n  const prizeId = `${pool === null || pool === void 0 ? void 0 : pool.poolAddress}-${recentPrizeId}`;\n  const {\n    status,\n    data,\n    error,\n    isFetching\n  } = usePrizeQuery(pauseQueries, chainId, pool, prizeId);\n  const recentPrize = data === null || data === void 0 ? void 0 : data.prize;\n  useEffect(() => {\n    if (recentPrizeId && storedRecentPrizeId !== recentPrizeId) {\n      debug('setting new stored prize count! prize awarded?');\n      setStoredRecentPrizeId(recentPrizeId);\n    }\n\n    if (!newPrizeModalVisible && storedRecentPrizeId !== null && storedRecentPrizeId !== recentPrizeId) {\n      debug('storedRecentPrizeId', storedRecentPrizeId);\n      debug('showingModal!');\n      setNewPrizeModalVisible(true);\n    }\n  }, [pool]);\n  useEffect(() => {\n    if (chainId !== cachedChainId) {\n      debug('clearing state!');\n      setNewPrizeModalVisible(false);\n      setStoredRecentPrizeId(null);\n      setCachedChainId(chainId);\n    }\n  }, [chainId]);\n\n  if (recentPrizeId === 0 || !recentPrize || !storedRecentPrizeId) {\n    debug('returning null because one of these is true', recentPrizeId === 0, !recentPrize, !storedRecentPrizeId);\n    return null;\n  }\n\n  const handleClose = e => {\n    e.preventDefault();\n    setNewPrizeModalVisible(false);\n  };\n\n  let winner;\n\n  if ((recentPrize === null || recentPrize === void 0 ? void 0 : (_recentPrize$winners = recentPrize.winners) === null || _recentPrize$winners === void 0 ? void 0 : _recentPrize$winners.length) > 0) {\n    winner = data.prize.winners[0];\n  }\n\n  const isWinner = ((_winner = winner) === null || _winner === void 0 ? void 0 : _winner.toLowerCase()) === (usersAddress === null || usersAddress === void 0 ? void 0 : usersAddress.toLowerCase());\n  const recentPrizeAwarded = recentPrize.awardedTimestamp;\n  debug('newPrizeModalVisible', newPrizeModalVisible);\n  debug('Boolean(recentPrizeAwarded)', Boolean(recentPrizeAwarded));\n  const show = newPrizeModalVisible && Boolean(recentPrizeAwarded) && !isNaN(recentPrizeId);\n  return __jsx(React.Fragment, null, __jsx(Modal, {\n    handleClose: handleClose,\n    visible: show,\n    header: __jsx(React.Fragment, null, t('aPrizeHasBeenAwarded'))\n  }, __jsx(\"img\", {\n    src: PrizeIllustration,\n    className: \"w-1/2 sm:w-1/2 lg:w-1/3 mx-auto\"\n  }), !usersAddress && __jsx(React.Fragment, null, t('connectAWalletToSeeIfYouWon')), usersAddress && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"mt-4\"\n  }, isWinner ? __jsx(React.Fragment, null, __jsx(\"h4\", {\n    className: \"text-flashy\"\n  }, t('youWon'))) : __jsx(React.Fragment, null, __jsx(\"h4\", null, t('unfortunatelyYouDidntWinThisOne')), __jsx(\"h6\", null, t('tryAgainNextWeek'))))), __jsx(\"div\", {\n    className: \"mt-4\"\n  }, __jsx(Button, {\n    secondary: true,\n    onClick: e => {\n      e.preventDefault();\n      setNewPrizeModalVisible(false);\n      let href = '/prizes/[symbol]/[prizeNumber]';\n      let as = `/prizes/${pool === null || pool === void 0 ? void 0 : pool.symbol}/${(pool === null || pool === void 0 ? void 0 : pool.currentPrizeId) - 1}`;\n\n      if (!usersAddress) {\n        href = `${href}?signIn=1`;\n        as = `${as}?signIn=1`;\n      }\n\n      router.push(href, as, {\n        shallow: true\n      });\n    }\n  }, t('viewPrize')))));\n}","map":{"version":3,"sources":["/Users/chuckbergeron/Git/crypto/pool-together/pool-app/lib/components/NewPrizeWinnerEventListener.jsx"],"names":["useContext","useEffect","useState","useRouter","useTranslation","AuthControllerContext","PoolDataContext","Button","Modal","usePrizeQuery","PrizeIllustration","debug","require","NewPrizeWinnerEventListener","props","t","router","cachedChainId","setCachedChainId","storedRecentPrizeId","setStoredRecentPrizeId","newPrizeModalVisible","setNewPrizeModalVisible","chainId","pauseQueries","usersAddress","pools","pool","recentPrizeId","currentPrizeId","prizeId","poolAddress","status","data","error","isFetching","recentPrize","prize","handleClose","e","preventDefault","winner","winners","length","isWinner","toLowerCase","recentPrizeAwarded","awardedTimestamp","Boolean","show","isNaN","href","as","symbol","push","shallow"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\n\nimport { useTranslation } from 'lib/../i18n'\nimport { AuthControllerContext } from 'lib/components/contextProviders/AuthControllerContextProvider'\nimport { PoolDataContext } from 'lib/components/contextProviders/PoolDataContextProvider'\nimport { Button } from 'lib/components/Button'\nimport { Modal } from 'lib/components/Modal'\nimport { usePrizeQuery } from 'lib/hooks/usePrizeQuery'\n\nimport PrizeIllustration from 'assets/images/prize-illustration-new@2x.png'\n\nconst debug = require('debug')('pool-app:NewPrizeWinnerEventListener')\n\nexport function NewPrizeWinnerEventListener(props) {\n  const { t } = useTranslation()\n  const router = useRouter()\n\n  const [cachedChainId, setCachedChainId] = useState(null)\n  const [storedRecentPrizeId, setStoredRecentPrizeId] = useState(null)\n  const [newPrizeModalVisible, setNewPrizeModalVisible] = useState(null)\n\n  const { chainId, pauseQueries, usersAddress } = useContext(AuthControllerContext)\n  const { pools } = useContext(PoolDataContext)\n\n  // TODO: Expand this to work for every pool!\n  const pool = pools?.[0]\n\n  const recentPrizeId = pool?.currentPrizeId - 1\n\n  const prizeId = `${pool?.poolAddress}-${recentPrizeId}`\n\n  const { status, data, error, isFetching } = usePrizeQuery(pauseQueries, chainId, pool, prizeId)\n  \n  const recentPrize = data?.prize\n  \n  useEffect(() => {\n    if (recentPrizeId && storedRecentPrizeId !== recentPrizeId) {\n      debug('setting new stored prize count! prize awarded?')\n      setStoredRecentPrizeId(recentPrizeId)\n    }\n\n    if (!newPrizeModalVisible && storedRecentPrizeId !== null && storedRecentPrizeId !== recentPrizeId) {\n      debug('storedRecentPrizeId', storedRecentPrizeId)\n      debug('showingModal!')\n      setNewPrizeModalVisible(true)\n    }\n  }, [pool])\n\n\n  useEffect(() => {\n    if (chainId !== cachedChainId) {\n      debug('clearing state!')\n      setNewPrizeModalVisible(false)\n      setStoredRecentPrizeId(null)\n      setCachedChainId(chainId)\n    }\n  }, [chainId])\n\n\n  if (recentPrizeId === 0 || !recentPrize || !storedRecentPrizeId) {\n    debug('returning null because one of these is true', recentPrizeId === 0, !recentPrize, !storedRecentPrizeId)\n    return null\n  }\n\n\n\n  const handleClose = (e) => {\n    e.preventDefault()\n\n    setNewPrizeModalVisible(false)\n  }\n\n  let winner\n  if (recentPrize?.winners?.length > 0) {\n    winner = data.prize.winners[0]\n  }\n  const isWinner = winner?.toLowerCase() === usersAddress?.toLowerCase()\n\n  const recentPrizeAwarded = recentPrize.awardedTimestamp\n  debug('newPrizeModalVisible', newPrizeModalVisible)\n  debug('Boolean(recentPrizeAwarded)', Boolean(recentPrizeAwarded))\n\n  const show = newPrizeModalVisible && Boolean(recentPrizeAwarded) && !isNaN(recentPrizeId)\n\n  return <>\n    <Modal\n      handleClose={handleClose}\n      visible={show}\n      header={<>\n        {t('aPrizeHasBeenAwarded')}\n      </>}\n    >\n      <img\n        src={PrizeIllustration}\n        className='w-1/2 sm:w-1/2 lg:w-1/3 mx-auto'\n      />\n\n      {!usersAddress && <>\n        {t('connectAWalletToSeeIfYouWon')}\n      </>}\n\n      {usersAddress && <>\n        <div className='mt-4'>\n          {isWinner ? <>\n            <h4\n              className='text-flashy'\n            >\n              {t('youWon')}\n            </h4>\n          </> : <>\n            <h4\n            >\n              {t('unfortunatelyYouDidntWinThisOne')}\n            </h4>\n            <h6\n            >\n              {t('tryAgainNextWeek')}\n            </h6>\n          </>}\n        </div>\n      </>}\n\n      <div className='mt-4'>\n        <Button\n          secondary\n          onClick={(e) => {\n            e.preventDefault()\n\n            setNewPrizeModalVisible(false)\n\n            let href = '/prizes/[symbol]/[prizeNumber]'\n            let as = `/prizes/${pool?.symbol}/${pool?.currentPrizeId - 1}`\n\n            if (!usersAddress) {\n              href = `${href}?signIn=1`\n              as = `${as}?signIn=1`\n            }\n\n            router.push(\n              href,\n              as,\n              { shallow: true }\n            )\n          }}\n        >\n          {t('viewPrize')}\n        </Button>\n      </div>\n    </Modal>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}